# Copyright (C) 2022 Exaloop Inc. <https://exaloop.io>
# Codon PEG grammar
# Adopted from Python 3's PEG grammar (https://docs.python.org/3/reference/grammar.html)

# TODO: nice docstrs

PREAMBLE {
  #include "codon/parser/peg/rules.h"
  #include <any>
  using namespace std;
  using namespace codon::ast;

  #define V0 VS[0]
  #define V1 VS[1]
  #define V2 VS[2]
  #define ac std::any_cast
  #define ac_expr std::any_cast<Expr*>
  #define ac_stmt std::any_cast<Stmt*>
  #define SemVals peg::SemanticValues

  #define aste(T, s, ...) setSI<Expr>(CTX.cache->N<T ## Expr>(__VA_ARGS__), s)
  #define asts(T, s, ...) setSI<Stmt>(CTX.cache->N<T ## Stmt>(__VA_ARGS__), s)

  template<typename T>
  T *setSI(ASTNode *n, const codon::SrcInfo &s) {
    n->setSrcInfo(s);
    return (T*)n;
  }

  template<typename F> auto vmap(const peg::SemanticValues &c, F &&f) {
    return vmap(static_cast<const vector<any>&>(c), f);
  }
  Expr *chain(const codon::ast::ParseContext &CTX, peg::SemanticValues &VS, const codon::SrcInfo &LOC) {
    Expr *b = ac_expr(V0);
    for (int i = 1; i < VS.size(); i++)
      b = aste(Binary, LOC, b, VS.token_to_string(i - 1), ac_expr(VS[i]));
    return b;
  }
  Expr *wrap_tuple(const codon::ast::ParseContext &CTX, peg::SemanticValues &VS, const codon::SrcInfo &LOC) {
    if (VS.size() == 1 && VS.tokens.empty())
      return ac_expr(V0);
    return aste(Tuple, LOC, VS.transform<Expr*>());
  }
}

program <- (statements (_ EOL)* / (_ EOL)*) !. {
  if (VS.empty())
    return asts(Suite, LOC);
  return ac_stmt(V0);
}

fstring <- fstring_prefix _ fstring_tail? _ !. {
  StringExpr::FormatSpec fs {"", "", ""};
  auto [e, t] = ac<std::pair<Expr *, string>>(V0);
  fs.text = t;
  if (VS.size() > 1) {
    auto [c, s] = ac<std::pair<string, string>>(V1);
    fs.conversion = c;
    fs.spec = s;
  }
  return make_pair(e, fs);
}
fstring_prefix <- star_expressions _ '='? {
  auto text = VS.sv();
  return make_pair(ac_expr(V0),
                   string(!VS.sv().empty() && VS.sv().back() == '=' ? VS.sv() : ""));
}
fstring_tail <-
  / fstring_conversion fstring_spec? {
    return make_pair(ac<string>(V0), VS.size() > 1 ? ac<string>(V1) : "");
  }
  / fstring_spec { return make_pair(std::string(), ac<string>(V0)); }
fstring_conversion <- "!" ("s" / "r" / "a") { return string(VS.sv().substr(1)); }
fstring_spec <- ':' format_spec { return ac<string>(V0); }

# Macros
list(c, e)  <- e (_ c _ e)*
tlist(c, e) <- e (_ c _ e)* (_ <c>)?

statements <- ((_ EOL)* statement)+ {
  auto s = asts(Suite, LOC, VS.transform<Stmt*>());
  cast<SuiteStmt>(s)->flatten();
  return s;
}
statement <- SAMEDENT compound_stmt / SAMEDENT simple_stmt
simple_stmt <- tlist(';', small_stmt) _ EOL {
  auto s = asts(Suite, LOC, VS.transform<Stmt*>());
  cast<SuiteStmt>(s)->flatten();
  return s;
}
small_stmt <-
  / assignment
  / 'pass' &(SPACE / ';' / EOL) { return any(asts(Suite, LOC)); }
  / 'break' &(SPACE / ';' / EOL) { return any(asts(Break, LOC)); }
  / 'continue' &(SPACE / ';' / EOL) { return any(asts(Continue, LOC)); }
  / global_stmt
  / nonlocal_stmt
  / yield_stmt &(SPACE / ';' / EOL)
  / assert_stmt
  / del_stmt
  / return_stmt &(SPACE / ';' / EOL)
  / raise_stmt &(SPACE / ';' / EOL)
  / print_stmt
  / import_stmt
  / expressions &(_ ';' / _ EOL)  { return any(asts(Expr, LOC, ac_expr(V0))); }
  / custom_small_stmt

assignment <-
  / id _ ':' _ expression (_ '=' _ star_expressions)? {
    return asts(Assign, LOC,
      ac_expr(V0), VS.size() > 2 ? ac_expr(V2) : nullptr, ac_expr(V1)
    );
  }
  / (star_targets _ (!'==' '=') _)+ star_expressions !(_ '=') {
    vector<Stmt*> stmts;
    for (int i = int(VS.size()) - 2; i >= 0; i--) {
      auto a = asts(Assign, LOC, ac_expr(VS[i]), ac_expr(VS[i + 1]));
      stmts.push_back(a);
    }
    return asts(Suite, LOC, std::move(stmts));
  }
  / star_expression _ augassign '=' ^ _ star_expressions {
    auto a = asts(Assign, LOC, ac_expr(V0), aste(Binary, LOC, clone(ac_expr(V0)), ac<string>(V1), ac_expr(V2), true));
    return a;
  }
augassign <- <
  '+' / '-' / '**' / '*' / '@' / '//' / '/' / '%' / '&' / '|' / '^' / '<<' / '>>'
> {
  return VS.token_to_string();
}
global_stmt <- 'global' SPACE tlist(',', NAME) {
  return asts(Suite, LOC,
    vmap(VS, [&](const any &i) { return asts(Global, LOC, ac<string>(i), false); })
  );
}
nonlocal_stmt <- 'nonlocal' SPACE tlist(',', NAME) {
  return asts(Suite, LOC,
    vmap(VS, [&](const any &i) { return asts(Global, LOC, ac<string>(i), true); })
  );
}
yield_stmt <-
  / 'yield' SPACE 'from' SPACE expression { return asts(YieldFrom, LOC, ac_expr(V0)); }
  / 'yield' (SPACE expressions)? {
    return asts(Yield, LOC, !VS.empty() ? ac_expr(V0) : nullptr);
  }
assert_stmt <- 'assert' SPACE expression (_ ',' _ expression)? {
  return asts(Assert, LOC, ac_expr(V0), VS.size() > 1 ? ac_expr(V1) : nullptr);
}
# TODO: do targets as in Python
del_stmt <- 'del' SPACE tlist(',', expression) {
  return asts(Suite, LOC,
    vmap(VS, [&](const any &i) { return asts(Del, LOC, ac_expr(i)); })
  );
}
return_stmt <- 'return' (SPACE expressions)? {
  return asts(Return, LOC, !VS.empty() ? ac_expr(V0) : nullptr);
}
raise_stmt <-
  / 'raise' SPACE expression (SPACE 'from' SPACE expression)? {
    return asts(Throw, LOC, ac_expr(V0), VS.size() > 1 ? ac_expr(V1) : nullptr);
  }
  / 'raise' { return asts(Throw, LOC, nullptr); }
print_stmt <-
  / 'print' SPACE star_expression (_ ',' _ star_expression)* (_ <','>)? {
    return asts(Print, LOC, VS.transform<Expr*>(), !VS.tokens.empty());
  }
  / 'print' _ &EOL { return asts(Print, LOC, vector<Expr*>{}, false); }
import_stmt <- import_name / import_from
import_name <- 'import' SPACE list(',', as_name) {
  return asts(Suite, LOC,
    vmap(VS.transform<pair<Expr*, string>>(), [&](const pair<Expr*, string> &i) {
      return asts(Import, LOC, i.first, nullptr, vector<Param>{}, nullptr, i.second);
    })
  );
}
as_name <- dot_name (SPACE 'as' SPACE NAME)? {
  return pair(ac_expr(V0), VS.size() > 1 ? ac<string>(V1) : "");
}
import_from <-
  / 'from' SPACE (_ <'.'>)* (_ dot_name)? SPACE 'import' SPACE '*' {
    return asts(Import, LOC,
      VS.size() == 1 ? ac_expr(V0) : nullptr, aste(Id, LOC, "*"), vector<Param>{},
      nullptr, "", int(VS.tokens.size())
    );
  }
  / 'from' SPACE (_ <'.'>)* (_ dot_name)? SPACE 'import' SPACE
    (from_as_parens / from_as_items) {
    auto f = VS.size() == 2 ? ac_expr(V0) : nullptr;
    return asts(Suite, LOC,
      vmap(
        ac<SemVals>(VS.size() == 2 ? V1 : V0),
        [&](const any &i) {
          auto p = ac<pair<any, string>>(i);
          auto t = ac<tuple<Expr*, vector<Param>, Expr*, bool>>(p.first);
          return asts(Import, LOC,
            f, get<0>(t), std::move(get<1>(t)), get<2>(t), p.second, int(VS.tokens.size()), get<3>(t)
          );
        }
      )
    );
  }
from_as_parens <- '(' _ tlist(',', from_as) _ ')' { return VS; }
from_as_items <- list(',', from_as) { return VS; }
from_as <- from_id (SPACE 'as' SPACE NAME)? {
  return pair(V0, VS.size() > 1 ? ac<string>(V1) : "");
}
from_id <-
  / dot_name _ ':' _ expression {
    return tuple(ac_expr(V0), vector<Param>(), ac_expr(V1), false);
  }
  / dot_name _ from_params (_ '->' _ expression)? {
    return tuple(
      ac_expr(V0),
      ac<SemVals>(V1).transform<Param>(),
      VS.size() > 2 ? ac_expr(V2) : aste(Id, LOC, "NoneType"),
      true
    );
  }
  / dot_name { return tuple(ac_expr(V0), vector<Param>{}, (Expr*)nullptr, true); }
dot_name <- id (_ '.' _ NAME)* {
  if (VS.size() == 1)
    return ac_expr(V0);
  auto dot = aste(Dot, LOC, ac_expr(V0), ac<string>(V1));
  for (int i = 2; i < VS.size(); i++)
    dot = aste(Dot, LOC, dot, ac<string>(VS[i]));
  return dot;
}
from_params <- '(' _ tlist(',', from_param)? _ ')' { return VS; }
from_param <- expression { return Param(LOC, "", ac_expr(V0), nullptr); }
#TODO expand import logic / param { return ac<Param>(V0); }

suite <- (simple_stmt / (_ EOL)+ &INDENT statements (_ EOL)* &DEDENT) {
  return ac_stmt(V0);
}
compound_stmt <-
  / function
  / if_stmt
  / class
  / with_stmt
  / for
  / try_stmt
  / while_stmt
  / match_stmt
  / custom_stmt
if_stmt <- ('if' SPACE named_expression _ ':' _ suite)
           (SAMEDENT 'elif' SPACE named_expression _ ':' _ suite)*
           (SAMEDENT 'else' _ ':' _ suite)? {
  Stmt *lastElse = VS.size() % 2 == 0 ? nullptr : SuiteStmt::wrap(ac_stmt(VS.back()));
  for (size_t i = VS.size() - bool(lastElse); i-- > 0; ) {
    lastElse = asts(If, LOC, ac_expr(VS[i - 1]), SuiteStmt::wrap(ac_stmt(VS[i])), SuiteStmt::wrap(lastElse));
    i--;
  }
  return lastElse;
}
while_stmt <- ('while' SPACE named_expression _ ':' _ suite)
              (SAMEDENT 'else' (SPACE 'not' SPACE 'break')*  _ ':' _ suite)?  {
  return asts(While, LOC,
    ac_expr(V0), ac_stmt(V1), VS.size() > 2 ? ac_stmt(V2) : nullptr
  );
}
for <- decorator? for_stmt {
  if (VS.size() > 1) {
    auto s = (ForStmt*)(ac_stmt(V1));
    s->setDecorator(ac_expr(V0));
    return (Stmt*)s;
  }
  return ac_stmt(V0);
}
for_stmt <- ('for' SPACE star_targets)
            (SPACE 'in' SPACE star_expressions _ ':' _ suite)
            (SAMEDENT 'else' (SPACE 'not' SPACE 'break')* _ ':' _ suite)? {
  return asts(For, LOC,
    ac_expr(V0), ac_expr(V1), ac_stmt(V2), VS.size() > 3 ? ac_stmt(VS[3]) : nullptr
  );
}
with_stmt <- 'with' SPACE (with_parens_item / with_item) _ ':' _ suite {
  return asts(With, LOC,
    ac<SemVals>(V0).transform<pair<Expr*, Expr*>>(), ac_stmt(V1)
  );
}
with_parens_item <- '(' _ tlist(',', as_item) _ ')' { return VS; }
with_item <- list(',', as_item) { return VS; }
as_item <-
  / expression SPACE 'as' SPACE id &(_ (',' / ')' / ':'))  {
    return pair(ac_expr(V0), ac_expr(V1));
  }
  / expression { return pair(ac_expr(V0), (Expr*)nullptr); }
# TODO: else block?
try_stmt <-
  / ('try' _ ':' _ suite) excepts else_finally? {
    std::pair<Stmt*, Stmt*> ef {nullptr, nullptr};
    if (VS.size() > 2) ef = ac<std::pair<Stmt *, Stmt *>>(V2);
    return asts(Try, LOC,
      ac_stmt(V0),
      ac<SemVals>(V1).transform<ExceptStmt*>(),
      ef.first, ef.second
    );
  }
  / ('try' _ ':' _ suite) (SAMEDENT 'finally' _ ':' _ suite)? {
    return asts(Try, LOC,
      ac_stmt(V0), vector<ExceptStmt*>{}, nullptr,
      VS.size() > 1 ? ac_stmt(V1) : nullptr
    );
  }
else_finally <-
  / SAMEDENT 'else' _ ':' _ suite
    SAMEDENT 'finally' _ ':' _ suite { return std::pair<Stmt *, Stmt *>(ac_stmt(V0), ac_stmt(V1)); }
  / SAMEDENT 'else' _ ':' _ suite { return std::pair<Stmt *, Stmt *>(ac_stmt(V0), nullptr); }
  / SAMEDENT 'finally' _ ':' _ suite { return std::pair<Stmt *, Stmt *>(nullptr, ac_stmt(V0)); }
excepts <- (SAMEDENT except_block)+ { return VS; }
except_block <-
  / 'except' SPACE expression (SPACE 'as' SPACE NAME)? _ ':' _ suite {
    if (VS.size() == 3)
      return setSI<ExceptStmt>(CTX.cache->N<ExceptStmt>(ac<string>(V1), ac_expr(V0), ac_stmt(V2)), LOC);
    else
      return setSI<ExceptStmt>(CTX.cache->N<ExceptStmt>("", ac_expr(V0), ac_stmt(V1)), LOC);
  }
  / 'except' _ ':' _ suite { return setSI<ExceptStmt>(CTX.cache->N<ExceptStmt>("", nullptr, ac_stmt(V0)), LOC); }
function <-
  / extern_decorators function_def (_ EOL)+ &INDENT extern (_ EOL)* &DEDENT {
    auto fn = (FunctionStmt*)(ac_stmt(V1));
    fn->setDecorators(ac<vector<Expr*>>(V0));
    fn->setSuite(SuiteStmt::wrap(asts(Expr, LOC, aste(String, LOC, ac<string>(V2)))));
    return (Stmt*)fn;
  }
  / decorators? function_def _ suite {
    auto fn = (FunctionStmt*)(ac_stmt(VS.size() > 2 ? V1 : V0));
    if (VS.size() > 2)
      fn->setDecorators(ac<vector<Expr*>>(V0));
    fn->setSuite(SuiteStmt::wrap(ac_stmt(VS.size() > 2 ? V2 : V1)));
    return (Stmt*)fn;
  }
extern <- (empty_line* EXTERNDENT (!EOL .)* EOL empty_line*)+ {
  return string(VS.sv());
}
~empty_line <- [ \t]* EOL
function_def <-
  / 'def' SPACE NAME _ generics _ params (_ '->' _ expression)? _ ':' {
    auto params = ac<SemVals>(V2).transform<Param>();
    for (auto &p: ac<vector<Param>>(V1))
      params.push_back(p);
    return asts(Function, LOC,
      ac<string>(V0),
      VS.size() == 4 ? ac_expr(VS[3]) : nullptr,
      params,
      nullptr
    );
  }
  / 'def' SPACE NAME _ params (_ '->' _ expression)? _ ':' {
    return asts(Function, LOC,
      ac<string>(V0),
      VS.size() == 3 ? ac_expr(VS[2]) : nullptr,
      ac<SemVals>(V1).transform<Param>(),
      nullptr
    );
  }
params <- '(' _ tlist(',', param)? _ ')' { return VS; }
param <-
  / param_name _ ':' _ expression (_ '=' _ expression)? {
    return Param(LOC, ac<string>(V0), ac_expr(V1), VS.size() > 2 ? ac_expr(V2) : nullptr);
  }
  / param_name (_ '=' _ expression)? {
    return Param(LOC, ac<string>(V0), nullptr, VS.size() > 1 ? ac_expr(V1) : nullptr);
  }
param_name <- <'**' / '*'>? _ NAME {
  return (!VS.tokens.empty() ? VS.token_to_string() : "") + ac<string>(V0);
}
generics <- '[' _ tlist(',', param) _ ']' {
  vector<Param> params;
  for (auto &p: VS) {
    auto v = ac<Param>(p);
    v.status = Param::Generic;
    if (!v.type) v.type = aste(Id, LOC, "type");
    params.push_back(v);
  }
  return params;
}
decorators <- decorator+ {
  return VS.transform<Expr*>();
}
decorator <- ('@' _ !(('llvm' / 'python') _ EOL) named_expression _ EOL SAMEDENT) {
  return ac_expr(V0);
}
extern_decorators <-
  / decorators? ('@' _ <'llvm'/'python'> _ EOL SAMEDENT) decorators? {
    vector<Expr*> vs{aste(Id, LOC, VS.token_to_string())};
    for (auto &v: VS) {
      auto nv = ac<vector<Expr*>>(v);
      vs.insert(vs.end(), nv.begin(), nv.end());
    }
    return vs;
  }
class <- decorators? class_def {
  if (VS.size() == 2) {
    auto fn = ac_stmt(V1);
    cast<ClassStmt>(fn)->setDecorators(ac<vector<Expr*>>(V0));
    return fn;
  }
  return ac_stmt(V0);
}
base_class_args <- '(' _ tlist(',', expression)? _ ')' {
  return VS.transform<Expr*>();
}
class_args <-
  / generics _ base_class_args { return make_pair(ac<vector<Param>>(V0), ac<vector<Expr*>>(V1)); }
  / generics { return make_pair(ac<vector<Param>>(V0), vector<Expr*>{}); }
  / base_class_args { return make_pair(vector<Param>{}, ac<vector<Expr*>>(V0)); }
class_def <- 'class' SPACE NAME _ class_args? _ ':' _ suite {
  vector<Param> generics;
  vector<Expr*> baseClasses;
  if (VS.size() == 3)
    std::tie(generics, baseClasses) = ac<pair<vector<Param>, vector<Expr*>>>(V1);
  vector<Param> args;
  auto suite = (SuiteStmt*)(asts(Suite, LOC));
  auto s = cast<SuiteStmt>(ac_stmt(VS.size() == 3 ? V2 : V1));
  seqassertn(s, "not a suite");
  for (auto *i: *s) {
    if (auto a = cast<AssignStmt>(i))
      if (auto ei = cast<IdExpr>(a->getLhs())) {
        args.push_back(Param(a->getSrcInfo(), ei->getValue(), a->getTypeExpr(), a->getRhs()));
        continue;
      }
    suite->addStmt(i);
  }
  suite->flatten();
  for (auto &p: generics)
    args.push_back(p);
  return asts(Class, LOC,
    ac<string>(V0), std::move(args), suite, vector<Expr*>{}, baseClasses
  );
}
match_stmt <- 'match' SPACE expression _ ':' (_ EOL)+
              &INDENT (SAMEDENT case)+ (_ EOL)* &DEDENT {
  return asts(Match, LOC, ac_expr(V0), VS.transform<MatchCase>(1));
}
case <-
  / 'case' SPACE expression SPACE 'if' SPACE pipe _ ':' _ suite {
    return MatchCase{ac_expr(V0), ac_expr(V1), ac_stmt(V2)};
  }
  / 'case' SPACE expression _ ':' _ suite {
    return MatchCase{ac_expr(V0), nullptr, ac_stmt(V1)};
  }
custom_stmt <-
  / NAME SPACE expression _ ':' _ suite {
    return asts(Custom, LOC, ac<string>(V0), ac_expr(V1), ac_stmt(V2));
  }
  / NAME _ ':' _ suite {
    return asts(Custom, LOC, ac<string>(V0), nullptr, ac_stmt(V2));
  }
custom_stmt__PREDICATE {
  auto kwd = ac<string>(V0);
  return CTX.hasCustomStmtKeyword(kwd, VS.choice() == 0); // ignore it
}

custom_small_stmt <- NAME SPACE expressions {
  return any(asts(Custom, LOC, ac<string>(V0), ac_expr(V1), nullptr));
}
custom_small_stmt__PREDICATE {
  auto kwd = ac<string>(V0);
  return CTX.hasCustomExprStmt(kwd); // ignore it
}


########################################################################################
# (2) Expressions
########################################################################################

expressions <- tlist(',', expression) { return wrap_tuple(CTX, VS, LOC); }
expression <-
  / lambdef { return ac_expr(V0); }
  / disjunction SPACE? 'if' SPACE? disjunction SPACE? 'else' SPACE? expression {
    return aste(If, LOC, ac_expr(V1), ac_expr(V0), ac_expr(V2));
  }
  / pipe { return ac_expr(V0); }
lambdef <-
  / 'lambda' SPACE lparams _ ':' _ expression {
    return aste(Lambda, LOC,
      ac<SemVals>(V0).transform<Param>(), ac_expr(V1)
    );
  }
  / 'lambda' _ ':' _ expression {
    return aste(Lambda, LOC, vector<Param>{}, ac_expr(V0));
  }
lparams <- tlist(',', lparam)? { return VS; }
lparam <- param_name (_ '=' _ expression)? {
    return Param(LOC, ac<string>(V0), nullptr, VS.size() > 1 ? ac_expr(V1) : nullptr);
  }
pipe <-
  / disjunction (_ <'|>' / '||>'> _ disjunction)+ {
    vector<Pipe> v;
    for (int i = 0; i < VS.size(); i++)
      v.push_back(Pipe{i ? VS.token_to_string(i - 1) : "", ac_expr(VS[i])});
    return aste(Pipe, LOC, std::move(v));
  }
  / disjunction { return ac_expr(V0); }
disjunction <-
  / conjunction (SPACE? 'or' SPACE? conjunction)+ {
    auto b = aste(Binary, LOC, ac_expr(V0), "||", ac_expr(V1));
    for (int i = 2; i < VS.size(); i++)
      b = aste(Binary, LOC, b, "||", ac_expr(VS[i]));
    return b;
  }
  / conjunction { return ac_expr(V0); }
conjunction <-
  / inversion (SPACE? 'and' SPACE? inversion)+ {
    auto b = aste(Binary, LOC, ac_expr(V0), "&&", ac_expr(V1));
    for (int i = 2; i < VS.size(); i++)
      b = aste(Binary, LOC, b, "&&", ac_expr(VS[i]));
    return b;
  }
  / inversion { return ac_expr(V0); }
inversion <-
  / 'not' SPACE inversion { return aste(Unary, LOC, "!", ac_expr(V0)); }
  / comparison { return ac_expr(V0); }
comparison <- bitwise_or compare_op_bitwise_or* {
  if (VS.size() == 1) {
    return ac_expr(V0);
  } else if (VS.size() == 2) {
    auto p = ac<pair<string, Expr*>>(V1);
    return aste(Binary, LOC, ac_expr(V0), p.first, p.second);
  } else {
    vector<pair<string, Expr*>> v{pair(string(), ac_expr(V0))};
    auto vp = VS.transform<pair<string, Expr*>>(1);
    v.insert(v.end(), vp.begin(), vp.end());
    return aste(ChainBinary, LOC, std::move(v));
  }
}
compare_op_bitwise_or <-
  / SPACE 'not' SPACE 'in' SPACE bitwise_or {
    return pair(string("not in"), ac_expr(V0));
  }
  / SPACE 'is' SPACE 'not' SPACE bitwise_or {
    return pair(string("is not"), ac_expr(V0));
  }
  / SPACE <'in' / 'is'> SPACE bitwise_or {
    return pair(VS.token_to_string(), ac_expr(V0));
  }
  / _ <'==' / '!=' / '<=' / '<' / '>=' / '>'> _ bitwise_or {
    return pair(VS.token_to_string(), ac_expr(V0));
  }
bitwise_or  <- bitwise_xor (_ <'|'> _ bitwise_xor)* { return chain(CTX, VS, LOC); }
bitwise_xor <- bitwise_and (_ <'^'> _ bitwise_and)* { return chain(CTX, VS, LOC); }
bitwise_and <- shift_expr  (_ <'&'> _ shift_expr )* { return chain(CTX, VS, LOC); }
shift_expr <- sum  (_ <'<<' / '>>'> _ sum )* { return chain(CTX, VS, LOC); }
sum        <- term (_ <'+' / '-'>   _ term)* { return chain(CTX, VS, LOC); }
term <- factor (_ <'*' / '//' / '/' / '%' / '@'> _ factor)* { return chain(CTX, VS, LOC); }
factor <-
  / <'+' / '-' / '~'> _ factor {
    return aste(Unary, LOC, VS.token_to_string(), ac_expr(V0));
  }
  / power { return ac_expr(V0); }
power <-
  / primary _ <'**'> _ factor {
    return aste(Binary, LOC, ac_expr(V0), "**", ac_expr(V1));
  }
  / primary { return ac_expr(V0); }
primary <- atom (_ primary_tail)* {
  auto e = ac<Expr*>(V0);
  for (int i = 1; i < VS.size(); i++) {
    auto p = ac<pair<int, any>>(VS[i]);
    if (p.first == 0)
      e = aste(Dot, LOC, e, ac<string>(p.second));
    else if (p.first == 1)
      e = aste(Call, LOC, e, ac_expr(p.second));
    else if (p.first == 2)
      e = aste(Call, LOC, e, ac<vector<CallArg>>(p.second));
    else
      e = aste(Index, LOC, e, ac_expr(p.second));
  }
  return e;
}
primary_tail <-
  / '.' _ NAME { return pair(0, V0); }
  / genexp { return pair(1, V0); }
  / arguments { return pair(2, VS.size() ? V0 : any(vector<CallArg>{})); }
  / slices { return pair(3, V0); }
slices <- '[' _ tlist(',', slice) _ ']' { return wrap_tuple(CTX, VS, LOC); }
slice <-
  / slice_part _ ':' _ slice_part (_ ':' _ slice_part)? {
    return aste(Slice, LOC,
      ac_expr(V0), ac_expr(V1), VS.size() > 2 ? ac_expr(V2) : nullptr
    );
  }
  / expression { return ac_expr(V0); }
slice_part <- expression? { return VS.size() ? V0 : make_any<Expr*>(nullptr); }
atom <-
  / STRING (SPACE STRING)* {
    auto e = aste(String, LOC, VS.transform<StringExpr::String>());
    return e;
  }
  / id { return ac_expr(V0); }
  / 'True' { return aste(Bool, LOC, true); }
  / 'False' { return aste(Bool, LOC, false);}
  / 'None' { return aste(None, LOC); }
  / INT _ '...' _ INT {
    return aste(Range, LOC,
      aste(Int, LOC, ac<string>(V0)), aste(Int, LOC, ac<string>(V1))
    );
  }
  / FLOAT NAME? {
    return aste(Float, LOC, ac<string>(V0), VS.size() > 1 ? ac<string>(V1) : "");
  }
  / INT NAME? {
    return aste(Int, LOC, ac<string>(V0), VS.size() > 1 ? ac<string>(V1) : "");
  }
  / parentheses { return ac_expr(V0); }
  / '...' { return aste(Ellipsis, LOC); }
parentheses <- (
  tuple / yield / named / genexp / listexpr / listcomp / dict / set / dictcomp / setcomp
)
tuple <-
  / '(' _ ')' { return aste(Tuple, LOC, VS.transform<Expr*>()); }
  / '(' _ tlist(',', star_named_expression) _ ')' { return wrap_tuple(CTX, VS, LOC); }
yield <- '(' _ 'yield' _ ')' { return aste(Yield, LOC); }
named <- '(' _ named_expression _ ')'
genexp <- '(' _ named_expression SPACE for_if_clauses _ ')' {
  return aste(Generator,
    LOC, CTX.cache, GeneratorExpr::Generator, ac_expr(V0), ac<std::vector<Stmt*>>(V1)
  );
}
listexpr <- '[' _ tlist(',', star_named_expression)? _ ']' {
  return aste(List, LOC, VS.transform<Expr*>());
}
listcomp <- '[' _ named_expression SPACE for_if_clauses _ ']' {
  return aste(Generator,
    LOC, CTX.cache, GeneratorExpr::ListGenerator, ac_expr(V0), ac<std::vector<Stmt*>>(V1)
  );
}
set <- '{' _ tlist(',', star_named_expression) _ '}' {
  return aste(Set, LOC, VS.transform<Expr*>());
}
setcomp <- '{' _ named_expression SPACE for_if_clauses _ '}' {
  return aste(Generator,
    LOC, CTX.cache, GeneratorExpr::SetGenerator, ac_expr(V0), ac<std::vector<Stmt*>>(V1)
  );
}
dict <- '{' _ tlist(',', double_starred_kvpair)? _ '}' {
  return aste(Dict, LOC, VS.transform<Expr*>());
}
dictcomp <- '{' _ kvpair SPACE for_if_clauses _ '}' {
  auto p = ac<Expr*>(V0);
  return aste(Generator,
    LOC, CTX.cache, (*cast<TupleExpr>(p))[0], (*cast<TupleExpr>(p))[1], ac<std::vector<Stmt*>>(V1)
  );
}
double_starred_kvpair <-
  / '**' _ bitwise_or {
    return aste(KeywordStar, LOC, ac_expr(V0));
  }
  / kvpair { return ac<Expr*>(V0); }
kvpair <- expression _ ':' _ expression {
  return aste(Tuple, LOC, std::vector<Expr*>{ac_expr(V0), ac_expr(V1)});
}
for_if_clauses <- for_if_clause (SPACE for_if_clause)* {
  std::vector<Stmt*> v = ac<std::vector<Stmt*>>(V0);
  auto tail = VS.transform<std::vector<Stmt*>>(1);
  for (auto &t: tail)
    v.insert(v.end(), t.begin(), t.end());
  return v;
}
for_if_clause <- 'for' SPACE star_targets SPACE 'in' SPACE disjunction
                 (SPACE? 'if' SPACE? disjunction)* {
  std::vector<Stmt*> v{asts(For, LOC, ac_expr(V0), ac_expr(V1), nullptr)};
  auto tail = VS.transform<Expr*>(2);
  for (auto &t: tail)
    v.push_back(asts(If, LOC, t, nullptr));
  return v;
}

star_targets <- tlist(',', star_target) { return wrap_tuple(CTX, VS, LOC); }
star_target <-
  / '*' _ !'*' star_target { return aste(Star, LOC, ac_expr(V0)); }
  / star_parens { return ac_expr(V0); }
  / primary { return ac_expr(V0); }
star_parens <-
  / '(' _ tlist(',', star_target) _ ')' { return wrap_tuple(CTX, VS, LOC); }
  / '[' _ tlist(',', star_target) _ ']' { return wrap_tuple(CTX, VS, LOC); }

star_expressions <- tlist(',', star_expression) { return wrap_tuple(CTX, VS, LOC); }
star_expression <-
  / '*' _ bitwise_or { return aste(Star, LOC, ac_expr(V0)); }
  / expression { return ac_expr(V0); }
star_named_expression <-
  / '*' _ bitwise_or { return aste(Star, LOC, ac_expr(V0)); }
  / named_expression { return ac_expr(V0); }
named_expression <-
  / NAME _ ':=' _ ^ expression {
    return aste(Assign, LOC, aste(Id, LOC, ac<string>(V0)), ac_expr(V1));
  }
  / expression !(_ ':=') { return ac_expr(V0); }
arguments <- '(' _ tlist(',', args)? _ ')' {
  vector<CallArg> result;
  for (auto &v: VS)
    for (auto &i: ac<vector<CallArg>>(v))
      result.push_back(i);
  return result;
}
args <- (simple_args (_ ',' _ kwargs)? / kwargs) {
  auto args = ac<vector<CallArg>>(V0);
  if (VS.size() > 1) {
    auto v = ac<vector<CallArg>>(V1);
    args.insert(args.end(), v.begin(), v.end());
  }
  return args;
}
simple_args <- list(',', (starred_expression / named_expression !(_ '='))) {
  return vmap(VS, [](auto &i) { return CallArg(ac_expr(i)); });
}
starred_expression <- '*' _ expression { return aste(Star, LOC, ac_expr(V0)); }
kwargs <-
  / list(',', kwarg_or_starred) _ ',' _ list(',', kwarg_or_double_starred) {
    return VS.transform<CallArg>();
  }
  / list(',', kwarg_or_starred) { return VS.transform<CallArg>(); }
  / list(',', kwarg_or_double_starred) { return VS.transform<CallArg>(); }
kwarg_or_starred <-
  / NAME _ '=' _ expression { return CallArg(LOC, ac<string>(V0), ac_expr(V1)); }
  / starred_expression { return CallArg(ac_expr(V0)); }
kwarg_or_double_starred <-
  / NAME _ '=' _ expression { return CallArg(LOC, ac<string>(V0), ac_expr(V1)); }
  / '**' _ expression {
    return CallArg(aste(KeywordStar, LOC, ac_expr(V0)));
  }
id <- NAME { return aste(Id, LOC, ac<string>(V0)); }
INT <- (BININT / HEXINT / DECINT) { return string(VS.sv()); }
BININT <- <'0' [bB] [0-1] ('_'* [0-1])*>
HEXINT <- <'0' [xX] [0-9a-fA-F] ('_'? [0-9a-fA-F])*>
DECINT <- <[0-9] ('_'? [0-9])*>
FLOAT <- (EXPFLOAT / PTFLOAT) { return string(VS.sv()); }
PTFLOAT <- DECINT? '.' DECINT / DECINT '.'
EXPFLOAT <- (PTFLOAT / DECINT) [eE] <'+' / '-'>? DECINT
NAME <-
  / keyword [a-zA-Z_0-9]+ { return string(VS.sv()); }
  / !keyword <[a-zA-Z_] [a-zA-Z_0-9]*> { return VS.token_to_string(); }
STRING <- <NAME? STR> {
  auto p = StringExpr::String(
    ac<string>(VS.size() > 1 ? V1 : V0),
    VS.size() > 1 ? ac<string>(V0) : ""
  );
  if (p.prefix != "r" && p.prefix != "R") {
    p.value = unescape(p.value);
  } else {
    p.prefix = "";
  }
  return p;
}
STRING__PREDICATE {
  auto p = StringExpr::String(
    ac<string>(VS.size() > 1 ? V1 : V0),
    VS.size() > 1 ? ac<string>(V0) : ""
  );
  if (p.prefix != "r" && p.prefix != "R")
    try {
      p.value = unescape(p.value);
    } catch (std::invalid_argument &e) {
      MSG = "invalid code in a string";
      return false;
    } catch (std::out_of_range &) {
      MSG = "invalid code in a string";
      return false;
    }
  return true;
}
STR <- <
  '"""' (!'"""' CHAR)*       '"""'   /  '\'\'\'' (!'\'\'\'' CHAR)*     '\'\'\'' /
  '"'   (!('"' / EOL) CHAR)* '"'     /  '\''     (!('\'' / EOL) CHAR)* '\''
> {
  string s;
  s.reserve(VS.size());
  for (auto &v: VS)
    s.append(ac<string>(v));
  return s;
}
CHAR <- ('\\' . / .) { return string(VS.sv()); }
~COMMENT <- <'#' (!EOL .)*>
~INDENT__NOPACKRAT <- <[ \t]*> { CTX.indent.push(VS.sv().size()); }
INDENT__PREDICATE {
  if (!(CTX.indent.empty() && VS.sv().size()) &&
      !(!CTX.indent.empty() && VS.sv().size() > CTX.indent.top())) {
    MSG = "unexpected indentation";
    return false;
  }
  return true;
}
~SAMEDENT__NOPACKRAT <- <[ \t]*> {}
SAMEDENT__PREDICATE {
  return !(!CTX.indent.size() && VS.sv().size()) &&
         !(CTX.indent.size() && VS.sv().size() != CTX.indent.top());
}
~DEDENT__NOPACKRAT <- <[ \t]*> { CTX.indent.pop(); }
DEDENT__PREDICATE {
  if (!(CTX.indent.size() && VS.sv().size() < CTX.indent.top())) {
    MSG = "unexpected dedent";
    return false;
  }
  return true;
}
~EXTERNDENT__NOPACKRAT <- <[ \t]*> {}
EXTERNDENT__PREDICATE {
  return !(!CTX.indent.size() && VS.sv().size()) &&
         !(CTX.indent.size() && VS.sv().size() < CTX.indent.top());
}
~EOL <- <[\r][\n] / [\r\n]>
~SPACE <- ([ \t]+ / COMMENT / NLP EOL) SPACE?
~_ <- SPACE?

# TODO: add async / await
~keyword <- <
  'False' / 'else' / 'import' / 'pass' / 'None' / 'break' / 'except' / 'in' / 'raise' /
  'True' / 'class' / 'finally' / 'is' / 'return' / 'and' / 'continue' / 'for' / 'as'  /
  'lambda' / 'try' / 'def' / 'from' / 'while' / 'assert' / 'del' / 'global' / 'not' /
  'with' / 'elif' / 'if' / 'or' / 'yield'
>

# https://docs.python.org/3/library/string.html#formatspec
format_spec <- ([^{}] [<>=^] / [<>=^])? [+- ]? 'z'? '#'? '0'? [0-9]* [_,]* ('.' [0-9]+)? [bcdeEfFgGnosxX%]? {
  return string(VS.sv());
}
