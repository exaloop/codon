{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Welcome to Codon","text":"<p>Codon is a high-performance Python implementation that compiles to native machine code without any runtime overhead. Typical speedups over vanilla Python are on the order of 10-100x or more, on a single thread. Codon's performance is typically on par with (and sometimes better than) that of C/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times higher still.</p> <p>Tip</p> <p>Think of Codon as Python reimagined for static, ahead-of-time compilation, built from the ground up with best possible performance in mind.</p>"},{"location":"#explore","title":"Explore","text":"Getting Started \u2192 <p>Learn how to install Codon and run your first program.</p> Labs \u2192 <p>Step-by-step guides to learn Codon concepts and features.</p> Parallelism \u2192 <p>Learn parallel programming in Codon.</p> API Reference \u2192 <p>Explore built-in types, functions, and modules available in Codon.</p>"},{"location":"#uses","title":"Uses","text":"<ul> <li> Accelerate Python code without having to rewrite it in another language</li> <li> Write multithreaded or GPU code in Python</li> <li> Compile Python code to run on various kinds of hardware, such as edge devices or embedded systems</li> <li> JIT-compile performance-sensitive functions in an existing Python codebase</li> <li> Accelerate and parallelize NumPy code</li> <li> Create Python extensions without using C or Cython</li> </ul>"},{"location":"#goals","title":"Goals","text":"<ul> <li> No learning curve: Be as close to CPython as possible in terms of syntax, semantics and libraries</li> <li> Top-notch performance: At least on par with low-level languages like C, C++ or Rust</li> <li> Hardware support: Full, seamless support for multicore programming, multithreading (no GIL!), GPU and more</li> <li> Optimizations: Comprehensive optimization framework that can target high-level Python constructs   and libraries</li> <li> Interoperability: Full interoperability with Python's ecosystem of packages and libraries</li> </ul>"},{"location":"#non-goals","title":"Non-goals","text":"<ul> <li> <p> Drop-in replacement for CPython: Codon is not a drop-in replacement for CPython. There are some   aspects of Python that are not suitable for static compilation \u2014 we don't support these in Codon.   There are ways to use Codon in larger Python codebases via its JIT decorator   or Python extension backend. Codon also supports   calling any Python module via its Python interoperability.   See also \"Differences with Python\" in the docs.</p> </li> <li> <p> New syntax and language constructs: We try to avoid adding new syntax, keywords or other language   features as much as possible. While Codon does add some new syntax in a couple places (e.g. to express   parallelism), we try to make it as familiar and intuitive as possible.</p> </li> </ul>"},{"location":"developers/build/","title":"Build from Source","text":"<p>Tip</p> <p>Unless you really need to build Codon from source, it is strongly recommended to use pre-built binaries if possible.</p>"},{"location":"developers/build/#dependencies","title":"Dependencies","text":"<p>Codon uses an LLVM fork based on LLVM 20. To build it, you can do the following:</p> <pre><code>git clone --depth 1 -b codon https://github.com/exaloop/llvm-project\ncmake -S llvm-project/llvm -B llvm-project/build \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_INCLUDE_TESTS=OFF \\\n    -DLLVM_ENABLE_RTTI=ON \\\n    -DLLVM_ENABLE_ZLIB=OFF \\\n    -DLLVM_ENABLE_ZSTD=OFF \\\n    -DLLVM_ENABLE_PROJECTS=\"openmp\" \\\n    -DLLVM_TARGETS_TO_BUILD=all\ncmake --build llvm-project/build\ncmake --install llvm-project/build --prefix=llvm-project/install\n</code></pre> <p>You can use <code>-DLLVM_ENABLE_PROJECTS=\"clang;openmp\"</code> if you do not have <code>clang</code> installed on your system. We also recommend setting a local prefix during installation to avoid clashes with the system LLVM.</p>"},{"location":"developers/build/#build","title":"Build","text":"<p>Codon requires <code>libgfortran</code>, the parent directory of which must be specified via the <code>CODON_SYSTEM_LIBRARIES</code> environment variable. For example, on macOS, with a <code>brew</code>-installed <code>libgfortran</code> (obtainable via <code>brew install gcc</code>):</p> <pre><code>export CODON_SYSTEM_LIBRARIES=/opt/homebrew/opt/gcc/lib/gcc/current\n</code></pre> <p>On Linux:</p> <pre><code>export CODON_SYSTEM_LIBRARIES=/usr/lib/x86_64-linux-gnu\n</code></pre> <p>Then, the following can generally be used to build Codon. The build process will automatically download and build several smaller dependencies.</p> <pre><code>cd codon\nmkdir build\ncmake -S . -B build \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_DIR=$(llvm-config --cmakedir) \\\n    -DCMAKE_C_COMPILER=clang \\\n    -DCMAKE_CXX_COMPILER=clang++\ncmake --build build --config Release\ncmake --install build --prefix=install\n</code></pre> <p>This will produce the <code>codon</code> executable in the <code>install/bin</code> directory, as well as <code>codon_test</code> in the <code>build</code> directory which runs the test suite. Additionally, a number of shared libraries are produced in <code>install/lib/codon</code>:</p> <ul> <li><code>libcodonc</code>: The compiler library used by the <code>codon</code> command-line tool.</li> <li><code>libcodonrt</code>: The runtime library used during execution.</li> <li><code>libomp</code>: OpenMP runtime used to execute parallel code.</li> </ul> <p>Warning</p> <p>Make sure the <code>llvm-config</code> being used corresponds to Codon's LLVM. You can also use <code>-DLLVM_DIR=llvm-project/install/lib/cmake/llvm</code> on the first <code>cmake</code> command if you followed the instructions above for compiling LLVM.</p>"},{"location":"developers/build/#gpu-support","title":"GPU support","text":"<p>Add <code>-DCODON_GPU=ON</code> to the first <code>cmake</code> command above to enable GPU support. This will require CUDA to be installed on your system.</p>"},{"location":"developers/build/#jupyter-support","title":"Jupyter support","text":"<p>To enable Jupyter support, you will need to build the Jupyter plugin:</p> <pre><code># Linux version:\ncmake -S jupyter -B jupyter/build \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_C_COMPILER=clang \\\n    -DCMAKE_CXX_COMPILER=clang++ \\\n    -DLLVM_DIR=$(llvm-config --cmakedir) \\\n    -DCODON_PATH=install \\\n    -DOPENSSL_ROOT_DIR=$(openssl version -d | cut -d' ' -f2 | tr -d '\"') \\\n    -DOPENSSL_CRYPTO_LIBRARY=/usr/lib64/libssl.so \\\n    -DXEUS_USE_DYNAMIC_UUID=ON\n# n.b. OPENSSL_CRYPTO_LIBRARY might differ on your system.\n\n# On macOS, do this instead:\nOPENSSL_ROOT_DIR=/usr/local/opt/openssl cmake -S jupyter -B jupyter/build \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_C_COMPILER=clang \\\n    -DCMAKE_CXX_COMPILER=clang++ \\\n    -DLLVM_DIR=$(llvm-config --cmakedir) \\\n    -DCODON_PATH=install\n\n# Then:\ncmake --build jupyter/build\ncmake --install jupyter/build\n</code></pre>"},{"location":"developers/compilation/","title":"Compilation Flow","text":"<p>This page describes the internal compilation flow from source code to native code. It is intended for Codon developers and contributors seeking to understand or extend the compiler.</p> <p></p>"},{"location":"developers/compilation/#overview","title":"Overview","text":"<p>Codon compiles Python code to native machine code using a custom frontend (parser and type checker), an intermediate representation (IR), and LLVM as the backend. The compilation process is ahead-of-time (AOT) by default, though a just-in-time (JIT) mode is available as well.</p> <p>The major compilation stages are:</p> <ol> <li>Parsing</li> <li>Type checking</li> <li>Codon IR generation</li> <li>Codon IR optimization</li> <li>LLVM lowering</li> <li>Code generation</li> </ol>"},{"location":"developers/compilation/#parsing","title":"Parsing","text":"<p>The parser converts source code into an abstract syntax tree (AST) using Python's grammar. Codon uses a custom PEG parser.</p> <p>For example, this code:</p> <pre><code>x = 2 + 3\n</code></pre> <p>would create the following AST after parsing:</p> <pre><code>graph TD\n  A(=) --&gt; B(x);\n  A --&gt; C(&amp;plus;);\n  C --&gt; D(2);\n  C --&gt; E(3);</code></pre> <p>Relevant code and grammars can be found in <code>codon/parser/peg/</code>.</p>"},{"location":"developers/compilation/#type-checking","title":"Type checking","text":"<p>Unlike CPython, Codon performs type checking to determine data types ahead of time. Type checking is applied on the AST, and attaches a type to every applicable AST node. For example, the AST above would be typed as follows:</p> <pre><code>graph TD\n  A(\"= : int\") --&gt; B(\"x : int\");\n  A --&gt; C(\"&amp;plus; : int\");\n  C --&gt; D(\"2 : int\");\n  C --&gt; E(\"3 : int\");</code></pre> <p>In practice, numerous translation steps are applied to the AST as well. For example, operators like <code>+</code>, <code>-</code>, etc. are replaced by magic method calls like <code>int.__add__</code>, <code>float.__sub__</code>, etc. Similarly, functions without explicit type annotations are specialized when called for the given argument types, a technique known as monomorphization.</p> <p>Internally, Coodn's type checker uses a modified Hindley-Milner type system, adapted to handle various special cases relevant to Python code and semantics.</p> <p>Relevant code can be found in <code>codon/parser/visitors/typecheck/</code>. See also the CC 2023 Codon paper for a detailed overview of Coodn's type checker.</p>"},{"location":"developers/compilation/#codon-ir-generation","title":"Codon IR generation","text":"<p>After type checking, the typed AST is lowered to Codon IR. Codon IR utilizes a vastly reduced set of nodes as compared to the AST, making it more practical for optimizations and analyses.</p> <p>Relevant code can be found in <code>codon/parser/visitors/translate/</code>.</p>"},{"location":"developers/compilation/#codon-ir-optimization","title":"Codon IR optimization","text":"<p>Codon IR performs a suite of analyses and optimizations, ranging from general-purpose compiler optimizations like constant folding and dead code elimination to more specialized optimizations like operator fusion for NumPy. Learn more in the Codon IR docs.</p> <p>Relevant code can be found in <code>codon/cir/</code>.</p>"},{"location":"developers/compilation/#llvm-lowering","title":"LLVM lowering","text":"<p>Next, Codon IR is lowered to LLVM IR. Below, we describe this process in detail.</p>"},{"location":"developers/compilation/#python-types-to-llvm-types","title":"Python types to LLVM types","text":"<p>Python types need to be mapped to LLVM types. Some of the conversions are quite straightforward:</p> <ul> <li><code>int</code> becomes an LLVM <code>i64</code> (note that this deviates from Python's arbitrary-   width integers)</li> <li><code>float</code> becomes an LLVM <code>double</code></li> <li><code>bool</code> becomes an LLVM <code>i8</code> (we could use <code>i1</code> in theory, but <code>i8</code> is   compatible with C/C++)</li> </ul> <p>Tuple types are converted to <code>struct</code>s containing the tuple's element types. For example, the type of <code>(42, 3.14, True)</code> becomes the LLVM structure type <code>{i64, double, i8}</code>. Since tuples are immutable, these structs are passed by value, and in many cases tuples are completely optimized out by LLVM's optimization passes.</p> <p>User-defined classes are similar, except instead of passing by value, they are dynamically allocated and passed by pointer, which allows mutations to be handled correctly. For example, consider:</p> <pre><code>class C:\n    a: int\n    b: float\n    c: bool\n</code></pre> <p>When creating an instance <code>C()</code>, under the hood a dynamic memory allocation occurs to store the contents of the same <code>{i64, double, i8}</code>, and return a pointer to that memory as the result of instantiation (after calling <code>C.__init__()</code>).</p> <p>There are several other LLVM types that Codon exposes, like <code>Ptr[T]</code> to represent a pointer to an object of type <code>T</code>. Other Python types, however, are constructed from these building blocks. For example, the built-in collection types like <code>list</code>, <code>dict</code> and <code>set</code> are all implemented within Codon as classes; some other built-in types are implemented as named tuples, and so on.</p>"},{"location":"developers/compilation/#operators","title":"Operators","text":"<p>Codon IR has no concept of operators like <code>+</code>, <code>-</code>, etc. Instead, it represents these operations as magic method calls. Magic methods of primitive types like <code>int</code> are implemented in Codon using inline LLVM. For example:</p> <pre><code>class int:\n    ...\n\n    @llvm\n    def __add__(self, other: int) -&gt; int:\n        %tmp = add i64 %self, %other\n        ret i64 %tmp\n\n    @llvm\n    def __add__(self, other: float) -&gt; float:\n        %tmp1 = sitofp i64 %self to double\n        %tmp2 = fadd double %tmp1, %other\n        ret double %tmp2\n</code></pre> <p>Note that Codon supports method overloading: the compiler will choose the correct <code>__add__</code> based on the right-hand side's type during the parsing and type checking stages.</p>"},{"location":"developers/compilation/#control-flow","title":"Control flow","text":"<p>Control flow constructs require the creation of multiple LLVM basic blocks. For example, consider the following pseudocode:</p> <pre><code>if condition:\n    true_branch\nelse:\n    false_branch\n</code></pre> <p>Compilation would roughly proceed as follows, where \\(B\\) denotes the current basic block as maintained by the LLVM lowering pass, and is where all new instructions are inserted:</p> <ol> <li> <p>Create four new basic blocks: \\(B_\\mathrm{cond}\\), \\(B_\\mathrm{true}\\),    \\(B_\\mathrm{false}\\) and \\(B_\\mathrm{exit}\\).</p> </li> <li> <p>Generate a branch to \\(B_\\mathrm{cond}\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{cond}\\) and generate code \\(C\\) for <code>condition</code>, then generate    a conditional branch to \\(B_\\mathrm{true}\\) and \\(B_\\mathrm{false}\\) based on \\(C\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{true}\\) and generate code for <code>true_branch</code>, then add a    branch to \\(B_\\mathrm{exit}\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{false}\\) and generate code for <code>false_branch</code>, then add a    branch to \\(B_\\mathrm{exit}\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{exit}\\).</p> </li> </ol> <p>As a diagram...</p> <pre><code>graph TD\n    B_0(B&lt;sub&gt;0&lt;/sub&gt;) ---&gt; B_cond\n    B_cond(B&lt;sub&gt;cond&lt;/sub&gt;) -- C is true --&gt; B_true\n    B_cond -- C is false --&gt; B_false\n    B_true(B&lt;sub&gt;true&lt;/sub&gt;) ---&gt; B_exit(B&lt;sub&gt;exit&lt;/sub&gt;)\n    B_false(B&lt;sub&gt;false&lt;/sub&gt;) ---&gt; B_exit</code></pre> <p>Here is another example involving a loop:</p> <pre><code>while condition:\n    body\n</code></pre> <p>Compilation would proceed as follows:</p> <ol> <li> <p>Create three new basic blocks: \\(B_\\mathrm{cond}\\), \\(B_\\mathrm{body}\\) and    \\(B_\\mathrm{exit}\\)</p> </li> <li> <p>Generate a branch to \\(B_\\mathrm{cond}\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{cond}\\) and generate code \\(C\\) for <code>condition</code>, then    generate a conditional branch to \\(B_\\mathrm{body}\\) and \\(B_\\mathrm{exit}\\)    based on \\(C\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{body}\\) and generate code for <code>body</code>, then add a    branch to \\(B_\\mathrm{cond}\\).</p> </li> <li> <p>Set \\(B \\gets B_\\mathrm{exit}\\).</p> </li> </ol> <p>Again as a diagram...</p> <pre><code>graph TD\n    B_0(B&lt;sub&gt;0&lt;/sub&gt;) ---&gt; B_cond\n    B_cond(B&lt;sub&gt;cond&lt;/sub&gt;) -- C is true --&gt; B_body\n    B_cond -- C is false --&gt; B_exit(B&lt;sub&gt;exit&lt;/sub&gt;)\n    B_body(B&lt;sub&gt;body&lt;/sub&gt;) ----&gt; B_cond</code></pre> <p><code>break</code> and <code>continue</code> are supported as follows: <code>break</code> simply becomes a branch to \\(B_\\mathrm{exit}\\) and <code>continue</code> becomes a branch to \\(B_\\mathrm{cond}\\). One notable exception to this pertains to <code>finally</code> blocks, which is discussed below.</p> <p>Other control flow constructs (like <code>elif</code>) work in an analogous way, and in fact can be constructed using just <code>if</code>-<code>else</code> and <code>while</code>.</p>"},{"location":"developers/compilation/#try-except-finally","title":"<code>try</code>-<code>except</code>-<code>finally</code>","text":"<p><code>try</code>-<code>except</code>-<code>finally</code> is much more complex than other control flow constructs in terms or how it maps to LLVM IR. Exception handling itself is implemented in Codon using the Itanium C++ ABI for zero-cost exceptions, along with LLVM's exception handling instructions: (<code>landingpad</code>, <code>resume</code>, <code>invoke</code>) and specialized personality function. There is additional bookkeeping required for knowing when we're compiling inside a <code>try</code> block, which requires functions to be called with the LLVM <code>invoke</code> instruction (rather than the usual <code>call</code>) and to specify a basic block to branch to if an exception occurs (i.e. the basic block corresponding to <code>except</code>).</p> <p><code>try</code>-<code>except</code>-<code>finally</code> becomes complex in cases where <code>finally</code> changes control flow in non-trivial ways, such as:</p> <pre><code>def foo():\n    try:\n        return 1\n    finally:\n        return 2\n</code></pre> <p>What does <code>foo()</code> return? If you're not familiar with <code>finally</code> semantics, you might be inclined to say <code>1</code>, but the correct answer is <code>2</code>: <code>finally</code> blocks are always executed.</p> <p>This has important implications for compilation: namely, branches always need to be aware of enclosing <code>try</code>-<code>finally</code> blocks. Here is another example:</p> <pre><code>def bar():\n    for i in range(10):\n        print(i)\n        try:\n            if i == 5:\n                break\n        finally:\n            continue\n</code></pre> <p>When <code>i == 5</code>, we'll reach the <code>break</code> statement, but the <code>break</code> needs to actually branch to the <code>finally</code> block, otherwise the <code>finally</code> block would we skipped over. Now, the <code>finally</code> itself has a <code>continue</code>, which overrides the previous <code>break</code> and resumes the loop. So, in the end, all the integers <code>0</code>...<code>9</code> are printed.</p> <p>To generate correct code for <code>try</code>-<code>except</code>-<code>finally</code>, Codon does the following:</p> <ul> <li> <p>Firstly, the LLVM lowering pass maintains a stack of enclosing <code>try</code>-<code>except</code>-<code>finally</code> blocks,   since if we reach a <code>return</code>, <code>break</code> or <code>continue</code>, we need to know whether   we really need to branch to some <code>finally</code> block.</p> </li> <li> <p>Next, it constructs a state machine for each series of nested <code>try</code>-<code>except</code>-<code>finally</code>   blocks, since once we do reach the <code>finally</code>, we need to know how we got there in order to   determine what action needs to be taken next. For instance, if we got there via a <code>return</code>,   we need to actually execute that return statement at the end of the block; or perhaps we got   there by catching an exception that needs to be delegated to a parent <code>try</code>-<code>except</code>-<code>finally</code>.</p> </li> </ul> <p>The aforementioned state machine has the following states:</p> <ul> <li> <p><code>NORMAL</code>: The <code>finally</code> was reached through normal execution of the code. Nothing special   needs to be done; just branch to the next block normally.</p> </li> <li> <p><code>THROWN</code>: An exception was thrown and we are executing the <code>finally</code> before propagating   the exception out of the function. The exception object itself will be stored in a pre-defined   place that we can access from the <code>finally</code> block.</p> </li> <li> <p><code>CAUGHT</code>: An exception was caught and we are reaching the <code>finally</code> through some <code>except</code> block.   Again nothing special needs to be done here; just branch to the next block normally.</p> </li> <li> <p><code>RETHROW</code>: The <code>finally</code> is being executed while unwinding and the exception must be re-thrown.</p> </li> <li> <p><code>RETURN</code>: The <code>finally</code> was reached after encountering an enclosed <code>return</code> statement. After   executing the <code>finally</code>, we need to execute the <code>return</code>. The return value itself will be   stored in a pre-defined place that we can access from the <code>finally</code> block.</p> </li> <li> <p><code>BREAK</code>: The <code>finally</code> was reached after encountering a <code>break</code>. We need to actually execute   the <code>break</code> after executing the <code>finally</code> block.</p> </li> <li> <p><code>CONTINUE</code>: The <code>finally</code> was reached after encountering a <code>continue</code>. We need to actually   execute the <code>continue</code> after executing the <code>finally</code> block.</p> </li> </ul> <p>Importantly, these actions are recursive, so when we say \"execute the <code>return</code> after executing the <code>finally</code> block\", that may entail branching to another enclosing <code>finally</code> block and repeating the same action.</p> <p>Here is a real example of what this state machine looks like. Consider:</p> <pre><code>def baz():\n    for i in range(5):\n        try:\n            try:\n                if i == 3:\n                    return i\n            finally:\n                if i &gt; 2:\n                    break\n        finally:\n            if i &lt; 4:\n                continue\n    return i\n</code></pre> <p>Here are the various transitions between the states for different conditions throughout the loop:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; NORMAL\n\n    NORMAL --&gt; RETURN: i = 3\n    NORMAL --&gt; BREAK: i &gt; 3\n    NORMAL --&gt; CONTINUE: i \u2264 2\n\n    RETURN --&gt; BREAK: i &gt; 2\n    RETURN --&gt; CONTINUE: i \u2264 2\n    RETURN --&gt; [*]: otherwise\n\n    BREAK --&gt; CONTINUE: i &lt; 4\n    BREAK --&gt; [*]: otherwise\n\n    CONTINUE --&gt; NORMAL</code></pre> <p>The internal state machine will transition between the states based on these conditions until the loop terminates, signified by reaching the end state.</p>"},{"location":"developers/compilation/#variables","title":"Variables","text":"<p>LLVM IR uses static single assignment form, or SSA, which effectively means LLVM IR variables must be assigned exactly once. As a result, we can't map Python variables directly to LLVM IR variables. Instead, we map each Python variable to a stack-allocated piece of memory:</p> <pre><code>x = 42\n</code></pre> <p>becomes:</p> <pre><code>%x = alloca i64, align 8\nstore i64 42, i64* %x, align 8\n</code></pre> <p><code>alloca</code> is an LLVM IR instruction that allocates space on the current stack frame; <code>alloca i64</code> allocates space for a 64-bit integer. Treating variables this way is standard practice when compiling to LLVM IR, and C/C++ compilers will do the same (e.g. <code>long x = 42</code> produces this exact code with Clang).</p> <p>Many variables are implicitly introduced by the parser and/or type checker. For example:</p> <pre><code>a, b = b, a\n</code></pre> <p>... a common Python idiom for swapping the values of two variables, will implicitly be transformed into</p> <pre><code>tmp = (b, a)\na = tmp[0]\nb = tmp[1]\n</code></pre> <p>thus introducing the new variable <code>tmp</code>.</p>"},{"location":"developers/compilation/#functions","title":"Functions","text":"<p>Python functions map directly to LLVM functions:</p> <pre><code>def foo(a: int, b: int):\n    return a + b\n</code></pre> <p>becomes:</p> <pre><code>define i64 @foo(i64 %0, i64 %1) {\n  %a = alloca i64, align 8\n  %b = alloca i64, align 8\n  store i64 %0, i64* %a, align 8\n  store i64 %1, i64* %b, align 8\n  %a0 = load i64, i64* %a, align 8\n  %b0 = load i64, i64* %b, align 8\n  %ans = add nsw i64 %a0, %b0\n  ret i64 %ans\n}\n</code></pre> <p>Notice that space is allocated for the arguments via <code>alloca</code>, since they should be treated like normal variables inside the function.</p>"},{"location":"developers/compilation/#generators","title":"Generators","text":"<p>Generators are implemented using LLVM coroutines. Coroutines are like functions that allow suspension and resumption (much like what happens with Python's <code>yield</code>). Coroutines maintain their state (i.e. local variables, position in the function, yielded value) in a coroutine frame. Coroutines in LLVM are indeed also like normal functions, but delineate their resume/suspend points with special intrinsics and \"return\" a handle to their coroutine frames. Here are some of the important LLVM intrinsics that Codon uses when generating code for coroutines:</p> <ul> <li><code>@llvm.coro.id</code>: Returns a token that can identify the coroutine, which can be passed to many of the   other intrinsics.</li> <li><code>@llvm.coro.size.i64</code>: Returns the size of the coroutine frame for dynamic allocation.</li> <li><code>@llvm.coro.begin</code>: Returns a \"handle\" to the coroutine frame.</li> <li><code>@llvm.coro.suspend</code>: Marks a suspension point.</li> <li><code>@llvm.coro.end</code>: Marks the end of the coroutine and destroys the coroutine frame.</li> <li><code>@llvm.coro.resume</code>: Resumes a coroutine given a coroutine handle.</li> <li><code>@llvm.coro.done</code>: Checks if a coroutine is at its final suspend point.</li> <li><code>@llvm.coro.promise</code>: Returns a pointer to the coroutine promise: a region of memory that stores   values \"yielded\" from the coroutine.</li> <li><code>@llvm.coro.destroy</code>: Destroys a finished coroutine.</li> </ul> <p>With these primitives, generators are implemented roughly as follows:</p> <ul> <li>Functions with <code>yield</code> are converted to LLVM coroutines.</li> <li>Code is generated for <code>yield</code> statements by storing the yielded value in the coroutine promise,   then calling <code>@llvm.coro.suspend</code>.</li> <li>Python's <code>next()</code> built-in is implemented by calling <code>@llvm.coro.done</code> to see if the given generator   is finished, then calling <code>@llvm.coro.resume</code> to resume it and finally <code>@llvm.coro.promise</code> to obtain   the generated value.</li> <li><code>for x in generator</code> is implemented by repeatedly calling <code>@llvm.coro.resume</code>/<code>@llvm.coro.promise</code>   until <code>@llvm.coro.done</code> indicates that we should stop.</li> </ul> <p>Here is an example:</p> <pre><code>for i in range(3):\n    print(i)\n</code></pre> <p>Here is the (simplified) LLVM IR generated for this snippet:</p> <pre><code>entry:\n  %g = call ptr @range(i64 3)\n  br label %for\n\nfor:\n  call void @llvm.coro.resume(ptr %g)\n  %done = call i1 @llvm.coro.done(ptr %g)\n  br i1 %done, label %exit, label %body\n\nbody:\n  %p = call ptr @llvm.coro.promise(ptr %g, i32 8, i1 false)\n  %i = load i64, ptr %p\n  call void @print(i64 %i)\n  br label %for\n\nexit:\n  call void @llvm.coro.destroy(ptr %g)\n</code></pre> <p>In summary:</p> <ul> <li>The call to <code>@range</code> returns a handle (with type <code>ptr</code>) to the range generator.</li> <li>The generator is resumed with <code>@llvm.coro.resume</code> (note that all coroutines will be initially suspended to   match Python's generator semantics).</li> <li>If <code>@llvm.coro.done</code> indicates that the generator is done, the loop is exited and <code>@llvm.coro.destroy</code> is   called to destroy the generator.</li> <li>Otherwise, in the body of the loop, the next value for <code>i</code> is obtained by calling <code>@llvm.coro.promise</code>   (the other arguments are simply the alignment of the promise (<code>i32 8</code>) and whether we want to obtain a   promise given a handle or vice versa (<code>i1 false</code>)).</li> </ul> <p>Coroutines are heavily optimized by LLVM. The code above, after optimizations are applied, becomes simply:</p> <pre><code>  call void @print(i64 0)\n  call void @print(i64 1)\n  call void @print(i64 2)\n</code></pre> <p>Info</p> <p>Codon's LLVM fork implements coroutine elision analysis through escape analysis of the coroutine    handle, as opposed to the standard analysis that relies on examining <code>@llvm.coro.destroy</code> calls.    This was found to be much better at determining which coroutines can be optimized away.</p>"},{"location":"developers/compilation/#program-structure","title":"Program structure","text":"<p>Python doesn't have an explicit <code>main()</code> function as an entry point like C does. However, we need to generate a <code>main()</code> function in LLVM IR to be able to execute the generated code..</p> <p>Codon handles this by putting everything at the top level into its own implicit function:</p> <pre><code>a = 42\nprint(a * 2)\n</code></pre> <p>becomes:</p> <pre><code>a = 0\ndef main():\n    global a\n    a = 42\n    print(a * 2)\n</code></pre> <p>If compiling to a shared object, a global constructor is added to call the implicit <code>main()</code>, which ensures initialization is still performed.</p> <p>Relevant code can be found in <code>codon/cir/llvm</code>.</p>"},{"location":"developers/compilation/#code-generation","title":"Code generation","text":"<p>Codon invokes LLVM\u2019s code generation infrastructure to emit native code. This also includes invoking LLVM's optimization pipeline when compiling in release mode (corresponding to Clang's <code>-O3</code>). Codon also has several of its own LLVM optimization passes:</p> <ul> <li>Allocation removal pass: Lowers dynamic allocation of known, small size to stack allocations.   This is useful when e.g. instantiating classes that don't escape the enclosing function.</li> <li>Allocation hoist pass: Hoists dynamic allocations outside of loops when possible. This allows   the same memory to be reused across loop iterations which improves cache performance.</li> <li>Allocation free pass: Automatically frees dynamic allocations when they are no longer being   used. Improves cache performance. This pass is off by default but can be enabled with the   hidden <code>-auto-free</code> compiler flag.</li> <li>Coroutine branch simplification pass: Some of LLVM's standard coroutine passes can result   in complex branches that are difficult to reason about. This pass simplifies those branches.</li> <li>Architecture-specific passes: Enables vectorization and other features specific to the host   architecture. Similar to <code>-march=native</code> in Clang. Can be disabled with the <code>-disable-native</code>   compiler flag.</li> </ul>"},{"location":"developers/compilation/#gpu-code-generation","title":"GPU code generation","text":"<p>If the program contains GPU kernels, those kernels are separated into a new LLVM module to be handled specially. In particular:</p> <ul> <li>Certain functions are replaced with GPU-compatible alternatives. For instance, the <code>sqrt()</code>   function might be replaced with <code>__nv_sqrt</code> from CUDA's libdevice library.</li> <li>Exceptions are disabled and replaced with unreachable directives, which enables additional   optimizations.</li> <li>The module is compiled to PTX code   and written to disk. The PTX code is then loaded at runtime to invoke the kernel.</li> </ul>"},{"location":"developers/compilation/#jit-compilation","title":"JIT compilation","text":"<p>Codon also includes a JIT based on LLVM's ORC JIT and implemented with LLVM's <code>LLJIT</code>. This JIT is used to support the <code>@codon.jit</code> Python decorator as well as Codon's Jupyter kernel.</p> <p>Note that <code>codon run</code> also uses <code>LLJIT</code> to execute the generated LLVM code.</p> <p>Relevant code can be found in <code>codon/compiler/</code>.</p>"},{"location":"developers/compilation/#debugging","title":"Debugging","text":"<p>The <code>-log l</code> flag will dump the outputs of the various compilation stages to files that can be examined. This includes:</p> <ul> <li>AST with type information</li> <li>Both unoptimized and optimized Codon IR</li> <li>LLVM IR</li> </ul> <p>See the relevant docs for other debugging options.</p>"},{"location":"developers/contribute/","title":"Contribute","text":"<p>Thank you for considering contributing to Codon! This page contains some helpful information for getting started. The best place to ask questions or get feedback is our Discord.</p>"},{"location":"developers/contribute/#development-workflow","title":"Development workflow","text":"<p>All development is done on the <code>develop</code> branch. Just before release, we bump the version number, merge into <code>master</code> and tag the build with a tag of the form <code>vX.Y.Z</code> where <code>X</code>, <code>Y</code> and <code>Z</code> are the SemVer major, minor and patch numbers, respectively. Our CI build process automatically builds and deploys tagged commits as a new GitHub release.</p>"},{"location":"developers/contribute/#coding-standards","title":"Coding standards","text":"<p>All C++ code should be formatted with ClangFormat using the <code>.clang-format</code> file in the root of the repository.</p>"},{"location":"developers/contribute/#writing-tests","title":"Writing tests","text":"<p>Tests are written as Codon programs. The <code>test/core/</code> directory contains some examples. If you add a new test file, be sure to add it to <code>test/main.cpp</code> so that it will be executed as part of the test suite. There are two ways to write tests for Codon:</p>"},{"location":"developers/contribute/#new-style","title":"New style","text":"<p>Example:</p> <pre><code>@test\ndef my_test():\n    assert 2 + 2 == 4\nmy_test()\n</code></pre> <p>Semantics: <code>assert</code> statements in functions marked <code>@test</code> are not compiled to standard assertions: they don't terminate the program when the condition fails, but instead print source information, fail the test, and move on.</p>"},{"location":"developers/contribute/#old-style","title":"Old style","text":"<p>Example:</p> <pre><code>print(2 + 2)  # EXPECT: 4\n</code></pre> <p>Semantics: The source file is scanned for <code>EXPECT</code>s, executed, then the output is compared to the \"expected\" output. Note that if you have, for example, an <code>EXPECT</code> in a loop, you will need to duplicate it however many times the loop is executed. Using <code>EXPECT</code> is helpful mainly in cases where you need to test control flow, otherwise prefer the new style.</p>"},{"location":"developers/contribute/#pull-requests","title":"Pull requests","text":"<p>Pull requests should generally be based on the <code>develop</code> branch. Before submitting a pull request, please make sure...</p> <ul> <li>... to provide a clear description of the purpose of the pull request.</li> <li>... to include tests for any new or changed code.</li> <li>... that all code is formatted as per the guidelines above.</li> </ul>"},{"location":"developers/extend/","title":"Extend Codon","text":"<p>Codon supports plugins that can be loaded dynamically. Plugins can contain IR passes that can be inserted into the Codon IR pass pipeline, as well as LLVM passes to be used during backend code generation.</p>"},{"location":"developers/extend/#configuration","title":"Configuration","text":"<p>Plugin information is specified through a TOML file called <code>plugin.toml</code>. The following fields are supported:</p> <ul> <li><code>about.name</code>: Plugin name</li> <li><code>about.description</code>: Plugin description</li> <li><code>about.version</code>: Plugin version, using semantic versioning</li> <li><code>about.url</code>: Plugin URL</li> <li><code>about.supported</code>: Supported Codon versions, using semantic versioning ranges</li> <li><code>library.cpp</code>: Shared library to be loaded upon loading the plugin, which includes   the plugin implementation (see below) and any necessary runtime functions. The   library extension (i.e. <code>.so</code> or <code>.dylib</code>) will be added automatically, and should   not be included.</li> <li><code>library.codon</code>: Standard library code that should be included with the plugin.   It is recommended to put this code in directory <code>stdlib/&lt;plugin_name&gt;</code>, whereupon   the value of this parameter would be <code>\"stdlib\"</code>.</li> <li><code>library.link</code>: Libraries to be linked when compiling to an executable. The string   <code>{root}</code> will be replaced with the path to the TOML configuration file. For example,   a value similar to <code>{root}/build/libmyplugin.a</code> might be used, assuming the plugin   also builds a static library containing necessary runtime functions.</li> </ul> <p>Here is an example configuration file for the validate pass shown in the Codon IR docs:</p> <pre><code>[about]\nname = \"MyValidate\"\ndescription = \"my validation plugin\"\nversion = \"0.0.1\"\nurl = \"https://example.com\"\nsupported = \"&gt;=0.18.0\"\n\n[library]\ncpp = \"build/libmyvalidate\"\n</code></pre>"},{"location":"developers/extend/#implementation","title":"Implementation","text":"<p>Plugins must extend the <code>codon::DSL</code> class to implement their functionality, and provide a function <code>extern \"C\" std::unique_ptr&lt;codon::DSL&gt; load()</code> that returns an instance of their subclass. The <code>load()</code> function is invoked by Codon automatically when it loads a plugin from a shared library.</p> <p>Continuing on the same validate example from above, let's implement the pass as a plugin. We can use the same pass code in the section linked above, and create a subclass of the <code>codon::DSL</code> class while adding a function <code>load()</code> to our library that returns an instance of it:</p> <pre><code>class MyValidate : public codon::DSL {\npublic:\n  void addIRPasses(transform::PassManager *pm, bool debug) override {\n    std::string insertBefore = debug ? \"\" : \"core-folding-pass-group\";\n    pm-&gt;registerPass(std::make_unique&lt;ValidateFoo&gt;(), insertBefore);\n  }\n};\n\nextern \"C\" std::unique_ptr&lt;codon::DSL&gt; load() {\n  return std::make_unique&lt;MyValidate&gt;();\n}\n</code></pre> <p>The <code>codon::DSL</code> class has methods for adding Codon IR passes, LLVM IR passes and even new syntax features like keywords (hence the name DSL, since this class effectively enables the creation of domain-specific languages within Codon). In this case, we insert our pass into the Codon IR pass manager before the standard folding pass.</p> <p>A <code>CMakeLists.txt</code> is also required, which specifies how to build the plugin to a shared library with CMake. A complete implementation of this example plugin, along with the <code>CMakeLists.txt</code>, can be found on GitHub.</p>"},{"location":"developers/extend/#adding-llvm-passes","title":"Adding LLVM passes","text":"<p>Plugins can add new LLVM passes by overriding the <code>void addLLVMPasses(llvm::PassBuilder *pb, bool debug)</code> method of the <code>codon::DSL</code> class. Refer to the <code>llvm::PassBuilder</code> docs for details on adding passes.</p>"},{"location":"developers/ir/","title":"Intermediate Representation","text":"<p>After type checking but before native code generation, the Codon compiler makes use of a new intermediate representation called CIR, where a number of higher-level optimizations, transformations and analyses take place. CIR offers a comprehensive framework for writing new optimizations or analyses without having to deal with cumbersome abstract syntax trees (ASTs) albeit while preserving higher-level program constructs and semantics.</p>"},{"location":"developers/ir/#motivation","title":"Motivation","text":"<p>In Codon's optimization framework, we often found the need to reason about higher-level Python constructs, which wasn't feasible through LLVM IR. For instance, one optimization Codon performs pertains to removing redundant dictionary accesses, e.g. as found in this common code pattern:</p> <pre><code>d[k] = d.get(k, 0) + 1  # increment count of key 'k' in dict 'd'\n</code></pre> <p>The original code performs two lookups of key <code>k</code>, but only one lookup is required. To address this, we want to find patterns of the form <code>d[k] = d.get(k, i) + j</code> and replace them with an implementation that performs just one lookup of <code>k</code>. It turns out that this is nearly impossible to do at the LLVM IR level as <code>dict.__setitem__()</code> (which corresponds to the assignment <code>d[k] = ...</code>) and <code>dict.get()</code> both compile to large, complex LLVM IR that we'd have no hope of recognizing and making sense of after the fact \u2014 in other words, the semantic meaning of the original code (i.e. \"increment the count of <code>k</code> in <code>d</code>\") is effectively lost.</p> <p>To solve this problem, Codon employs its own IR, which sits between the abstract syntax tree and LLVM IR in the compilation process. Codon IR is much simpler than the AST, but still retains enough information to reason about semantics and higher-level constructs. Identifying the dictionary pattern above, for example, amounts to simply identifying a short sequence of IR that resembles <code>dict.__setitem__(d, k, dict.get(d, k, i) + j)</code>.</p>"},{"location":"developers/ir/#at-a-glance","title":"At a glance","text":"<p>Here is a small (simplified) example showcasing CIR in action. Consider the code:</p> <pre><code>def fib(n):\n    if n &lt; 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n</code></pre> <p>When instantiated with an <code>int</code> argument, the following IR gets produced (the names have been cleaned up for simplicity):</p> <pre><code>(bodied_func\n  '\"fib[int]\"\n  (type '\"fib[int]\")\n  (args (var '\"n\" (type '\"int\") (global false)))\n  (vars)\n  (series\n    (if (call '\"int.__lt__[int,int]\" '\"n\" 2)\n      (series (return 1))\n      (series\n        (return\n          (call\n            '\"int.__add__[int,int]\"\n            (call\n              '\"fib[int]\"\n              (call '\"int.__sub__[int,int]\" '\"n\" 1))\n            (call\n              '\"fib[int]\"\n              (call '\"int.__sub__[int,int]\" '\"n\" 2))))))))\n</code></pre> <p>A few interesting points to consider:</p> <ul> <li>CIR is hierarchical like ASTS, but unlike ASTs it uses a vastly reduced   set of nodes, making it much easier to work with and reason about.</li> <li>Operators are expressed as function calls. In fact, CIR has no explicit   concept of <code>+</code>, <code>-</code>, etc. and instead expresses these via their corresponding   magic methods (<code>__add__</code>, <code>__sub__</code>, etc.).</li> <li>CIR has no concept of generic types. By the time CIR is generated, all types   need to have been resolved.</li> </ul>"},{"location":"developers/ir/#structure","title":"Structure","text":"<p>CIR is comprised of a set of nodes, each with a specific semantic meaning. There are nodes for representing constants (e.g. <code>42</code>), instructions (e.g. <code>call</code>) control flow (e.g. <code>if</code>), types (e.g. <code>int</code>) and so on.</p> <p>Here is the node hierarchy:</p> <pre><code>graph TD\n  N(Node) --&gt; M(Module);\n  N --&gt; T(Type);\n  N --&gt; VR(Var);\n  N --&gt; VL(Value);\n  VR --&gt; FN(Func);\n  VL --&gt; C(Const);\n  VL --&gt; I(Instr);\n  VL --&gt; FL(Flow);</code></pre> <p>Here is a breakdown of the different types of nodes:</p> <ul> <li>Module: a special container node that represents the entire program, i.e. all   the functions needed by the program as well as the main code that is executed when   running the program (in practice, we simply put this code into a new implicit \"main\"   function).</li> <li>Type: a kind of node that is attached to all other nodes and represents the given   node's data type, be it an integer, float, string etc. One important aspect of Codon IR   is that it's fully typed, meaning we never deal with ambiguous or unknown types; type   checking is done on the AST before Codon IR is generated.</li> <li>Var: represents a variable in a program. Variables are usually produced from assignments   like <code>x = y</code>, but they can also be produced from control-flow statements like   <code>for i in range(10)</code>, which creates variable <code>i</code>.</li> <li>Func: a type of Var that represents a function.</li> <li>Value: a generic node that represents values, which can be anything from constants to   variable references or function calls and so on.</li> <li>Instr: a type of Value that represents a specific operation, such as a function call,   return statement, conditional expression (i.e. <code>x if y else z</code>) and so on.</li> <li>Flow: represents control-flow statements like <code>if</code>-statements, <code>while</code>-loops,   <code>try</code>-<code>except</code> etc. These are first-class values in Codon IR.</li> <li>Const: represents a constant like <code>42</code>, <code>\"hello\"</code> or <code>3.14</code>.</li> </ul>"},{"location":"developers/ir/#uses","title":"Uses","text":"<p>CIR provides a framework for doing program optimizations, analyses and transformations. These operations are collectively known as IR passes.</p> <p>A number of built-in passes and other functionalities are provided by CIR. These can be used as building blocks to create new passes. Examples include:</p> <ul> <li>Control-flow graph creation</li> <li>Reaching definitions</li> <li>Dominator analysis</li> <li>Side effect analysis</li> <li>Constant propagation and folding</li> <li>Canonicalization</li> <li>Inlining and outlining</li> <li>Python-specific optimizations targeting several common Python idioms</li> </ul> <p>We're regularly adding new standard passes, so this list is always growing.</p>"},{"location":"developers/ir/#an-example","title":"An example","text":"<p>Let's look at a real example. Imagine we want to write a pass that transforms expressions of the form <code>&lt;int const&gt; + &lt;int const&gt;</code> into a single <code>&lt;int const&gt;</code> denoting the result. In other words, a simple form of constant folding that only looks at addition on integers. The resulting pass would like this:</p> <pre><code>#include \"codon/cir/transform/pass.h\"\n#include \"codon/cir/util/irtools.h\"\n\nusing namespace codon::ir;\n\nclass MyAddFolder : public transform::OperatorPass {\npublic:\n  static const std::string KEY;\n  std::string getKey() const override { return KEY; }\n\n  void handle(CallInstr *v) override {\n    auto *f = util::getFunc(v-&gt;getCallee());\n    if (!f || f-&gt;getUnmangledName() != \"__add__\" || v-&gt;numArgs() != 2)\n        return;\n\n    auto *lhs = cast&lt;IntConst&gt;(v-&gt;front());\n    auto *rhs = cast&lt;IntConst&gt;(v-&gt;back());\n\n    if (lhs &amp;&amp; rhs) {\n      long sum = lhs-&gt;getVal() + rhs-&gt;getVal();\n      v-&gt;replaceAll(v-&gt;getModule()-&gt;getInt(sum));\n    }\n  }\n};\n\nconst std::string MyAddFolder::KEY = \"my-add-folder\";\n</code></pre> <p>So how does this actually work, and what do the different components mean? Here are some notable points:</p> <ul> <li>Most passes can inherit from <code>transform::OperatorPass</code>. <code>OperatorPass</code> is a combination   of an <code>Operator</code> and a <code>Pass</code>. An <code>Operator</code> is a utility visitor that provides hooks for   handling all the different node types (i.e. through the <code>handle()</code> methods). <code>Pass</code> is the   base class representing a generic pass, which simply provides a <code>run()</code> method that takes   a module.</li> <li>Because of this, <code>MyAddFolder::handle(CallInstr *)</code> will be called on every call instruction   in the module.</li> <li>Within our <code>handle()</code>, we first check to see if the function being called is <code>__add__</code>, indicating   addition (in practice there would be a more specific check to make sure this is the <code>__add__</code>),   and if so we extract the first and second arguments.</li> <li>We cast these arguments to <code>IntConst</code>. If the results are non-null, then both arguments were in fact   integer constants, meaning we can replace the original call instruction with a new constant that   represents the result of the addition. In CIR, all nodes are \"replaceable\" via a <code>replaceAll()</code> method.</li> <li>Lastly, notice that all passes have a <code>KEY</code> field to uniquely identify them.</li> </ul>"},{"location":"developers/ir/#bidirectionality","title":"Bidirectionality","text":"<p>An important and often very useful feature of CIR is that it is bidirectional, meaning it's possible to return to the type checking stage to generate new IR nodes that were not initially present in the module. For example, imagine that your pass needs to use a <code>List</code> with some new element type; that list's methods need to be instantiated by the type checker for use in CIR. In practice this bidirectionality often lets you write large parts of your optimization or transformation in Codon, and pull out the necessary functions or types as needed in the pass.</p> <p>CIR's <code>Module</code> class has three methods to enable this feature:</p> <pre><code>  /// Gets or realizes a function.\n  /// @param funcName the function name\n  /// @param args the argument types\n  /// @param generics the generics\n  /// @param module the module of the function\n  /// @return the function or nullptr\n  Func *getOrRealizeFunc(const std::string &amp;funcName, std::vector&lt;types::Type *&gt; args,\n                         std::vector&lt;types::Generic&gt; generics = {},\n                         const std::string &amp;module = \"\");\n\n  /// Gets or realizes a method.\n  /// @param parent the parent class\n  /// @param methodName the method name\n  /// @param rType the return type\n  /// @param args the argument types\n  /// @param generics the generics\n  /// @return the method or nullptr\n  Func *getOrRealizeMethod(types::Type *parent, const std::string &amp;methodName,\n                           std::vector&lt;types::Type *&gt; args,\n                           std::vector&lt;types::Generic&gt; generics = {});\n\n  /// Gets or realizes a type.\n  /// @param typeName mangled type name\n  /// @param generics the generics\n  /// @return the function or nullptr\n  types::Type *getOrRealizeType(const std::string &amp;typeName,\n                                std::vector&lt;types::Generic&gt; generics = {});\n</code></pre> <p>Let's see bidirectionality in action. Consider the following Codon code:</p> <pre><code>def foo(x):\n    return x*3 + x\n\ndef validate(x, y):\n    assert y == x*4\n\na = foo(10)\nb = foo(1.5)\nc = foo('a')\n</code></pre> <p>Assume we want our pass to insert a call to <code>validate()</code> after each assignment that takes the assigned variable and the argument passed to <code>foo()</code>. We would do something like the following:</p> <pre><code>#include \"codon/cir/transform/pass.h\"\n#include \"codon/cir/util/irtools.h\"\n\nusing namespace codon::ir;\n\nclass ValidateFoo : public transform::OperatorPass {\npublic:\n  static const std::string KEY;\n  std::string getKey() const override { return KEY; }\n\n  void handle(AssignInstr *v) override {\n    auto *M = v-&gt;getModule();\n    auto *var = v-&gt;getLhs();\n    auto *call = cast&lt;CallInstr&gt;(v-&gt;getRhs());\n    if (!call)\n      return;\n\n    auto *foo = util::getFunc(call-&gt;getCallee());\n    if (!foo || foo-&gt;getUnmangledName() != \"foo\")\n      return;\n\n    auto *arg1 = call-&gt;front();         // argument of 'foo' call\n    auto *arg2 = M-&gt;Nr&lt;VarValue&gt;(var);  // result of 'foo' call\n    auto *validate =\n      M-&gt;getOrRealizeFunc(\"validate\", {arg1-&gt;getType(), arg2-&gt;getType()});\n    if (!validate)\n      return;\n\n    auto *validateCall = util::call(validate, {arg1, arg2});\n    insertAfter(validateCall);  // call 'validate' after 'foo'\n  }\n};\n\nconst std::string ValidateFoo::KEY = \"validate-foo\";\n</code></pre> <p>Note that <code>insertAfter</code> is a convenience method of <code>Operator</code> that inserts the given node \"after\" the node being visited (along with <code>insertBefore</code> which inserts before the node being visited).</p> <p>Running this pass on the snippet above, we would get:</p> <pre><code>a = foo(10)\nvalidate(10, a)\n\nb = foo(1.5)\nvalidate(1.5, b)\n\nc = foo('a')\nvalidate('a', c)\n</code></pre> <p>Notice that we used <code>getOrRealizeFunc</code> to create three different instances of <code>validate</code>: one for <code>int</code> arguments, one for <code>float</code> arguments and finally one for <code>str</code> arguments.</p>"},{"location":"developers/ir/#extending-the-ir","title":"Extending the IR","text":"<p>CIR is extensible, and it is possible to add new constants, instructions, flows and types. This can be done by subclassing the corresponding custom base class; to create a custom type, for example, you would subclass <code>CustomType</code>. Let's look at an example where we extend CIR to add a 32-bit float type (note that Codon already has a native 32-bit float type; this is just for demonstration purposes):</p> <pre><code>using namespace codon::ir;\n\n#include \"codon/cir/dsl/nodes.h\"\n#include \"codon/cir/llvm/llvisitor.h\"\n\nclass Builder : public dsl::codegen::TypeBuilder {\npublic:\n  llvm::Type *buildType(LLVMVisitor *v) override {\n    return v-&gt;getBuilder()-&gt;getFloatTy();\n  }\n\n  llvm::DIType *buildDebugType(LLVMVisitor *v) override {\n    auto *module = v-&gt;getModule();\n    auto &amp;layout = module-&gt;getDataLayout();\n    auto &amp;db = v-&gt;getDebugInfo();\n    auto *t = buildType(v);\n    return db.builder-&gt;createBasicType(\n           \"float_32\",\n           layout.getTypeAllocSizeInBits(t),\n           llvm::dwarf::DW_ATE_float);\n  }\n};\n\nclass Float32 : public dsl::CustomType {\npublic:\n  std::unique_ptr&lt;TypeBuilder&gt; getBuilder() const override {\n    return std::make_unique&lt;Builder&gt;();\n  }\n};\n</code></pre> <p>Notice that, in order to specify how to generate code for our <code>Float32</code> type, we create a <code>TypeBuilder</code> subclass with methods for building the corresponding LLVM IR type. There is also a <code>ValueBuilder</code> for new constants and converting them to LLVM IR, as well as a <code>CFBuilder</code> for new instructions and creating control-flow graphs out of them.</p> <p>Tip</p> <p>When subclassing nodes other than types (e.g. instructions, flows, etc.), be sure to use the <code>AcceptorExtend</code> CRTP class, as in <code>class MyNewInstr : public AcceptorExtend&lt;MyNewInstr, dsl::CustomInstr&gt;</code>.</p>"},{"location":"developers/ir/#utilities","title":"Utilities","text":"<p>The <code>codon/cir/util/</code> directory has a number of utility and generally helpful functions, for things like cloning IR, inlining/outlining, matching and more. <code>codon/cir/util/irtools.h</code> in particular has many helpful functions for performing various common tasks. If you're working with CIR, be sure to take a look at these functions to make your life easier!</p>"},{"location":"developers/ir/#standard-pass-pipeline","title":"Standard pass pipeline","text":"<p>These standard sets of passes are run in <code>release</code>-mode:</p> <ul> <li> <p>Python-specific optimizations: a series of passes to optimize common Python patterns and   idioms. Examples include dictionary updates of the form <code>d[k] = d.get(k, x) &lt;op&gt; y</code>, and   optimizing them to do just one access into the dictionary, as well as optimizing repeated   string concatenations, various I/O patterns, list operations and so on.</p> </li> <li> <p>Imperative <code>for</code>-loop lowering: loops of the form <code>for i in range(a, b, c)</code> (with <code>c</code> constant)   are lowered to a special IR node, since these loops are important for e.g. multithreading later.</p> </li> <li> <p>A series of program analyses whose results are available to later passes:</p> </li> <li>Control-flow analysis</li> <li>Reaching definition analysis</li> <li>Dominator analysis</li> <li> <p>Capture (or escape) analysis</p> </li> <li> <p>Parallel loop lowering for multithreading or GPU</p> </li> <li> <p>Constant propagation and folding. This also includes dead code elimination and (in non-JIT mode)   global variable demotion.</p> </li> <li> <p>Library-specific optimizations, such as operator fusion for NumPy.</p> </li> </ul> <p>Codon plugins can inject their own passes into the pipeline as well.</p>"},{"location":"developers/roadmap/","title":"Roadmap","text":"<p>Codon's goal is to be as close to CPython as possible while still being fully statically compilable. While Codon already supports much of Python, there is still much to be done to fully realize its potential. Here is a high-level roadmap of the features we want to implement or explore.</p>"},{"location":"developers/roadmap/#core-features","title":"Core features","text":"<ul> <li> <p>Parallelism</p> <ul> <li><code>async</code>/<code>await</code> support</li> <li><code>multiprocessing</code> support</li> <li>Automatic locking in parallel code (e.g. if mutating a data structure shared between threads)</li> <li>Race detection</li> </ul> </li> <li> <p>Compatibility with Python 3.10+:</p> <ul> <li>Argument separators (<code>/</code> and <code>*</code>)</li> <li>Constructor object matching in the <code>match</code> statement</li> <li>Support accessing various object properties (<code>__dict__</code>, <code>__slots__</code>   etc.) as much as possible in Codon's static context</li> </ul> </li> <li> <p>Optional automatic switching between Codon and CPython (i.e.   compile only compatible functions and leave the rest to Python)</p> </li> <li> <p>Better error messages</p> <ul> <li>Warning support</li> <li>Explain performance considerations</li> <li>Explain Codon-specific optimizations (e.g. Codon IR passes)</li> <li>Explain that a CPython feature is not supported</li> </ul> </li> <li> <p>Modules and incremental compilation</p> <ul> <li>Cache compilation modules</li> <li>Fast generics compilation in debug mode for quick turnarounds</li> </ul> </li> <li> <p>Memory management</p> <ul> <li>Auto-tune GC</li> <li>Optional alternative memory management modes like reference   counting</li> </ul> </li> <li> <p>GPU support</p> <ul> <li>Target Apple, AMD and Intel GPUs</li> <li>GPU-specific compiler optimizations (e.g. for using various   Python constructs on the GPU)</li> </ul> </li> <li> <p>Interoperability with other languages</p> <ul> <li>Direct C++ interoperability via Clang</li> <li>R interoperability</li> </ul> </li> </ul>"},{"location":"developers/roadmap/#libraries","title":"Libraries","text":"<p>Currently, missing Python functionality can be easily accessed via a <code>from python import</code> statement, which is sufficient in most cases as many libraries are just thin wrappers around a C library and/or not performance-sensitive.</p> <p>However, we would like to support the following modules natively:</p> <ul> <li> <p>Python's standard library</p> <ul> <li>Complete builtins support</li> <li>1-to-1 compatibility with existing Python functions and modules</li> <li>File modules: <code>os</code>, <code>sys</code>, <code>struct</code>, <code>pathlib</code> and so on</li> <li>Pretty much everything else on an as-needed basis</li> </ul> </li> <li> <p>Native NumPy, Pandas, etc.: Having Codon-native versions of the most   popular 3rd-party libraries would allow them to work with Codon's   other features like multithreading and GPU. We're currently prioritizing   NumPy and Pandas but aim to later target other popular libraries as well.</p> <ul> <li>As of Codon 0.18, NumPy is natively supported!</li> </ul> </li> <li> <p>Unicode support</p> </li> <li> <p>Python's testing infrastructure</p> </li> </ul>"},{"location":"developers/roadmap/#infrastructure-tools","title":"Infrastructure &amp; Tools","text":"<ul> <li> <p>Windows support</p> </li> <li> <p>A sane package manager similar to Rust's   Cargo</p> </li> <li> <p>Auto-detection of installed Python libraries</p> </li> <li> <p>Improved <code>codon.jit</code> library support</p> <ul> <li>Better error messages</li> <li>Better installation flow</li> </ul> </li> <li> <p>Fully static binary support like Go</p> <ul> <li>Remove <code>libcodonrt</code> (runtime library) dependency if needed</li> <li>Remove <code>libcpp</code> dependency</li> </ul> </li> <li> <p>Improved Jupyter support</p> <ul> <li>Auto-completion and code inspection</li> <li>Jupyter magic command support</li> </ul> </li> <li> <p>Plugins for Visual Studio Code, Vim, Emacs and so on</p> </li> </ul>"},{"location":"developers/roadmap/#nice-to-have","title":"Nice to have","text":"<ul> <li>Implement Codon in Codon</li> </ul>"},{"location":"integrations/jupyter/","title":"Jupyter","text":"<p>Codon ships with a kernel that can be used by Jupyter, invoked with the <code>codon jupyter ...</code> subcommand.</p> <p>To add the Codon kernel, add the following <code>kernel.json</code> file to the directory <code>/path/to/jupyter/kernels/codon/</code>:</p> <pre><code>{\n    \"display_name\": \"Codon\",\n    \"argv\": [\n        \"/path/to/codon\",\n        \"jupyter\",\n        \"{connection_file}\"\n    ],\n    \"language\": \"python\"\n}\n</code></pre> <p>Plugins can also optionally be specified, as in:</p> <pre><code>{\n    \"display_name\": \"Codon\",\n    \"argv\": [\n        \"/path/to/codon\",\n        \"jupyter\",\n        \"-plugin\", \"/path/to/plugin\",\n        \"{connection_file}\"\n    ],\n    \"language\": \"python\"\n}\n</code></pre>"},{"location":"integrations/cpp/codon-from-cpp/","title":"Call Codon from C/C++","text":"<p>Codon can be called from C/C++ code by compiling to a shared library that can be linked to a C/C++ application.</p> <p>Codon functions can be made externally visible by annotating them with <code>@export</code> decorator:</p> <pre><code>@export\ndef foo(n: int):\n    for i in range(n):\n        print(i * i)\n    return n * n\n</code></pre> <p>Note that only top-level, non-generic functions can be exported. Now we can create a shared library containing <code>foo</code> (assuming source file <code>foo.codon</code>):</p> <pre><code>codon build --relocation-model=pic --lib -o libfoo.so foo.codon\n</code></pre> <p>Now we can call <code>foo</code> from a C program (if you're using C++, mark the Codon function as <code>extern \"C\"</code>):</p> <pre><code>#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n\nint64_t foo(int64_t);\n// In C++, it would be:\n// extern \"C\" int64_t foo(int64_t);\n\nint main() {\n  printf(\"%llu\\n\", foo(10));\n}\n</code></pre> <p>Compile:</p> <pre><code>gcc -o foo -L. -lfoo foo.c  # or g++ if using C++\n</code></pre> <p>Now running <code>./foo</code> will invoke <code>foo()</code> as defined in Codon, with an argument of <code>10</code>.</p> <p>Note that if the generated shared library is in a non-standard path, you can either:</p> <ul> <li>Add the <code>rpath</code> to the <code>gcc</code> command: <code>-Wl,-rpath=/path/to/lib/dir</code></li> <li>Add the library path to <code>LD_LIBRARY_PATH</code> (or <code>DYLD_LIBRARY_PATH</code> if   using macOS): <code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/lib/dir</code>.</li> </ul> <p>Type conversions between Codon and C/C++ are detailed here.</p>"},{"location":"integrations/cpp/cpp-from-codon/","title":"Call C/C++ from Codon","text":"<p>C/C++ functions can be called from Codon via the <code>from C import</code> import statement. Unlike standard imports, <code>from C import</code> must specify the imported function's argument and return types. For example:</p> <pre><code># import the C standard library 'sqrt' function\nfrom C import sqrt(float) -&gt; float\nprint(sqrt(2.0))  # 1.41421\n</code></pre> <p>You can also rename C-imported functions:</p> <pre><code># cobj is a C pointer (void*, char*, etc.)\n# None can be used to represent C's void\nfrom C import puts(cobj) -&gt; None as print_line\nprint_line(\"hello\".c_str())  # prints \"hello\"; c_str() converts Codon str to C string\n</code></pre> <p>You can also add annotations such as <code>@pure</code> to C-imported functions by instead declaring them with the <code>@C</code> attribute:</p> <pre><code>@C\n@pure\ndef sqrt(x: float) -&gt; float:\n    pass\n\nprint(sqrt(2.0))  # 1.41421\n</code></pre> <p>Warning</p> <p>If you're using C++, remember to declare any functions you want to call from Codon with <code>extern \"C\"</code> to enable C linkage, which Codon expects.</p>"},{"location":"integrations/cpp/cpp-from-codon/#type-conversions","title":"Type conversions","text":"<p>The following table shows the conversions between Codon and C/C++ types:</p> Codon C/C++ <code>int</code> <code>int64_t</code> <code>float</code> <code>double</code> <code>bool</code> <code>bool</code> <code>complex</code> <code>{double, double}</code> (real and imag.) <code>str</code> <code>{int64_t, char*}</code> (length and data) <code>tuple</code> Struct of fields <code>class</code> Pointer to corresponding tuple <code>Ptr[T]</code> <code>T*</code> <p>Warning</p> <p>Use caution when returning structures from C-imported functions, as C compilers might use an ABI that differs from Codon's ABI. It is recommended to instead pass a pointer as an argument that the callee can populate with the return value.</p>"},{"location":"integrations/cpp/cpp-from-codon/#optionals","title":"Optionals","text":"<p>Codon also has an <code>Optional[T]</code> type for representing <code>None</code> values, which is represented in one of two ways:</p> <ul> <li> <p>If <code>T</code> is a reference type (i.e. a type defined with <code>class</code>), then <code>Optional[T]</code>   is represented the same way as <code>T</code> (i.e. a pointer to dynamically-allocated member   data) with null representing <code>None</code>.</p> </li> <li> <p>Otherwise, <code>Optional[T]</code> is represented as a C structure <code>{bool, T}</code> where the   boolean field indicates whether the value is present.</p> </li> </ul>"},{"location":"integrations/cpp/cpp-from-codon/#numpy-arrays","title":"NumPy arrays","text":"<p>NumPy array types are parameterized by the data type (<code>dtype</code>) and array dimension (<code>ndim</code>). They correspond to the following C structure definition:</p> <pre><code>struct ndarray {\n  int64_t shape[ndim];\n  int64_t strides[ndim];\n  dtype *data\n};\n</code></pre> <p>Refer to the NumPy documentation for an explanation of these fields.</p>"},{"location":"integrations/cpp/cpp-from-codon/#dynamic-loading","title":"Dynamic loading","text":"<p>Shared libraries can be loaded dynamically as follows:</p> <pre><code>LIBRARY = \"libhello.so\"\n\n# load dynamically from 'libhello.so'\nfrom C import LIBRARY.foo(int, float) -&gt; None\nfrom C import LIBRARY.bar() -&gt; int as baz\n\nx = foo(1, 2.2)\ny = baz()\n</code></pre> <p>Dynamic C imports are implemented by calling <code>dlopen()</code> on the given shared library, followed by <code>dlsym()</code> to obtain the required functions.</p>"},{"location":"integrations/cpp/jit/","title":"Embed Codon JIT","text":"<p>Codon has a JIT that can be embedded in and called from C++ applications. The Codon distribution contains all the necessary headers and shared libraries for compiling and linking against the Codon compiler library, which includes the JIT.</p>"},{"location":"integrations/cpp/jit/#a-minimal-example","title":"A minimal example","text":"<pre><code>#include &lt;iostream&gt;\n\n#include \"codon/compiler/jit.h\"\n\nint main(int argc, char **argv) {\n  std::string mode = \"\";\n  std::string stdlib = \"/path/to/.codon/lib/codon/stdlib\";\n  std::string code = \"sum(i**2 for i in range(10))\";\n\n  codon::jit::JIT jit(argv[0], mode, stdlib);\n  llvm::cantFail(jit.init());\n  std::cout &lt;&lt; llvm::cantFail(jit.execute(code)) &lt;&lt; std::endl;\n}\n</code></pre> <p>The <code>codon::jit::JIT</code> constructor takes three arguments:</p> <ul> <li><code>argv[0]</code>: as received by <code>main()</code></li> <li><code>mode</code>: currently supports either an empty string or <code>\"jupyter\"</code>, where the   latter adds support for the   <code>_repr_mimebundle_</code>   method.</li> <li><code>stdlib</code>: path to Codon standard library; <code>~/.codon/lib/codon/stdlib</code> if using   a standard Codon installation</li> </ul> <p>Next, the <code>init()</code> method is used to initialize the JIT. Note that JIT methods make use of LLVM's error handling, hence the use of <code>llvm::cantFail()</code>.</p> <p>Lastly, code can be executed using the <code>execute()</code> method, which captures and returns the output of the provided code string.</p> <p>The program can be compiled as follows:</p> <pre><code>export CODON_DIR=~/.codon  # or wherever Codon is installed\ng++ -std=c++20 -I${CODON_DIR}/include \\\n               -L${CODON_DIR}/lib/codon \\\n               -Wl,-rpath,${CODON_DIR}/lib/codon \\\n               -lcodonc \\\n               test.cpp\n</code></pre>"},{"location":"integrations/cpp/jit/#jit-api","title":"JIT API","text":"<p><code>codon::jit::JIT</code> provides the following methods:</p>"},{"location":"integrations/cpp/jit/#init","title":"<code>init</code>","text":"<pre><code>llvm::Error init(bool forgetful = false);\n</code></pre> <p>Initializes the JIT. If <code>forgetful</code> is <code>true</code>, then the JIT will not remember global variables or functions defined in previous inputs, effectively resulting in a fresh JIT on each input (albeit without having to perform initialization repeatedly).</p>"},{"location":"integrations/cpp/jit/#compile-code-string","title":"<code>compile</code> (code string)","text":"<pre><code>llvm::Expected&lt;ir::Func *&gt; compile(const std::string &amp;code,\n                                   const std::string &amp;file = \"\", int line = 0);\n</code></pre> <p>Compiles the given code string to a Codon IR function representing the JIT input. Optional file and line information can be passed through the <code>file</code> and <code>line</code> arguments, respectively. Does not invoke the LLVM backend.</p>"},{"location":"integrations/cpp/jit/#compile-ir-function","title":"<code>compile</code> (IR function)","text":"<pre><code>llvm::Error compile(const ir::Func *input,\n                    llvm::orc::ResourceTrackerSP rt = nullptr);\n</code></pre> <p>Compiles the given Codon IR function in the JIT. An optional <code>llvm::orc::ResourceTracker</code> can be provided to manage the JIT-compiled code. A resource tracker can be created via <code>jit.getEngine()-&gt;getMainJITDylib().createResourceTracker()</code>.</p>"},{"location":"integrations/cpp/jit/#address","title":"<code>address</code>","text":"<pre><code>llvm::Expected&lt;void *&gt; address(const ir::Func *input,\n                               llvm::orc::ResourceTrackerSP rt = nullptr);\n</code></pre> <p>Returns a pointer to the compiled function corresponding to the provided Codon IR function. As above, An optional <code>llvm::orc::ResourceTracker</code> can be provided to manage the JIT-compiled code. The returned pointer can be cast to the appropriate function pointer and called. For example, building on the code above, we can do the following:</p> <pre><code>auto *f = llvm::cantFail(jit.compile(code));\nauto *p = llvm::cantFail(jit.address(f));\nreinterpret_cast&lt;void (*)()&gt;(p)();  // prints 285\n</code></pre>"},{"location":"integrations/cpp/jit/#execute","title":"<code>execute</code>","text":"<pre><code>llvm::Expected&lt;std::string&gt; execute(const std::string &amp;code,\n                                    const std::string &amp;file = \"\", int line = 0,\n                                    bool debug = false,\n                                    llvm::orc::ResourceTrackerSP rt = nullptr);\n</code></pre> <p>Runs the full compilation pipeline and executes the given code string. Optional arguments correspond to those described above. Returns captured output of the code string.</p>"},{"location":"integrations/cpp/jit/#controlling-memory-usage","title":"Controlling memory usage","text":"<p>Memory allocated by Codon during parsing and type checking is automatically released between JIT invocations. Memory allocated by LLVM during compilation can be controlled via <code>llvm::orc::ResourceTracker</code> as described above.</p> <p>Codon IR provides a mechanism to release allocated IR nodes via an arena interface:</p> <pre><code>jit.getCompiler()-&gt;getModule()-&gt;pushArena();\n// ... work with jit ...\njit.getCompiler()-&gt;getModule()-&gt;popArena();\n</code></pre> <p>Once an arena is popped, all IR nodes allocated since the corresponding push will be deallocated. Arenas should almost always be used in \"forgetful\" mode (i.e. when passing <code>forgetful=true</code> to the <code>init()</code> method), since otherwise IR nodes might need to be reused in future JIT inputs.</p>"},{"location":"integrations/python/codon-from-python/","title":"Call Codon from Python","text":"<p>Codon can be used within larger Python projects or codebases through its just-in-time (JIT) compilation mode. To use Codon's Python JIT compiler, install the <code>codon-jit</code> Python package:</p> <pre><code>pip install codon-jit\n</code></pre> <p>This library will attempt to use an installed version of Codon. If Codon is installed at a non-standard path, set the <code>CODON_DIR</code> environment variable to the installation path.</p>"},{"location":"integrations/python/codon-from-python/#using-codonjit","title":"Using <code>@codon.jit</code>","text":"<p>The <code>@codon.jit</code> decorator causes the annotated function to be compiled by Codon, and automatically converts standard Python objects to native Codon objects. For example:</p> <pre><code>import codon\nfrom time import time\n\ndef is_prime_python(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n@codon.jit\ndef is_prime_codon(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nt0 = time()\nans = sum(1 for i in range(100000, 200000) if is_prime_python(i))\nt1 = time()\nprint(f'[python] {ans} | took {t1 - t0} seconds')\n\nt0 = time()\nans = sum(1 for i in range(100000, 200000) if is_prime_codon(i))\nt1 = time()\nprint(f'[codon]  {ans} | took {t1 - t0} seconds')\n</code></pre> <p>outputs:</p> <pre><code>[python] 8392 | took 39.6610209941864 seconds\n[codon]  8392 | took 0.998633861541748 seconds\n</code></pre> <p>Info</p> <p><code>@par</code> (to parallelize <code>for</code>-loops) can be used in annotated functions via a leading underscore: <code>_@par</code>.</p> <p>Warning</p> <p>In general, changes made to objects in a JIT'd function will not be reflected in the host Python application, since objects passed to Codon are converted to Codon-native types. If objects need to be modified, consider returning any necessary values and performing modifications in Python. The one notable exception to this rule is NumPy arrays, which are not copied but instead have their data pointer passed directly to Codon, meaning array modifications are visible in the host Python application.</p>"},{"location":"integrations/python/codon-from-python/#type-conversions","title":"Type conversions","text":"<p><code>@codon.jit</code> will attempt to convert any Python types that it can to native Codon types. The current conversion rules are as follows:</p> <ul> <li> <p>Basic types like <code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code> and <code>complex</code> are   converted to the same type in Codon.</p> </li> <li> <p>Tuples are converted to Codon tuples (which are then compiled   down to the equivalent of C structs).</p> </li> <li> <p>Collection types like <code>list</code>, <code>dict</code> and <code>set</code> are converted to   the corresponding Codon collection type, with the restriction   that all elements in the collection must have the same type.</p> </li> <li> <p>Other types are passed to Codon directly as Python objects.   Codon will then use its Python object API (\"<code>pyobj</code>\") to handle   and operate on these objects. Internally, this consists of calling   the appropriate CPython C API functions, e.g. <code>PyNumber_Add(a, b)</code>   for <code>a + b</code>.</p> </li> </ul>"},{"location":"integrations/python/codon-from-python/#custom-types","title":"Custom types","text":"<p>User-defined classes can be converted to Codon classes via <code>@codon.convert</code>:</p> <pre><code>import codon\n\n@codon.convert\nclass Foo:\n    __slots__ = 'a', 'b', 'c'\n\n    def __init__(self, n):\n        self.a = n\n        self.b = n**2\n        self.c = n**3\n\n    @codon.jit\n    def total(self):\n        return self.a + self.b + self.c\n\nprint(Foo(10).total())  # 1110\n</code></pre> <p><code>@codon.convert</code> requires the annotated class to specify <code>__slots__</code>, which it uses to construct a generic Codon class (specifically, a named tuple) to store the class's converted fields.</p>"},{"location":"integrations/python/codon-from-python/#passing-globals-to-codon","title":"Passing globals to Codon","text":"<p>Global variables, functions or modules can be passed to JIT'd functions through the <code>pyvars</code> argument to <code>@codon.jit</code>:</p> <pre><code>import codon\n\ndef foo(n):\n    print(f'n is {n}')\n\n@codon.jit(pyvars=['foo'])\ndef bar(n):\n    foo(n)  # calls the Python function 'foo'\n    return n ** 2\n\nprint(bar(9))  # 'n is 9' then '81'\n</code></pre> <p>This also allows imported Python modules to be accessed by Codon. All <code>pyvars</code> are passed as Python objects. Note that JIT'd functions can call each other by default.</p> <p>Info</p> <p><code>pyvars</code> takes in variable names as strings, not the variables themselves.</p>"},{"location":"integrations/python/codon-from-python/#debugging","title":"Debugging","text":"<p><code>@codon.jit</code> takes an optional <code>debug</code> parameter that can be used to print debug information such as generated Codon functions and data types:</p> <pre><code>import codon\n\n@codon.jit(debug=True)\ndef sum_of_squares(v):\n    return sum(i**2 for i in v)\n\nprint(sum_of_squares([1.4, 2.9, 3.14]))\n</code></pre> <p>outputs:</p> <pre><code>[codon::jit::execute] code:\ndef sum_of_squares(v):\n    return sum(i**2 for i in v)\n-----\n[python] sum_of_squares(['List[float]'])\n[codon::jit::executePython] wrapper:\n@export\ndef __codon_wrapped__sum_of_squares_0(args: cobj) -&gt; cobj:\n    a0 = List[float].__from_py__(PyTuple_GetItem(args, 0))\n    return sum_of_squares(a0).__to_py__()\n-----\n20.229599999999998\n</code></pre>"},{"location":"integrations/python/codon-from-python/#internals-and-performance-tips","title":"Internals and performance tips","text":"<p>Under the hood, the <code>codon</code> module maintains an instance of the Codon JIT, which it uses to dynamically compile annotated Python functions. These functions are then wrapped in another generated function that performs the type conversions. The JIT maintains a cache of native function pointers corresponding to annotated Python functions with concrete input types. Hence, calling a JIT'd function multiple times does not repeatedly invoke the entire Codon compiler pipeline, but instead reuses the cached function pointer.</p> <p>Although object conversions from Python to Codon are generally cheap, they do impose a small overhead, meaning <code>@codon.jit</code> will work best on expensive and/or long-running operations rather than short-lived operations. By the same token, the more work can be done in Codon, the better, as opposed to repeatedly transferring back and forth.</p>"},{"location":"integrations/python/extensions/","title":"Create Python Extensions","text":"<p>Codon includes a build mode called <code>pyext</code> for generating Python extensions (which are traditionally written in C, C++ or Cython):</p> <pre><code>codon build -pyext extension.codon  # add -release to enable optimizations\n</code></pre> <p><code>codon build -pyext</code> accepts the following options:</p> <ul> <li><code>-o &lt;output object&gt;</code>: Writes the compilation result to the specified file.</li> <li><code>-module &lt;module name&gt;</code>: Specifies the generated Python module's name.</li> </ul> <p>Warning</p> <p>It is recommended to use the <code>pyext</code> build mode with Python versions 3.9 and up.</p>"},{"location":"integrations/python/extensions/#functions","title":"Functions","text":"<p>Extension functions written in Codon should generally be fully typed:</p> <pre><code>def foo(a: int, b: float, c: str):  # return type will be deduced\n    return a * b + float(c)\n</code></pre> <p>The <code>pyext</code> build mode will automatically generate all the necessary wrappers and hooks for converting a function written in Codon into a function that's callable from Python.</p> <p>Function arguments that are not explicitly typed will be treated as generic Python objects, and operated on through the CPython API.</p> <p>Function overloads are also possible in Codon:</p> <pre><code>def bar(x: int):\n    return x + 2\n\n@overload\ndef bar(x: str):\n    return x * 2\n</code></pre> <p>This will result in a single Python function <code>bar()</code> that dispatches to the correct Codon <code>bar()</code> at runtime based on the argument's type (or raises a <code>TypeError</code> on an invalid input type).</p>"},{"location":"integrations/python/extensions/#types","title":"Types","text":"<p>Codon class definitions can also be converted to Python extension types via the <code>@dataclass(python=True)</code> decorator:</p> <pre><code>@dataclass(python=True)\nclass Vec:\n    x: float\n    y: float\n\n    def __init__(self, x: float = 0.0, y: float = 0.0):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other: Vec):\n        return Vec(self.x + other.x, self.y + other.y)\n\n    def __add__(self, other: float):\n        return Vec(self.x + other, self.y + other)\n\n    def __repr__(self):\n        return f'Vec({self.x}, {self.y})'\n</code></pre> <p>Now in Python (assuming we compile to a module <code>vec</code>):</p> <pre><code>from vec import Vec\n\na = Vec(x=3.0, y=4.0)  # Vec(3.0, 4.0)\nb = a + Vec(1, 2)      # Vec(4.0, 6.0)\nc = b + 10.0           # Vec(14.0, 16.0)\n</code></pre>"},{"location":"integrations/python/extensions/#building-with-setuptools","title":"Building with <code>setuptools</code>","text":"<p>Codon's <code>pyext</code> build mode can be used with <code>setuptools</code>. Here is an example <code>setup.py</code> script:</p> Example <code>setup.py</code> <pre><code># setup.py\nimport os\nimport sys\nimport shutil\nfrom pathlib import Path\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\n\n# Find Codon\ncodon_path = os.environ.get('CODON_DIR')\nif not codon_path:\n    c = shutil.which('codon')\n    if c:\n        codon_path = Path(c).parent / '..'\nelse:\n    codon_path = Path(codon_path)\nfor path in [\n    os.path.expanduser('~') + '/.codon',\n    os.getcwd() + '/..',\n]:\n    path = Path(path)\n    if not codon_path and path.exists():\n        codon_path = path\n        break\n\nif (\n    not codon_path\n    or not (codon_path / 'include' / 'codon').exists()\n    or not (codon_path / 'lib' / 'codon').exists()\n):\n    print(\n        'Cannot find Codon.',\n        'Please either install Codon (https://github.com/exaloop/codon),',\n        'or set CODON_DIR if Codon is not in PATH.',\n        file=sys.stderr,\n    )\n    sys.exit(1)\ncodon_path = codon_path.resolve()\nprint('Found Codon:', str(codon_path))\n\n# Build with Codon\nclass CodonExtension(Extension):\n    def __init__(self, name, source):\n        self.source = source\n        super().__init__(name, sources=[], language='c')\n\nclass BuildCodonExt(build_ext):\n    def build_extensions(self):\n        pass\n\n    def run(self):\n        inplace, self.inplace = self.inplace, False\n        super().run()\n        for ext in self.extensions:\n            self.build_codon(ext)\n        if inplace:\n            self.copy_extensions_to_source()\n\n    def build_codon(self, ext):\n        extension_path = Path(self.get_ext_fullpath(ext.name))\n        build_dir = Path(self.build_temp)\n        os.makedirs(build_dir, exist_ok=True)\n        os.makedirs(extension_path.parent.absolute(), exist_ok=True)\n\n        codon_cmd = str(codon_path / 'bin' / 'codon')\n        optimization = '-debug' if self.debug else '-release'\n        self.spawn([codon_cmd, 'build', optimization, '--relocation-model=pic', '-pyext',\n                    '-o', str(extension_path) + \".o\", '-module', ext.name, ext.source])\n\n        ext.runtime_library_dirs = [str(codon_path / 'lib' / 'codon')]\n        self.compiler.link_shared_object(\n            [str(extension_path) + '.o'],\n            str(extension_path),\n            libraries=['codonrt'],\n            library_dirs=ext.runtime_library_dirs,\n            runtime_library_dirs=ext.runtime_library_dirs,\n            extra_preargs=['-Wl,-rpath,@loader_path'],\n            debug=self.debug,\n            build_temp=self.build_temp,\n        )\n        self.distribution.codon_lib = extension_path\n\nsetup(\n    name='mymodule',\n    version='0.1',\n    packages=['mymodule'],\n    ext_modules=[\n        CodonExtension('mymodule', 'mymodule.codon'),\n    ],\n    cmdclass={'build_ext': BuildCodonExt}\n)\n</code></pre> <p>Then, we can build with:</p> <pre><code>python3 setup.py build_ext --inplace\n</code></pre> <p>Finally, we can <code>import mymodule</code> in Python and use the module.</p>"},{"location":"integrations/python/python-from-codon/","title":"Call Python from Codon","text":"<p>There are two ways to call Python from Codon:</p> <ul> <li><code>from python import</code> allows importing and calling Python functions   from existing Python modules.</li> <li><code>@python</code> allows writing Python code directly in Codon.</li> </ul> <p>In order to use these features, the <code>CODON_PYTHON</code> environment variable must be set to the appropriate Python shared library:</p> <pre><code>export CODON_PYTHON=/path/to/libpython.X.Y.so\n</code></pre> <p>For example, with a Homebrew-installed Python 3.9 on macOS, this might be</p> <pre><code>/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/libpython3.9.dylib\n</code></pre> <p>Note that only Python versions 3.6 and later are supported.</p> <p>Tip: Finding <code>libpython</code></p> <p>You can use this script to locate the Python shared library for the <code>CODON_PYTHON</code> environment variable. Simply run it as <code>python3 find-python-library.py</code> and it will print the library path.</p> <p>Info: Using virtual environments (<code>venv</code>)</p> <p>If you are using a virtual environment created with <code>venv</code>, set <code>PYTHON_PATH</code> to the <code>site-packages</code> directory inside your virtual environment (e.g. <code>.venv/lib/python3.11/site-packages</code>).</p> <p>Info: Using virtual environments (<code>uv</code>)</p> <p>If you using a virtual environment created with <code>uv</code>, you can use the following steps to set up the necessary environment variables. From the parent directory of your python project (where <code>pyproject.toml</code> is):</p> <ol> <li>Run <code>uv python find --system</code> and set <code>PYTHON_HOME</code> to the result.</li> <li>Set <code>CODON_PYTHON</code> to the <code>libpython.dylib</code> (or <code>.so</code>) file found in the folder from the previous   step (e.g. <code>lib/python3.11.dylib</code>) as an absolute path.</li> <li>Set <code>PYTHON_PATH</code> to the <code>site-packages</code> folder inside your virtual environment (e.g <code>.venv/lib/python3.11/site-packages</code>).</li> </ol>"},{"location":"integrations/python/python-from-codon/#import-python-modules-in-codon","title":"Import Python modules in Codon","text":"<p>Python modules can be imported and used in Codon-compiled programs through a <code>from python import &lt;module&gt;</code> import statement. For example:</p> <pre><code>from python import sys  # imports Python's 'sys' module\nprint(sys.version)  # 3.11.12 (main, Apr  8 2025, 14:15:29) [Clang 17.0.0 (clang-1700.0.13.3)]\n</code></pre> <p>You can also import third-party libraries. Here is an example that imports Matplotlib to create a simple plot:</p> <pre><code>from python import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 5, 3, 6, 4]\n\nfig, ax = plt.subplots()\nax.plot(x, y)\nplt.show()\n</code></pre> <p>Objects created from imported Python modules can be manipulated and operated on from Codon. Internally, such operations are implemented by using CPython's C API. For example, we can create a Pandas dataframe in Codon, and perform operations on it:</p> <pre><code>from python import pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})  # internally a Python object\nprint(df['B'].max())  # 6\n</code></pre>"},{"location":"integrations/python/python-from-codon/#run-python-code-directly-in-codon","title":"Run Python code directly in Codon","text":"<p>It is also possible to annotate functions with the <code>@python</code> decorator in order to have them execute in Python, instead of being compiled by Codon:</p> <pre><code>@python\ndef version():\n    # the following runs in plain Python\n    import sys\n    print(sys.version)\n\nversion()  # 3.11.12 (main, Apr  8 2025, 14:15:29) [Clang 17.0.0 (clang-1700.0.13.3)]\n</code></pre> <p><code>@python</code> functions can specify return types, in which case returned values will be checked and converted to native Codon types:</p> <pre><code>@python\ndef foo():\n    return 2 + 2\n\n@python\ndef bar() -&gt; int:\n    return 2 + 2\n\n@python\ndef baz() -&gt; int:\n    return 'abc'\n\n\nprint(foo())  # 4 (Python object)\nprint(bar())  # 4 (native Codon int)\nprint(baz())  # error: Python object did not have type 'int'\n</code></pre> <p>Similarly, arguments can be type-annotated as well:</p> <pre><code>@python\ndef square(n: int) -&gt; int:\n    return n * n\n\nprint(square(4))  # 16\n</code></pre>"},{"location":"integrations/python/python-from-codon/#data-conversions","title":"Data conversions","text":"<p>Codon uses two new magic methods to transfer data to and from Python:</p> <ul> <li><code>__to_py__</code>: Produces a Python object (<code>PyObject*</code> in C) given a Codon object.</li> <li><code>__from_py__</code>: Produces a Codon object given a Python object.</li> </ul> <p>For example:</p> <pre><code>import python  # needed to initialize the Python runtime\n\no = (42).__to_py__()  # type of 'o' is 'Ptr', equivalent to a pointer in C\nprint(o)  # 0x100e00610\n\nn = int.__from_py__(o)  # converts Python object 'o' to native Codon integer\nprint(n)  # 42\n</code></pre> <p>Codon stores the results of <code>__to_py__</code> calls by wrapping them in an instance of a new class called <code>pyobj</code>, which correctly handles the underlying Python object's reference count. All operations on <code>pyobj</code>s then go through CPython's API.</p>"},{"location":"labs/","title":"Labs","text":"<p>Labs are short, self-contained guides on various features and applications of Codon. Each lab includes a written guide as well as a video guide, and labs cover a variety of topics ranging from introductory to advanced use cases and domain-specific applications. Check out the catalog of labs below!</p> <p>Stay tuned</p> <p>More labs are coming soon!</p>"},{"location":"labs/#explore-labs","title":"Explore labs","text":"\ud83e\uddea Getting Started with Codon \u2728 New \ud83d\ude80 Intro \u231b 2 mins <p>Learn how to install Codon and run your first program.</p>"},{"location":"labs/#contribute-a-lab","title":"Contribute a lab","text":"<p>Do you have an interesting use case or application of Codon that others would find helpful to learn about? If so, consider creating a lab that we can include here! Please reach out to us on Discord or on email if you are considering creating a lab so we can work together on the content and format!</p>"},{"location":"labs/catalog/start/","title":"\ud83e\uddea Getting started with Codon","text":""},{"location":"labs/catalog/start/#install-codon","title":"Install Codon","text":"<p>Run the following shell command in your terminal to install Codon:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://exaloop.io/install.sh)\"\n</code></pre>"},{"location":"labs/catalog/start/#run-your-first-program","title":"Run your first program","text":"<p>Save the following code to file <code>fib.py</code>:</p> <pre><code>from time import time\n\ndef fib(n):\n    return n if n &lt; 2 else fib(n - 1) + fib(n - 2)\n\nt0 = time()\nans = fib(40)\nt1 = time()\nprint(f'Computed fib(40) = {ans} in {t1 - t0} seconds.')\n</code></pre> <p>Run the program in Codon:</p> <pre><code>codon run -release fib.py\n</code></pre> <p>Compile to an executable:</p> <pre><code>codon build -release -o fib fib.py\n</code></pre> <p>Run the executable via <code>./fib</code>.</p>"},{"location":"labs/catalog/start/#use-codons-just-in-time-jit-compiler","title":"Use Codon's \"just-in-time\" (JIT) compiler","text":"<p>Install Codon's JIT with <code>pip</code>:</p> <pre><code>pip install codon-jit\n</code></pre> <p>Save the following code to file <code>primes.py</code>:</p> <pre><code>import codon\nfrom time import time\n\ndef is_prime_python(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n@codon.jit\ndef is_prime_codon(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nt0 = time()\nans = sum(1 for i in range(100000, 200000) if is_prime_python(i))\nt1 = time()\nprint(f'[python] {ans} | took {t1 - t0} seconds')\n\nt0 = time()\nans = sum(1 for i in range(100000, 200000) if is_prime_codon(i))\nt1 = time()\nprint(f'[codon]  {ans} | took {t1 - t0} seconds')\n</code></pre> <p>Run with Python:</p> <pre><code>python3 primes.py\n</code></pre>"},{"location":"language/classes/","title":"Classes","text":"<p>Codon supports Python classes as you would expect. For example:</p> <pre><code>class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\np = Point(3, 4)\nprint(p)  # (3, 4)\n</code></pre> <p>Codon will automatically infer class fields if none are specified explicitly. Alternatively, the class fields can be specified in the class body:</p> <pre><code>class Point:\n    x: int\n    y: int\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n</code></pre> <p>Class fields can reference the enclosing class through the <code>Optional</code> type:</p> <pre><code>class Point:\n    x: int\n    y: int\n    other: Optional[Point]\n\n    def __init__(self, x, y, other: Optional[Point] = None):\n        self.x = x\n        self.y = y\n        self.other = other\n\n    def __str__(self):\n        if self.other is None:\n            return f'({self.x}, {self.y})'\n        else:\n            return f'({self.x}, {self.y}) -&gt; {str(self.other)}'\n\np = Point(3, 4)\nprint(p)  # (3, 4)\n\nq = Point(5, 6, p)\nprint(q)  # (5, 6) -&gt; (3, 4)\n</code></pre>"},{"location":"language/classes/#overloading-methods","title":"Overloading methods","text":"<p>In Python, class methods can be defined to take arguments of arbitrary types, and to reason about them through functions like <code>isinstance()</code>. While the same works in Codon, Codon also offers another way to separate out method logic for different input types: method overloading.</p> <p>Multiple methods with the same name but different arguments or argument types can be defined in the same class. Codon will use the method corresponding to the argument types provided in a given call of that method. For example:</p> <pre><code>class Point:\n    ...\n\n    def foo(self, n: int):\n        print('int-foo called!', n)\n\n    def foo(self, s: str):\n        print('str-foo called!', s)\n\np = Point(3, 4)\np.foo(42)     # int-foo called! 42\np.foo('abc')  # str-foo called! abc\n</code></pre> <p>Method resolution occurs bottom-up, meaning if multiple methods are applicable for a given set of arguments, the latest one will be used.</p> <p>Note</p> <p>Non-method functions can also be overloaded in Codon by adding the <code>@overload</code> decorator, which prevents latter definitions from shadowing previous ones.</p>"},{"location":"language/classes/#tuple-classes","title":"Tuple classes","text":"<p>Regular classes are mutable and passed around by reference. Internally, class data is dynamically allocated and a pointer to the allocated data is used to represent the class instance.</p> <p>Codon supports an alternative type of class that is immutable and avoids heap allocation: tuple classes. A tuple class is defined via the <code>@tuple</code> class annotation. For example, we can rewrite the <code>Point</code> class above as a tuple class:</p> <pre><code>@tuple\nclass Point:\n    x: int\n    y: int\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n</code></pre> <p>Because tuple class instances are immutable, tuple classes do not use the usual <code>__init__</code> method, and can instead define new constructors via the <code>__new__</code> method. A default <code>__new__</code> which takes all of the tuple class's fields as arguments is automatically generated. We can define additional <code>__new__</code> methods as follows, for instance:</p> <pre><code>@tuple\nclass Point:\n    x: int\n    y: int\n\n    # constructor (A)\n    def __new__():\n        return Point(0, 0)\n\n    # constructor (B)\n    def __new__(x: int):\n        return Point(x, 0)\n\n    def __str__(self):\n        return f'({self.x}, {self.y})'\n\nzero = Point()  # calls constructor (A)\none = Point(1)  # calls constructor (B)\n\nprint(zero)  # (0, 0)\nprint(one)   # (1, 0)\n\nzero.x = 1  # error: cannot modify tuple attributes\n</code></pre> <p>Tuple classes can be more efficient than standard classes, particularly when storing many instances in an array or list.</p> <p>Internally, tuple classes correspond to C <code>struct</code>s. For example, the <code>Point</code> tuple class above would correspond exactly to the following <code>struct</code> definition in C:</p> <pre><code>struct Point {\n  int64_t x;\n  int64_t y;\n};\n</code></pre> <p>As a result, tuple classes can also be used when interoperating with a C API, as they can mirror API-specific data structures or layouts.</p>"},{"location":"language/classes/#inheritance","title":"Inheritance","text":"<p>Codon supports Python's inheritance and dynamic polymorphism. For example:</p> <pre><code>class Shape:\n\n    def area(self):\n        return 0.0\n\n    def describe(self):\n        return \"This is a shape.\"\n\nclass Circle(Shape):\n    radius: float\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.1416 * self.radius**2\n\n    def describe(self):\n        return f\"A circle with radius {self.radius}\"\n\nclass Rectangle(Shape):\n    width: float\n    height: float\n\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def describe(self):\n        return f\"A rectangle with width {self.width} and height {self.height}\"\n\nclass Square(Rectangle):\n\n    def __init__(self, width):\n        super().__init__(width, width)\n\n    def describe(self):\n        return super().describe().replace('rectangle', 'square')\n\n\nshapes: list[Shape] = []\nshapes.append(Circle(5))\nshapes.append(Rectangle(4, 6))\nshapes.append(Square(3))\n\nfor shape in shapes:\n    print(shape.describe(), f'(area={shape.area()})')\n</code></pre> <p>Warning</p> <p>Tuple classes cannot be subclassed using standard inheritance. However, they can be subclassed via static inheritance, as described below.</p> <p>In the code above, the methods <code>area()</code> and <code>describe()</code> are overriden by the subclasses of <code>Square</code>. Codon follows Python's semantics and method resolution order.</p>"},{"location":"language/classes/#static-inheritance","title":"Static inheritance","text":"<p>In addition to Python's dynamic inheritance, Codon supports static inheritance (or early binding), which can be expressed via the special <code>Static</code> type:</p> <pre><code>class Foo:\n    x: int\n\n    def __init__(self, x: int):\n        self.x = x\n\n    def hello(self):\n        print('Foo')\n\nclass Bar(Static[Foo]):\n\n    def hello(self):\n        print('Bar')\n\nfoo = Foo(1)\nbar = Bar(2)\n\nprint(foo.x, bar.x)  # 1 2\nfoo.hello()          # Foo\nbar.hello()          # Bar\n</code></pre> <p>The <code>hello()</code> method calls are resolved at compile time instead of at runtime, as would be the case with standard, dynamic inheritance. Static inheritance is useful when you want to reuse a particular class's functionality without paying the cost of dynamic dispatch that is incurred with dynamic inheritance.</p> <p>Static inheritance also works on tuple classes:</p> <pre><code>@tuple\nclass Foo:\n    x: int\n\n    def hello(self):\n        print('Foo')\n\n@tuple\nclass Bar(Static[Foo]):\n\n    def hello(self):\n        print('Bar')\n\nfoo = Foo(1)\nbar = Bar(2)\n\nprint(foo.x, bar.x)  # 1 2\nfoo.hello()          # Foo\nbar.hello()          # Bar\n</code></pre>"},{"location":"language/classes/#exceptions","title":"Exceptions","text":"<p>Subclasses of exception classes like <code>Exception</code>, <code>ValueError</code>, etc. must use static inheritance in order to be thrown and caught. Furthermore, when calling their parent class's constructor, exception subclasses must supply their type name as the first argument. Here is an example:</p> <pre><code>class MyException(Static[Exception]):\n    x: int\n\n    def __init__(self, x: int):\n        super().__init__('MyException', 'my exception message')\n        self.x = x\n\ntry:\n    raise MyException(42)\nexcept MyException as e:\n    print('caught:', str(e), e.x)  # caught: my exception message 42\n</code></pre>"},{"location":"language/generics/","title":"Generics","text":"<p>Codon's type system is designed to be non-intrusive, meaning it will infer types as much as possible without manual type annotations. This way, Python programs typically \"just work\" without requiring code changes.</p> <p>Occasionally, it can be helpful to use Codon's type system to express more intricate type relationships. This can be achieved through generics.</p>"},{"location":"language/generics/#generic-functions","title":"Generic functions","text":"<p>Imagine we want to enforce that a particular function should only accept a list argument; we can achieve that using generic types:</p> <pre><code>def foo[T](x: list[T]):  # 'T' is a generic type parameter\n    print(max(x))\n\nfoo([20, 42, 12])        # 42\nfoo(['hello', 'world'])  # world\nfoo(100)                 # error: 'int' does not match expected type 'List[T]'\n</code></pre> <p>Info</p> <p>This syntax is supported by Python 3.12 and up. See PEP 695.</p> <p>In this code, <code>T</code> is a generic type parameter that gets realized based on the argument type:</p> <ul> <li><code>foo([20, 42, 12])</code> \u2192 the argument is a list of integers,   so <code>T</code> is realized as <code>int</code>.</li> <li><code>foo(['hello', 'world'])</code> \u2192 the argument is a list of strings,   so <code>T</code> is realized as <code>str</code>.</li> <li><code>foo(100)</code> \u2192 the argument is not a list at all, so a type checking   error occurs.</li> </ul> <p>Alternatively, Codon allows the generic type parameter to be specified as an argument:</p> <pre><code>def foo(x: list[T], T: type):\n    print(max(x))\n\nfoo([20, 42, 12], int)    # can specify 'T' explicitly...\nfoo([20, 42, 12], T=int)  # ... or by name\nfoo([20, 42, 12])         # still works; 'T' inferred\n</code></pre> <p>This syntax is useful for allowing generic type parameters to be specified explicitly as arguments when the function is called, or for providing default values for them:</p> <pre><code>def bar(x: list[T], T: type = int):\n    print(type(x))\n\nbar([])  # &lt;class 'List[int]'&gt;\n</code></pre>"},{"location":"language/generics/#generic-classes","title":"Generic classes","text":"<p>Classes can also be generic:</p> <pre><code>class A[T]:  # 'T' is a generic type parameter\n    x: T\n\n    def __init__(self, x: T):\n        self.x = x\n\n    def __repr__(self):\n        return f'A({self.x})'\n\nx = A(42)            # 'T' inferred\ny = A[str]('hello')  # 'T' explicitly given as 'str'\n\nprint(x)  # A(42)\nprint(y)  # A(hello)\n</code></pre> <p>Generic type parameters can also be listed after the class fields:</p> <pre><code>class A:  # identical to above definition\n    x: T\n    T: type\n\n    def __init__(self, x: T):\n        self.x = x\n</code></pre>"},{"location":"language/llvm/","title":"Inline LLVM IR","text":"<p>Codon supports inline LLVM IR via the <code>@llvm</code> annotation:</p> <pre><code>@llvm\ndef llvm_add(a: int, b: int) -&gt; int:\n    %res = add i64 %a, %b\n    ret i64 %res\n\nprint(llvm_add(3, 4))  # 7\n</code></pre> <p>Note that LLVM functions must explicitly specify argument and return types.</p> <p>LLVM functions can also be generic, and a format specifier in the body will be replaced by the appropriate LLVM type:</p> <pre><code>@llvm\ndef llvm_add[T](a: T, b: T) -&gt; T:\n    %res = add {=T} %a, %b\n    ret {=T} %res\n\nprint(llvm_add(3, 4))          # 7\nprint(llvm_add(i8(5), i8(6)))  # 11\n</code></pre> <p>LLVM intrinsics can be accessed with <code>declare</code>:</p> <pre><code>@llvm\ndef popcnt(n: int) -&gt; int:\n    declare i64 @llvm.ctpop.i64(i64)\n    %0 = call i64 @llvm.ctpop.i64(i64 %n)\n    ret i64 %0\n\nprint(popcnt(42))  # 3\n</code></pre>"},{"location":"language/llvm/#annotations","title":"Annotations","text":"<p>Sometimes it can be helpful to annotate <code>@llvm</code> functions to give the compiler more information as to how they behave. Codon has a number of default annotations for LLVM functions (all of which also apply to external/C functions):</p> <ul> <li> <p><code>@pure</code>: Function does not capture arguments (aside from   return value capturing as in <code>def foo(x): return x</code>), does not   modify arguments, and has no side effects. This is a   mathematically \"pure\" function.</p> </li> <li> <p><code>@no_side_effect</code>: Very similar to <code>@pure</code> but function may   return different results on different calls, such as the C   function <code>time()</code>.</p> </li> <li> <p><code>@nocapture</code>: Function does not capture any of its arguments   (again excluding return value capturing).</p> </li> <li> <p><code>@self_captures</code>: Function's first (<code>self</code>) argument captures   the other arguments, an example being <code>List.__setitem__()</code>.</p> </li> </ul> <p>These are mutually-exclusive annotations. Another complementary annotation can be used to indicate that the return value of the function captures its arguments:</p> <ul> <li><code>@derives</code>: Return value of the function captures its arguments.</li> </ul> <p>These annotations are optional and do not affect program semantics.</p>"},{"location":"language/lowlevel/","title":"Low-Level Programming","text":"<p>Codon provides various low-level programming features that can be used in performance-sensitive settings or when interfacing with external APIs.</p>"},{"location":"language/lowlevel/#integer-types","title":"Integer types","text":"<p>While Codon's standard <code>int</code> type is a 64-bit signed integer, different integer types are made available through the <code>Int</code> and <code>UInt</code> types:</p> <ul> <li><code>Int[N]</code>: Signed integer with <code>N</code> bits</li> <li><code>UInt[N]</code>: Unsigned integer with <code>N</code> bits</li> </ul> <p>For example:</p> <pre><code>a = Int[16](42)    # signed 16-bit integer 42\nb = UInt[128](99)  # unsigned 128-bit integer 99\n</code></pre> <p>The Codon standard library provides shorthands for the common variants:</p> <ul> <li><code>i8</code>/<code>u8</code>: signed/unsigned 8-bit integer</li> <li><code>i16</code>/<code>u16</code>: signed/unsigned 16-bit integer</li> <li><code>i32</code>/<code>u32</code>: signed/unsigned 32-bit integer</li> <li><code>i64</code>/<code>u64</code>: signed/unsigned 64-bit integer</li> </ul> <p>You can cast between different integer types freely:</p> <pre><code>a = 42\nb = i16(a)\nc = u32(b)\n</code></pre> <p>Similarly, you can perform arithmetic operations on integers of the same types:</p> <pre><code>x = i32(10)\ny = i32(20)\nprint(x + y)  # 30\n</code></pre>"},{"location":"language/lowlevel/#floating-point-types","title":"Floating-point types","text":"<p>Codon's standard <code>float</code> type represents a 64-bit floating-point value (IEEE 754 <code>binary64</code>). Codon supports several alternative floating-point types:</p> <ul> <li><code>float32</code>: 32-bit floating-point value (IEEE 754 <code>binary32</code>)</li> <li><code>float16</code>: 16-bit floating-point value (IEEE 754 <code>binary16</code>)</li> <li><code>float128</code>: 128-bit floating-point value (IEEE 754 <code>binary128</code>)</li> <li><code>bfloat16</code>: 16-bit \"brain\" floating-point value (7-bit significand).   Provides the same number of exponent bits as float, so that it matches   its dynamic range, but with greatly reduced precision.</li> </ul> <p>Each of these float types can be constructed from a standard <code>float</code>:</p> <pre><code>x = float32(3.14)\ny = float128(-1.0)\nz = bfloat16(0.5)\n</code></pre> <p>They all also support the usual arithmetic operators:</p> <pre><code>x = bfloat16(2) ** bfloat16(0.5)\nprint(x)  # 1.41406\n</code></pre>"},{"location":"language/lowlevel/#pointers","title":"Pointers","text":"<p>Codon supports raw pointers natively via the <code>Ptr</code> type, which is parameterized by the type of the object being pointed to (i.e. <code>Ptr[int]</code> is an <code>int</code> pointer, <code>Ptr[float]</code> is a <code>float</code> pointer, and so on).</p> <p>Danger</p> <p>Pointer operations are not bounds-checked, meaning dereferencing an invalid pointer can cause a segmentation fault.</p> <p>Buffers of a specific type can be dynamically allocated by constructing a <code>Ptr</code> type with an integer argument, representing the number of elements of the given type to allocate:</p> <pre><code>buffer = Ptr[int](10)  # equivalent to 'malloc(10 * sizeof(int64_t))' in C\n</code></pre> <p>Pointers can be dereferenced and indexed:</p> <pre><code>buffer = Ptr[int](10)\nbuffer[0] = 10  # equivalent to '(*buffer) = 10' in C\nbuffer[5] = 42  # equivalent to 'buffer[5] = 42' in C\nprint(buffer[0])  # 10\nprint(buffer[5])  # 42\n</code></pre> <p>Constructing a pointer without any arguments results in a null pointer:</p> <pre><code>null = Ptr[int]()  # equivalent to 'NULL' in C or 'nullptr' in C++\n</code></pre> <p>You can cast between different pointer types:</p> <pre><code>x = Ptr[float](1)\nx[0] = 3.14\n\ny = Ptr[int](x)  # treat 'x' as an integer pointer\nprint(y[0])      # 4614253070214989087 - same bits as '3.14' float\n</code></pre> <p>Pointers support various arithmetic and comparison operators:</p> <pre><code>p = Ptr[int](1)\nq = p + 1  # equivalent to '&amp;p[1]' in C\n\nprint(p == q)  # False\nprint(q - p)   # 1\nprint(p &lt; q)   # True\n</code></pre>"},{"location":"language/lowlevel/#pointers-to-variables","title":"Pointers to variables","text":"<p>It is possible to obtain a pointer to a variable via the <code>__ptr__</code> intrinsic function:</p> <pre><code>x = 42\np = __ptr__(x)  # 'p' is a 'Ptr[int]'; equivalent to '&amp;x' in C\np[0] = 99\nprint(x)  # 99\n</code></pre> <p>Pointers to variables can be useful when interfacing with C APIs. For example, consider the C standard library function <code>frexp()</code> which stores one of its outputs in an argument pointer. We can call this function from Codon as follows:</p> <pre><code>from C import frexp(float, Ptr[i32]) -&gt; float\n\nx = 16.4\nexponent = i32()\nmantissa = frexp(x, __ptr__(exponent))  # equivalent to 'frexp(x, &amp;exponent)' in C\n\nprint(mantissa, exponent)  # 0.5125 5\n</code></pre> <p>Refer to C/C++ integration for more information about calling C/C++ functions from Codon.</p>"},{"location":"language/lowlevel/#pointers-to-fields","title":"Pointers to fields","text":"<p><code>__ptr__</code> can also be used to obtain pointers to fields of tuple classes:</p> <pre><code>@tuple\nclass Point:\n    x: int\n    y: int\n\nr = Point(3, 4)\np = __ptr__(r.y)  # 'p' is a 'Ptr[int]'; equivalent to '&amp;r.x' in C\np[0] = 99\nprint(r.x, r.y)  # 3 99\n</code></pre> <p>Recall that tuple class instances are immutable and passed by value, so assignments create new instances:</p> <pre><code>@tuple\nclass Point:\n    x: int\n    y: int\n\nr = Point(3, 4)\ns = r  # creates a copy of 'r'\np = __ptr__(r.y)\np[0] = 99\n\nprint(s.x, s.y)  # 3 4 (not changed by pointer modification)\n</code></pre>"},{"location":"language/lowlevel/#software-prefetching","title":"Software prefetching","text":"<p>Pointers have several methods to facilitate software prefetching. These methods all have the form <code>__prefetch_[rw][0123]__</code>, where <code>[rw]</code> indicates whether the prefetch is made for a \"read\" (<code>r</code>) or a \"write\" (<code>w</code>), and the <code>[0123]</code> is a temporal locality specifier, with higher values indicating more locality (i.e. that the value should be kept in cache).</p> <p>For example:</p> <pre><code>p = Ptr[int](1)\np.__prefetch_w3__()  # prefetch for write, high temporal locality\n</code></pre> <p>Refer to LLVM's prefetch intrinsic for additional information.</p> <p>Warning</p> <p>Not all targets support software prefetching. Consult the relevant documentation for your instruction set architecture for more information.</p>"},{"location":"language/lowlevel/#static-arrays","title":"Static arrays","text":"<p>Arrays can be allocated on the stack via the <code>__array__</code> intrinsic function:</p> <pre><code>def f():\n    arr = __array__[int](10)  # array of 10 integers; equivalent to 'int64_t arr[10]' in C\n    arr[0] = 42\n    print(arr[0])  # 42\n</code></pre> <p>Arrays created with <code>__array__</code> have two fields: <code>ptr</code> (pointer to array data) and <code>len</code> (length of array). The argument of <code>__array__</code> must be a literal integer.</p>"},{"location":"language/meta/","title":"Metaprogramming","text":""},{"location":"language/meta/#literals","title":"Literals","text":"<p>Codon supports compile-time metaprogramming through the special <code>Literal</code> type. <code>Literal</code>s represent constants which can be operated on and manipulated at compile time. There are three types of <code>Literal</code>s:</p> <ul> <li><code>Literal[int]</code>: integer constant</li> <li><code>Literal[str]</code>: string constant</li> <li><code>Literal[bool]</code>: boolean constant</li> </ul>"},{"location":"language/meta/#integer-literals","title":"Integer literals","text":"<p>Integer literals can be defined explicitly as follows:</p> <pre><code>n: Literal[int] = 42\n</code></pre> <p>Literals must be known at compile time. For example, the following code will cause a compilation error:</p> <pre><code>from sys import argv\nn: Literal[int] = len(argv)  # error: value is not literal!\n</code></pre> <p>Arithmetic operations on integer literals result in other integer literals:</p> <pre><code>n: Literal[int] = 42\nm: Literal[int] = n + 1  # valid int literal\n</code></pre> <p>Conditional expressions on literals also result in other literals:</p> <pre><code>n: Literal[int] = 42\nm: Literal[int] = n//2 if n%2 == 0 else 3*n + 1\n</code></pre> <p>Integer literals can be passed as function arguments, and also returned from functions:</p> <pre><code>def fib(n: Literal[int]) -&gt; Literal[int]:\n    return 1 if n &lt; 2 else fib(n - 1) + fib(n - 2)\n\nn: Literal[int] = fib(10)  # computed entirely at compile time!\n</code></pre>"},{"location":"language/meta/#string-literals","title":"String literals","text":"<p>Much like integer literals, string literals represent constant strings:</p> <pre><code>s: Literal[str] = 'hello'\n</code></pre> <p>Whereas integer literals can be manipulated via arithmetic operations to produce other integer literals, string literals can be manipulated via string operations to produce new string literals:</p> <pre><code>t: Literal[str] = s[1]   # 'e'\nu: Literal[str] = s[3:]  # 'lo'\n</code></pre> <p>Much like integer literals, string literals can similarly be used in literal conditional expressions and as function argument or return types.</p>"},{"location":"language/meta/#boolean-literals","title":"Boolean literals","text":"<p>Finally, boolean literals represent constant booleans:</p> <pre><code>b: Literal[bool] = True\n</code></pre> <p>Boolean operators can be used on boolean literals to produce new boolean literals:</p> <pre><code>b: Literal[bool] = True\nd: Literal[bool] = not b  # False\n</code></pre> <p>Some operations on integer and string literals produce boolean literals:</p> <pre><code>n: Literal[int] = 42\ns: Literal[str] = 'hello'\n\nb: Literal[bool] = (n &lt; 10)          # False\nd: Literal[bool] = (s[2:4] == 'll')  # True\n</code></pre>"},{"location":"language/meta/#static-loops","title":"Static loops","text":"<p>It is also possible to express loops where the loop index is a literal integer, via the <code>codon.static</code> module:</p> <pre><code>import codon.static\n\nfor i in static.range(10):\n    m: Literal[int] = 3*i + 1\n    print(m)\n</code></pre> <p>Static loops are unrolled at compile time, which allows the loop index to take on literal values.</p> <p>Static loops can also be used to create tuples, the lengths of which must be compile-time constants in Codon:</p> <pre><code>import codon.static\nt = tuple(i*i for i in static.range(5))\nprint(t)  # (0, 1, 4, 9, 16)\n</code></pre> <p>You can loop over another tuple by obtaining its length as an integer literal via <code>static.len()</code>:</p> <pre><code>import codon.static\n\nt = tuple(i*i for i in static.range(5))\nu = tuple(t[i] + 1 for i in static.range(static.len(t)))\n\nprint(u)  # (1, 2, 5, 10, 17)\n</code></pre>"},{"location":"language/meta/#static-evaluation","title":"Static evaluation","text":"<p>Literal expressions can be used as conditions in <code>if</code> statements, which enables the compiler to eliminate branches that it knows wil not be entered at runtime. This can be used to avoid type checking errors, for example:</p> <pre><code>def foo(x):\n    if isinstance(x, int):\n        return x + 1\n    elif isinstance(x, str):\n        return x + '!'\n    else:\n        return x\n\nprint(foo(42))       # 43\nprint(foo('hello'))  # hello!\nprint(foo(3.14))     # 3.14\n</code></pre> <p>Normally, Codon's type checker would flag an expression like <code>x + 1</code> as an error if the type of <code>x</code> is <code>str</code>. However, in the code above, the branches that are not applicable to the type of <code>x</code> are eliminated so as to allow the code to type check and compile.</p> <p>Here is another, more involved example:</p> <pre><code>def flatten(x):\n    if isinstance(x, list):\n        for a in x:\n            flatten(a)\n    else:\n        print(x)\n\nflatten([[1,2,3], [], [4, 5], [6]])  # 1, 2, ..., 6\n</code></pre> <p>Standard static typing on this program would be problematic since, if <code>x</code> is an <code>int</code>, it would not be iterable and hence would produce an error on <code>for a in x</code>. Static evaluation solves this problem by evaluating <code>isinstance(x, list)</code> at compile time and avoiding type checking the block containing the loop when <code>x</code> is not a list.</p> <p>Static evaluation works with literal expressions, <code>isinstance()</code>, <code>hasattr()</code> and type comparisons like <code>type1 is type2</code>.</p>"},{"location":"language/overview/","title":"Overview","text":"<p>Codon strives to be as close to Python (specifically, CPython) as possible, outside of a few differences that stem from performance considerations or incompatibilities with Codon's static compilation paradigm.</p> <p>As a result, if you know Python, you already know 99% of Codon!</p> <p>Codon also introduces several new elements to Python to facilitate low-level programming, parallel programming and compile-time metaprogramming, among other features. These elements are described in this section.</p>"},{"location":"language/overview/#differences-with-python","title":"Differences with Python","text":"<p>Tip</p> <p>Found something that works differently in Codon than Python which isn't mentioned below? Let us know on GitHub.</p> <p>While Codon's syntax and semantics are nearly identical to Python's, there are some notable differences that are worth considering. Most of these design decisions were made with the trade-off between performance and Python compatibility in mind.</p> <p>Please see our roadmap for more information about how we plan to close some of these gaps in the future.</p>"},{"location":"language/overview/#data-types","title":"Data types","text":"<ul> <li> <p>Integers: Codon's <code>int</code> is a 64-bit signed integer,   whereas Python's (after version 3) can be arbitrarily large.   However Codon does support larger integers via <code>Int[N]</code> where   <code>N</code> is the bit width.</p> </li> <li> <p>Strings: Codon currently uses ASCII strings unlike   Python's unicode strings. Unicode strings are planned for   Codon 1.0.</p> </li> <li> <p>Dictionaries: Codon's dictionary type does not preserve   insertion order, unlike Python's as of 3.6.</p> </li> <li> <p>Tuples: Since tuples compile down to structs, tuple lengths   must be known at compile time, meaning you can't convert an   arbitrarily-sized list to a tuple, for instance.</p> </li> <li> <p>Arrays: Codon includes a native NumPy implementation with   a corresponding <code>ndarray</code> type. Codon's <code>ndarray</code> is parameterized   by the data type (<code>dtype</code>) and dimension (<code>ndim</code>). In practice,   this almost never affects NumPy code as these parameters are   determined automatically at compile time. In some cases, such   as when reading array data from disk, they must be provided   programmatically. Learn more in the Codon-NumPy docs.</p> </li> </ul>"},{"location":"language/overview/#type-checking","title":"Type checking","text":"<p>Since Codon performs static type checking ahead of time, a few of Python's dynamic features are disallowed. For example, monkey patching classes at runtime (although Codon supports a form of this at compile time) or adding objects of different types to a collection.</p> <p>These few restrictions are ultimately what allow Codon to compile to native code without any runtime performance overhead. Future versions of Codon will lift some of these restrictions by the introduction of e.g. implicit union types.</p>"},{"location":"language/overview/#numerics","title":"Numerics","text":"<p>For performance reasons, some numeric operations use C semantics rather than Python semantics. This includes, for example, raising an exception when dividing by zero, or other checks done by <code>math</code> functions. Strict adherence to Python semantics can be enforced by using the <code>-numerics=py</code> flag of the <code>codon</code> CLI. Note that this does not change <code>int</code>s from 64-bit.</p>"},{"location":"language/overview/#modules","title":"Modules","text":"<p>While most of the commonly used builtin modules have Codon-native implementations, a few are not yet implemented. However these can still be used within Codon via <code>from python import</code>.</p>"},{"location":"libraries/numpy/","title":"NumPy","text":"<p>Codon ships with a feature-complete, fully-compiled native NumPy implementation. It uses the same API as NumPy, but re-implements everything in Codon itself, allowing for a range of optimizations and performance improvements. Codon-NumPy works with Codon's Python interoperability (you can transfer arrays to and from regular Python seamlessly), parallel backend (you can do array operations in parallel), and GPU backend (you can transfer arrays to and from the GPU seamlessly, and operate on them on the GPU).</p>"},{"location":"libraries/numpy/#getting-started","title":"Getting started","text":"<p>Importing <code>numpy</code> in Codon will use Codon-NumPy (as opposed to <code>from python import numpy</code>, which would use standard NumPy):</p> <pre><code>import numpy as np\n</code></pre> <p>We can then create and manipulate arrays just like in standard NumPy:</p> <pre><code>x = np.arange(15, dtype=np.int64).reshape(3, 5)\nprint(x)\n#   0   1   2   3   4\n#   5   6   7   8   9\n#  10  11  12  13  14\n\nx[1:, ::2] = -99\n#   0   1   2   3   4\n# -99   6 -99   8 -99\n# -99  11 -99  13 -99\n\ny = x.max(axis=1)\nprint(y)\n#   4   8  13\n</code></pre> <p>In Codon-NumPy, any Codon type can be used as the array type. The <code>numpy</code> module has the same aliases that regular NumPy has, like <code>np.int64</code>, <code>np.float32</code> etc., but these simply refer to the regular Codon types.</p> <p>Warning</p> <p>Using a string (e.g. <code>\"i4\"</code> or <code>\"f8\"</code>) for the dtype is not yet supported.</p>"},{"location":"libraries/numpy/#codon-array-type","title":"Codon array type","text":"<p>The Codon array type is parameterized by the array data type (\"<code>dtype</code>\") and the array dimension (\"<code>ndim</code>\"). That means that, in Codon-NumPy, the array dimension is a property of the type, so a 1-d array is a different type than a 2-d array and so on:</p> <pre><code>import numpy as np\n\narr = np.array([[1.1, 2.2], [3.3, 4.4]])\nprint(arr.__class__.__name__)  # ndarray[float,2]\n\narr = np.arange(10)\nprint(arr.__class__.__name__)  # ndarray[int,1]\n</code></pre> <p>The array dimension must also be known at compile-time. This allows the compiler to perform a wider range of optimizations on array operations. Usually, this has no impact on the code as the NumPy functions can determine input and output dimensions automatically. However, the dimension (and dtype) must be given when, for instance, reading arrays from disk:</p> <pre><code># 'dtype' argument specifies array type\n# 'ndim' argument specifies array dimension\narr = np.load('arr.npy', dtype=float, ndim=3)\n</code></pre> <p>A very limited number of NumPy functions return an array whose dimension cannot be deduced from its inputs. One such example is <code>squeeze()</code>, which removes axes of length 1; since the number of axes of length 1 is not determinable at compile-time, this function requires an extra argument that indicates which axes to remove.</p>"},{"location":"libraries/numpy/#python-interoperability","title":"Python interoperability","text":"<p>Codon's <code>ndarray</code> type supports Codon's standard Python interoperability API (i.e. <code>__to_py__</code> and <code>__from_py__</code> methods), so arrays can be transferred to and from Python seamlessly.</p>"},{"location":"libraries/numpy/#pytorch-integration","title":"PyTorch integration","text":"<p>Because PyTorch tensors and NumPy arrays are interchangeable without copying data, it is easy to use Codon to efficiently manipulate or operate on PyTorch tensors. This can be achieved either via Codon's just-in-time (JIT) compilation mode or via its Python extension mode.</p>"},{"location":"libraries/numpy/#using-codon-jit","title":"Using Codon JIT","text":"<p>Here is an example showing initializing a \\(128 \\times 128 \\times 128\\) tensor \\(A\\) such that \\(A_{i,j,k} = i + j + k\\):</p> <pre><code>import numpy as np\nimport time\nimport codon\nimport torch\n\n@codon.jit\ndef initialize(arr):\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                arr[i, j, k] = i + j + k\n\n# first call JIT-compiles; subsequent calls use cached JIT'd code\ntensor = torch.empty(128, 128, 128)\ninitialize(tensor.numpy())\n\ntensor = torch.empty(128, 128, 128)\nt0 = time.time()\ninitialize(tensor.numpy())\nt1 = time.time()\n\nprint(tensor)\nprint(t1 - t0, 'seconds')\n</code></pre> <p>Timings on an M1 MacBook Pro:</p> <ul> <li>Without <code>@codon.jit</code>: 0.1645 seconds</li> <li>With <code>@codon.jit</code>: 0.001485 seconds (110x speedup)</li> </ul> <p>For more information, see the Codon JIT docs.</p>"},{"location":"libraries/numpy/#using-codon-python-extensions","title":"Using Codon Python extensions","text":"<p>Codon can compile directly to a Python extension module, similar to writing a C extension for CPython or using Cython.</p> <p>Taking the same example, we can create a file <code>init.py</code>:</p> <pre><code>import numpy as np\nimport numpy.pybridge\n\ndef initialize(arr: np.ndarray[np.float32, 3]):\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                arr[i, j, k] = i + j + k\n</code></pre> <p>Note that extension module functions need to specify argument types. In this case, the argument is a 3-dimensional array of type <code>float32</code>, which is expressed as <code>np.ndarray[np.float32, 3]</code> in Codon.</p> <p>Now we can use a setup script <code>setup.py</code> to create the extension module as described in the Codon Python extension docs:</p> <pre><code>python3 setup.py build_ext --inplace  # setup.py from docs linked above\n</code></pre> <p>Finally, we can call the function from Python:</p> <pre><code>from codon_initialize import initialize\nimport torch\n\ntensor = torch.empty(128, 128, 128)\ninitialize(tensor.numpy())\nprint(tensor)\n</code></pre> <p>Note that there is no compilation happening at runtime with this approach. Instead, everything is compiled ahead of time when creating the extension. The timing is the same as the first approach.</p> <p>You can also use any Codon compilation flags with this approach by adding them to the <code>spawn</code> call in the setup script. For example, you can use the <code>-disable-exceptions</code> flag to disable runtime exceptions, which can yield performance improvements and generate more streamlined code.</p>"},{"location":"libraries/numpy/#parallel-processing","title":"Parallel processing","text":"<p>Unlike Python, Codon has no global interpreter lock (\"GIL\") and supports full multithreading, meaning NumPy code can be parallelized. For example:</p> <pre><code>import numpy as np\nimport numpy.random as rnd\nimport time\n\nN = 100000000\nn = 10\n\nrng = rnd.default_rng(seed=0)\nx = rng.normal(size=(N,n))\ny = np.empty(n)\n\nt0 = time.time()\n\n@par(num_threads=n)\nfor i in range(n):\n    y[i] = x[:,i].sum()\n\nt1 = time.time()\n\nprint(y)\nprint(t1 - t0, 'seconds')\n# no par - 1.4s\n# w/ par - 0.4s\n</code></pre>"},{"location":"libraries/numpy/#gpu-processing","title":"GPU processing","text":"<p>Codon-NumPy supports seamless GPU processing: arrays can be passed to and from the GPU, and array operations can be performed on the GPU using Codon's GPU backend. Here's an example that computes the Mandelbrot set:</p> <pre><code>import numpy as np\nimport gpu\n\nMAX    = 1000  # maximum Mandelbrot iterations\nN      = 4096  # width and height of image\npixels = np.empty((N, N), int)\n\ndef scale(x, a, b):\n    return a + (x/N)*(b - a)\n\n@gpu.kernel\ndef mandelbrot(pixels):\n    i = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x\n    j = (gpu.block.y * gpu.block.dim.y) + gpu.thread.y\n    c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))\n    z = 0j\n    iteration = 0\n\n    while abs(z) &lt;= 2 and iteration &lt; MAX:\n        z = z**2 + c\n        iteration += 1\n\n    pixels[i, j] = 255 * iteration/MAX\n\nmandelbrot(pixels, grid=(N//32, N//32), block=(32, 32))\n</code></pre> <p>Here is the same code using GPU-parallelized <code>for</code>-loops:</p> <pre><code>import numpy as np\nimport gpu\n\nMAX    = 1000  # maximum Mandelbrot iterations\nN      = 4096  # width and height of image\npixels = np.empty((N, N), int)\n\ndef scale(x, a, b):\n    return a + (x/N)*(b - a)\n\n@par(gpu=True, collapse=2)  # &lt;--\nfor i in range(N):\n    for j in range(N):\n        c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))\n        z = 0j\n        iteration = 0\n\n        while abs(z) &lt;= 2 and iteration &lt; MAX:\n            z = z**2 + c\n            iteration += 1\n\n        pixels[i, j] = 255 * iteration/MAX\n</code></pre>"},{"location":"libraries/numpy/#linear-algebra","title":"Linear algebra","text":"<p>Codon-NumPy fully supports the NumPy linear algebra module which provides a comprehensive set of functions for linear algebra operations. Importing the linear algebra module, just like in standard NumPy:</p> <pre><code>import numpy.linalg as LA\n</code></pre> <p>For example, the <code>eig()</code> function computes the eigenvalues and eigenvectors of a square matrix:</p> <pre><code>eigenvalues, eigenvectors = LA.eig(np.diag((1, 2, 3)))\nprint(eigenvalues)\n# 1.+0.j 2.+0.j 3.+0.j\n\nprint(eigenvectors)\n# [[1.+0.j 0.+0.j 0.+0.j]\n#  [0.+0.j 1.+0.j 0.+0.j]\n#  [0.+0.j 0.+0.j 1.+0.j]]\n</code></pre> <p>Just like standard NumPy, Codon will use an optimized BLAS library under the hood to implement many linear algebra operations. This defaults to OpenBLAS on Linux and Apple's Accelerate framework on macOS.</p> <p>Because Codon supports full multithreading, it's possible to use outer-loop parallelism to perform linear algebra operations in parallel. Here's an example that multiplies several matrices in parallel:</p> <pre><code>import numpy as np\nimport numpy.random as rnd\nimport time\n\nN = 5000\nn = 10\nrng = rnd.default_rng(seed=0)\na = rng.normal(size=(n, N, N))\nb = rng.normal(size=(n, N, N))\ny = np.empty((n, N, N))\nt0 = time.time()\n\n@par(num_threads=n)\nfor i in range(n):\n    y[i, :, :] = a[i, :, :] @ b[i, :, :]\n\nt1 = time.time()\nprint(y.sum())\nprint(t1 - t0, 'seconds')  # Python - 53s\n                           # Codon  -  6s\n</code></pre> <p>Tip</p> <p>When using Codon's outer-loop parallelism, make sure to set the environment variable <code>OPENBLAS_NUM_THREADS</code> to 1 (i.e. <code>export OPENBLAS_NUM_THREADS=1</code>) to avoid conflicts with OpenBLAS multithreading.</p>"},{"location":"libraries/numpy/#numpy-specific-compiler-optimizations","title":"NumPy-specific compiler optimizations","text":"<p>Codon includes compiler passes that optimize NumPy code through methods like operator fusion, which combine distinct operations so that they can be executed during a single pass through the argument arrays, saving both execution time and memory (since intermediate arrays no longer need to be allocated).</p> <p>To showcase this, here's a simple NumPy program that approximates \\(\\pi\\). The code below generates two random vectors \\(x\\) and \\(y\\) with entries in the range \\([0, 1)\\) and computes the fraction of pairs of points that lie in the circle of radius \\(0.5\\) centered at \\((0.5, 0.5)\\), which is approximately \\(\\pi \\over 4\\).</p> <pre><code>import time\nimport numpy as np\n\nrng = np.random.default_rng(seed=0)\nx = rng.random(500_000_000)\ny = rng.random(500_000_000)\n\nt0 = time.time()\n# pi ~= 4 x (fraction of points in circle)\npi = ((x-1)**2 + (y-1)**2 &lt; 1).sum() * (4 / len(x))\nt1 = time.time()\n\nprint(pi)\nprint(t1 - t0, 'seconds')\n</code></pre> <p>The expression <code>(x-1)**2 + (y-1)**2 &lt; 1</code> gets fused by Codon so that it is executed in just a single pass over the <code>x</code> and <code>y</code> arrays, rather than in multiple passes for each sub-expression <code>x-1</code>, <code>y-1</code> etc. as is the case with standard NumPy.</p> <p>Here are the resulting timings on an M1 MacBook Pro:</p> <ul> <li>Python / standard NumPy: 2.4 seconds</li> <li>Codon: 0.42 seconds (6x speedup)</li> </ul> <p>You can display information about fused expressions by using the <code>-npfuse-verbose</code> flag of <code>codon</code>, as in <code>codon run -release -npfuse-verbose pi.py</code>. Here's the output for the program above:</p> <pre><code>Optimizing expression at pi.py:10:7\nlt &lt;array[bool, 1]&gt; [cost=6]\n  add &lt;array[f64, 1]&gt; [cost=5]\n    pow &lt;array[f64, 1]&gt; [cost=2]\n      sub &lt;array[f64, 1]&gt; [cost=1]\n        a0 &lt;array[f64, 1]&gt;\n        a1 &lt;i64&gt;\n      a2 &lt;i64&gt;\n    pow &lt;array[f64, 1]&gt; [cost=2]\n      sub &lt;array[f64, 1]&gt; [cost=1]\n        a3 &lt;array[f64, 1]&gt;\n        a4 &lt;i64&gt;\n      a5 &lt;i64&gt;\n  a6 &lt;i64&gt;\n\n-&gt; static fuse:\nlt &lt;array[bool, 1]&gt; [cost=6]\n  add &lt;array[f64, 1]&gt; [cost=5]\n    pow &lt;array[f64, 1]&gt; [cost=2]\n      sub &lt;array[f64, 1]&gt; [cost=1]\n        a0 &lt;array[f64, 1]&gt;\n        a1 &lt;i64&gt;\n      a2 &lt;i64&gt;\n    pow &lt;array[f64, 1]&gt; [cost=2]\n      sub &lt;array[f64, 1]&gt; [cost=1]\n        a3 &lt;array[f64, 1]&gt;\n        a4 &lt;i64&gt;\n      a5 &lt;i64&gt;\n  a6 &lt;i64&gt;\n</code></pre> <p>As shown, the optimization pass employs a cost model to decide how to best handle a given expression, be it by fusing or evaluating sequentially. You can adjust the fusion cost thresholds via the following flags:</p> <ul> <li><code>-npfuse-always &lt;cost1&gt;</code>: Expression cost below which to always fuse a given   expression (default: <code>10</code>).</li> <li><code>-npfuse-never &lt;cost2&gt;</code>: Expression cost above which (&gt;) to never fuse a given   expression (default: <code>50</code>).</li> </ul> <p>Given an expression cost <code>C</code>, the logic implemented in the pass is to:</p> <ul> <li>Always fuse expressions where <code>C &lt;= cost1</code>.</li> <li>Fuse expressions where <code>cost1 &lt; C &lt;= cost2</code> if there is no broadcasting involved.</li> <li>Never fuse expressions where <code>C &gt; cost2</code> and instead evaluate them sequentially.</li> </ul> <p>This logic is applied recursively to a given expression to determine the optimal evaluation strategy.</p> <p>You can disable these optimizations altogether by disabling the corresponding compiler pass via the flag <code>-disable-opt core-numpy-fusion</code>.</p>"},{"location":"libraries/numpy/#io","title":"I/O","text":"<p>Codon-NumPy supports most of NumPy's I/O API. One important difference, however, is that I/O functions must specify the dtype and dimension of arrays being read, since Codon-NumPy array types are parameterized by dtype and dimension:</p> <pre><code>import numpy as np\n\na = np.arange(27, dtype=np.int16).reshape(3, 3, 3)\nnp.save('arr.npy', a)\n\n# Notice the 'dtype' and 'ndim' arguments:\nb = np.load('arr.npy', dtype=np.int16, ndim=3)\n</code></pre> <p>Writing arrays has no such requirement.</p>"},{"location":"libraries/numpy/#datetimes","title":"Datetimes","text":"<p>Codon-NumPy fully supports NumPy's datetime types: <code>datetime64</code> and <code>timedelta64</code>. One difference from standard NumPy is how these types are specified. Here's an example:</p> <pre><code># datetime64 type with units of \"1 day\"\n# same as \"dtype='datetime64[D]'\" in standard NumPy\ndt = np.array(['2020-01-02', '2021-09-15', '2022-07-01'],\n              dtype=np.datetime64['D', 1])\n\n# timedelta64 type with units of \"15 minutes\"\n# same as \"dtype='timedelta64[15m]'\" in standard NumPy\ntd = np.array([100, 200, 300], dtype=np.timedelta64['m', 15])\n</code></pre>"},{"location":"libraries/numpy/#passing-array-data-to-cc","title":"Passing array data to C/C++","text":"<p>You can pass an <code>ndarray</code>'s underlying data pointer to a C/C++ function by using the <code>data</code> attribute of the array. For example:</p> <pre><code>from C import foo(p: Ptr[float], n: int)\n\narr = np.ndarray([1.0, 2.0, 3.0])\nfoo(arr.data, arr.size)\n</code></pre> <p>Of course, it's the caller's responsibility to make sure the array is contiguous as needed and/or pass additional shape or stride information. See the C interoperability docs for more information.</p>"},{"location":"libraries/numpy/#array-abi","title":"Array ABI","text":"<p>The <code>ndarray[dtype, ndim]</code> data structure has three fields, in the following order:</p> <ul> <li><code>shape</code>: length-<code>ndim</code> tuple of non-negative 64-bit integers representing the array   shape</li> <li><code>strides</code>: length-<code>ndim</code> tuple of 64-bit integers representing the stride in bytes   along each axis of the array</li> <li><code>data</code>: pointer of type <code>dtype</code> to the array's data</li> </ul> <p>For example, <code>ndarray[np.float32, 3]</code> would correspond to the following C structure:</p> <pre><code>struct ndarray_float32_3 {\n  int64_t shape[3];\n  int64_t strides[3];\n  float *data;\n};\n</code></pre> <p>This can be used to pass an entire <code>ndarray</code> object to a C function without breaking it up into its constituent components.</p>"},{"location":"libraries/numpy/#performance-tips","title":"Performance tips","text":""},{"location":"libraries/numpy/#array-layouts","title":"Array layouts","text":"<p>As with standard NumPy, Codon-NumPy performs best when array data is contiguous in memory, ideally in row-major order (also called \"C order\"). Most NumPy functions will return C-order arrays, but operations like slicing and transposing arrays can alter contiguity. You can use <code>numpy.ascontiguousarray()</code> to create a contiguous array from an arbitrary array.</p>"},{"location":"libraries/numpy/#linux-huge-pages","title":"Linux huge pages","text":"<p>When working with large arrays on Linux, enabling transparent hugepages can result in significant performance improvements.</p> <p>You can check if transparent hugepages are enabled via</p> <pre><code>cat /sys/kernel/mm/transparent_hugepage/enabled\n</code></pre> <p>and you can enable them via</p> <pre><code>echo \"always\" | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\n</code></pre>"},{"location":"libraries/numpy/#disabling-exceptions","title":"Disabling exceptions","text":"<p>By default, Codon performs various validation checks at runtime (e.g. bounds checks when indexing an array) just like standard NumPy, and raises an exception if they fail. If you know your program will not raise or catch any exceptions, you can disable these checks through the <code>-disable-exceptions</code> compiler flag.</p> <p>Note that when using this flag, raising an exception will terminate the process with a <code>SIGTRAP</code>.</p>"},{"location":"libraries/numpy/#fast-math","title":"Fast-math","text":"<p>You can enable \"fast-math\" optimizations via the <code>-fast-math</code> compiler flag. It is advisable to use this flag with caution as it changes floating point semantics and makes assumptions regarding <code>inf</code> and <code>nan</code> values. For more information, consult LLVM's documentation on fast-math flags.</p>"},{"location":"libraries/numpy/#not-yet-supported","title":"Not-yet-supported","text":"<p>The following features of NumPy are not yet supported, but are planned for the future: - String operations - Masked arrays - Polynomials</p> <p>A few miscellaneous Python-specific functions like <code>get_include()</code> are also not supported, as they are not applicable in Codon.</p>"},{"location":"libraries/stdlib/","title":"Standard Library","text":"<p>Codon implements much of Python's standard library natively. Some built-in modules and some methods of certain modules are not yet available natively in Codon; these can still be called through Python, however:</p> <pre><code>import sys              # uses Codon's native 'sys' module\nfrom python import sys  # uses Python's 'sys' module\n</code></pre>"},{"location":"libraries/stdlib/#built-in-modules","title":"Built-in modules","text":"<p>The following built-in modules are supported either in full or in part natively in Codon:</p> Module Notes <code>copy</code> <code>gzip</code> <code>random</code> Matches CPython's <code>random</code> outputs for same seed. <code>threading</code> Locks work with Codon's parallel programming features. <code>bisect</code> <code>datetime</code> <code>timedelta</code> are represented in microseconds. Time zones not supported. <code>heapq</code> <code>operator</code> <code>re</code> Uses Google's RE2 library internally. <code>time</code> <code>bz2</code> <code>os</code> <code>cmath</code> <code>functools</code> <code>itertools</code> <code>statistics</code> <code>typing</code> Contents are available by default in Codon. <code>getopt</code> <code>math</code> <code>pickle</code> Codon uses its own pickle format, so generally not compatible with CPython pickling. <code>string</code> <code>collections</code> <code>sys</code>"},{"location":"libraries/stdlib/#additional-modules","title":"Additional modules","text":"<p>Alongside the standard modules above, Codon provides several additional modules that support various Codon-specific features.</p> <ul> <li><code>openmp</code>: Contains OpenMP API, which can be used when   writing multithreaded programs. See multithreading for   more information.</li> <li><code>gpu</code>: Contains GPU API (e.g. CUDA intrinsics), which can be used when writing   GPU code. See GPU for more information.</li> <li><code>python</code>: Contains internal machinery for interfacing with CPython. Most users will   not need to interact with this module directly.</li> <li><code>experimental</code>: Contains experimental features that are available for use, but might   not be stable nor complete.</li> </ul>"},{"location":"libraries/api/","title":"Standard Library Reference","text":"<ul> <li><code>algorithms</code></li> <li><code>bisect</code></li> <li><code>bz2</code></li> <li><code>cmath</code></li> <li><code>codon</code></li> <li><code>collections</code></li> <li><code>copy</code></li> <li><code>datetime</code></li> <li><code>experimental</code></li> <li><code>functools</code></li> <li><code>getopt</code></li> <li><code>gpu</code></li> <li><code>gzip</code></li> <li><code>heapq</code></li> <li><code>internal</code></li> <li><code>itertools</code></li> <li><code>math</code></li> <li><code>numpy</code></li> <li><code>openmp</code></li> <li><code>operator</code></li> <li><code>os</code></li> <li><code>pickle</code></li> <li><code>python</code></li> <li><code>random</code></li> <li><code>re</code></li> <li><code>sortedlist</code></li> <li><code>statistics</code></li> <li><code>string</code></li> <li><code>sys</code></li> <li><code>threading</code></li> <li><code>time</code></li> <li><code>typing</code></li> <li><code>unittest</code></li> </ul>"},{"location":"libraries/api/bisect/","title":"module <code>bisect</code>","text":"<p>Source: <code>stdlib/bisect.codon</code></p>"},{"location":"libraries/api/bisect/#bisect_lefta-listt-x-s-lo-int-0-hi-optionalint-none-t-type-s-type","title":"<code>bisect_left(a: List[T], x: S, lo: int = 0, hi: Optional[int] = None, T: type, S: type)</code>","text":""},{"location":"libraries/api/bisect/#bisect_righta-listt-x-s-lo-int-0-hi-optionalint-none-t-type-s-type","title":"<code>bisect_right(a: List[T], x: S, lo: int = 0, hi: Optional[int] = None, T: type, S: type)</code>","text":""},{"location":"libraries/api/bisect/#insort_lefta-listt-x-s-lo-int-0-hi-optionalint-none-t-type-s-type","title":"<code>insort_left(a: List[T], x: S, lo: int = 0, hi: Optional[int] = None, T: type, S: type)</code>","text":""},{"location":"libraries/api/bisect/#insort_righta-listt-x-s-lo-int-0-hi-optionalint-none-t-type-s-type","title":"<code>insort_right(a: List[T], x: S, lo: int = 0, hi: Optional[int] = None, T: type, S: type)</code>","text":""},{"location":"libraries/api/bisect/#bisect-bisect_right","title":"<code>bisect</code> = <code>bisect_right</code>","text":""},{"location":"libraries/api/bisect/#insort-insort_right","title":"<code>insort</code> = <code>insort_right</code>","text":""},{"location":"libraries/api/bz2/","title":"module <code>bz2</code>","text":"<p>Source: <code>stdlib/bz2.codon</code></p>"},{"location":"libraries/api/bz2/#openpath-str-mode-str-r","title":"<code>open(path: str, mode: str = \"r\")</code>","text":""},{"location":"libraries/api/cmath/","title":"module <code>cmath</code>","text":"<p>Source: <code>stdlib/cmath.codon</code></p>"},{"location":"libraries/api/cmath/#e-mathe","title":"<code>e</code> = <code>math.e</code>","text":""},{"location":"libraries/api/cmath/#pi-mathpi","title":"<code>pi</code> = <code>math.pi</code>","text":""},{"location":"libraries/api/cmath/#tau-mathtau","title":"<code>tau</code> = <code>math.tau</code>","text":""},{"location":"libraries/api/cmath/#inf-mathinf","title":"<code>inf</code> = <code>math.inf</code>","text":""},{"location":"libraries/api/cmath/#nan-mathnan","title":"<code>nan</code> = <code>math.nan</code>","text":""},{"location":"libraries/api/cmath/#infj-complex00-inf","title":"<code>infj</code> = <code>complex(0.0, inf)</code>","text":""},{"location":"libraries/api/cmath/#nanj-complex00-nan","title":"<code>nanj</code> = <code>complex(0.0, nan)</code>","text":""},{"location":"libraries/api/cmath/#phasex","title":"<code>phase(x)</code>","text":""},{"location":"libraries/api/cmath/#polarx","title":"<code>polar(x)</code>","text":""},{"location":"libraries/api/cmath/#rectr-phi","title":"<code>rect(r, phi)</code>","text":""},{"location":"libraries/api/cmath/#expx","title":"<code>exp(x)</code>","text":""},{"location":"libraries/api/cmath/#logx-base-e","title":"<code>log(x, base = e)</code>","text":""},{"location":"libraries/api/cmath/#log10x","title":"<code>log10(x)</code>","text":""},{"location":"libraries/api/cmath/#sqrtx","title":"<code>sqrt(x)</code>","text":""},{"location":"libraries/api/cmath/#asinx","title":"<code>asin(x)</code>","text":""},{"location":"libraries/api/cmath/#acosx","title":"<code>acos(x)</code>","text":""},{"location":"libraries/api/cmath/#atanx","title":"<code>atan(x)</code>","text":""},{"location":"libraries/api/cmath/#sinx","title":"<code>sin(x)</code>","text":""},{"location":"libraries/api/cmath/#cosx","title":"<code>cos(x)</code>","text":""},{"location":"libraries/api/cmath/#tanx","title":"<code>tan(x)</code>","text":""},{"location":"libraries/api/cmath/#asinhx","title":"<code>asinh(x)</code>","text":""},{"location":"libraries/api/cmath/#acoshx","title":"<code>acosh(x)</code>","text":""},{"location":"libraries/api/cmath/#atanhx","title":"<code>atanh(x)</code>","text":""},{"location":"libraries/api/cmath/#sinhx","title":"<code>sinh(x)</code>","text":""},{"location":"libraries/api/cmath/#coshx","title":"<code>cosh(x)</code>","text":""},{"location":"libraries/api/cmath/#tanhx","title":"<code>tanh(x)</code>","text":""},{"location":"libraries/api/cmath/#isfinitex","title":"<code>isfinite(x)</code>","text":""},{"location":"libraries/api/cmath/#isinfx","title":"<code>isinf(x)</code>","text":""},{"location":"libraries/api/cmath/#isnanx","title":"<code>isnan(x)</code>","text":""},{"location":"libraries/api/cmath/#isclosea-b-rel_tol-float-1e-09-abs_tol-float-00","title":"<code>isclose(a, b, rel_tol: float = 1e-09, abs_tol: float = 0.0)</code>","text":""},{"location":"libraries/api/collections/","title":"module <code>collections</code>","text":"<p>Source: <code>stdlib/collections.codon</code></p>"},{"location":"libraries/api/collections/#dequet","title":"<code>deque[T]</code>","text":""},{"location":"libraries/api/collections/#fields","title":"Fields","text":""},{"location":"libraries/api/collections/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/collections/#properties","title":"Properties","text":""},{"location":"libraries/api/collections/#maxlen-property-method-is-a-class-property","title":"<code>maxlen</code>  @property Method is a class property","text":""},{"location":"libraries/api/collections/#left-property-method-is-a-class-property","title":"<code>left</code>  @property Method is a class property","text":""},{"location":"libraries/api/collections/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/collections/#__init__self-arr-arrayt-head-int-tail-int-maxlen-int","title":"<code>__init__(self, arr: Array[T], head: int, tail: int, maxlen: int)</code>","text":""},{"location":"libraries/api/collections/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/collections/#__init__self-maxlen-int","title":"<code>__init__(self, maxlen: int)</code>","text":""},{"location":"libraries/api/collections/#__init__self-it-generatort","title":"<code>__init__(self, it: Generator[T])</code>","text":""},{"location":"libraries/api/collections/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/collections/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/collections/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/collections/#__contains__self-x-t","title":"<code>__contains__(self, x: T)</code>","text":""},{"location":"libraries/api/collections/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/collections/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/collections/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/collections/#__getitem__self-idx-int","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/collections/#methods","title":"Methods","text":""},{"location":"libraries/api/collections/#appendleftself-x-t","title":"<code>appendleft(self, x: T)</code>","text":""},{"location":"libraries/api/collections/#appendself-x-t","title":"<code>append(self, x: T)</code>","text":""},{"location":"libraries/api/collections/#popleftself","title":"<code>popleft(self)</code>","text":""},{"location":"libraries/api/collections/#popself","title":"<code>pop(self)</code>","text":""},{"location":"libraries/api/collections/#clearself","title":"<code>clear(self)</code>","text":""},{"location":"libraries/api/collections/#copyself","title":"<code>copy(self)</code>","text":""},{"location":"libraries/api/collections/#countert","title":"<code>Counter[T]</code>","text":""},{"location":"libraries/api/collections/#fields_1","title":"Fields","text":""},{"location":"libraries/api/collections/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/collections/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/collections/#__init__self-elements-generatort","title":"<code>__init__(self, elements: Generator[T])</code>","text":""},{"location":"libraries/api/collections/#__init__self-other-countert","title":"<code>__init__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__init__self-other-dictt-int","title":"<code>__init__(self, other: Dict[T, int])</code>","text":""},{"location":"libraries/api/collections/#__getitem__self-key-t","title":"<code>__getitem__(self, key: T)</code>","text":""},{"location":"libraries/api/collections/#__delitem__self-key-t","title":"<code>__delitem__(self, key: T)</code>","text":""},{"location":"libraries/api/collections/#__eq__self-other-countert","title":"<code>__eq__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__ne__self-other-countert","title":"<code>__ne__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__copy__self_1","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/collections/#__iadd__self-other-countert","title":"<code>__iadd__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__isub__self-other-countert","title":"<code>__isub__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__iand__self-other-countert","title":"<code>__iand__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__ior__self-other-countert","title":"<code>__ior__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/collections/#__neg__self","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/collections/#__add__self-other-countert","title":"<code>__add__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__sub__self-other-countert","title":"<code>__sub__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__and__self-other-countert","title":"<code>__and__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__or__self-other-countert","title":"<code>__or__(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/collections/#__dict_do_op_throws__self-key-t-other-z-op-f-f-type-z-type","title":"<code>__dict_do_op_throws__(self, key: T, other: Z, op: F, F: type, Z: type)</code>","text":""},{"location":"libraries/api/collections/#methods_1","title":"Methods","text":""},{"location":"libraries/api/collections/#elementsself","title":"<code>elements(self)</code>","text":""},{"location":"libraries/api/collections/#most_commonself-n-optionalint-none","title":"<code>most_common(self, n: Optional[int] = None)</code>","text":""},{"location":"libraries/api/collections/#subtractself-elements-generatort","title":"<code>subtract(self, elements: Generator[T])</code>","text":""},{"location":"libraries/api/collections/#subtractself-other-countert","title":"<code>subtract(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#subtractself-other-dictt-int","title":"<code>subtract(self, other: Dict[T, int])</code>","text":""},{"location":"libraries/api/collections/#updateself-elements-generatort","title":"<code>update(self, elements: Generator[T])</code>","text":""},{"location":"libraries/api/collections/#updateself-other-countert","title":"<code>update(self, other: Counter[T])</code>","text":""},{"location":"libraries/api/collections/#updateself-other-dictt-int","title":"<code>update(self, other: Dict[T, int])</code>","text":""},{"location":"libraries/api/collections/#updateself","title":"<code>update(self)</code>","text":""},{"location":"libraries/api/collections/#totalself","title":"<code>total(self)</code>","text":""},{"location":"libraries/api/collections/#dictkv-extend-class-is-extended-to-add-given-methods","title":"<code>Dict[K,V]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/collections/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/collections/#__init__self-dictk-int-other-counterk","title":"<code>__init__(self: Dict[K, int], other: Counter[K])</code>","text":""},{"location":"libraries/api/collections/#defaultdictkvs","title":"<code>defaultdict[K,V,S]</code>","text":""},{"location":"libraries/api/collections/#fields_2","title":"Fields","text":""},{"location":"libraries/api/collections/#default_factory-s","title":"<code>default_factory</code>: <code>S</code>","text":""},{"location":"libraries/api/collections/#k-type","title":"<code>K</code>: <code>type</code>","text":""},{"location":"libraries/api/collections/#v-type","title":"<code>V</code>: <code>type</code>","text":""},{"location":"libraries/api/collections/#s-typetraitcallabletraitv","title":"<code>S</code>: <code>TypeTrait[CallableTrait[V]]</code>","text":""},{"location":"libraries/api/collections/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/collections/#__init__self-defaultdictk-vv-functionv-vv-typetraitv","title":"<code>__init__(self: defaultdict[K, VV, Function[V]], VV: TypeTrait[V])</code>","text":""},{"location":"libraries/api/collections/#__init__self-f-s","title":"<code>__init__(self, f: S)</code>","text":""},{"location":"libraries/api/collections/#__init__self-defaultdictk-vv-functionv-vv-typetraitv-other-dictk-v","title":"<code>__init__(self: defaultdict[K, VV, Function[V]], VV: TypeTrait[V], other: Dict[K, V])</code>","text":""},{"location":"libraries/api/collections/#__init__self-f-s-other-dictk-v","title":"<code>__init__(self, f: S, other: Dict[K, V])</code>","text":""},{"location":"libraries/api/collections/#__missing__self-key-k","title":"<code>__missing__(self, key: K)</code>","text":""},{"location":"libraries/api/collections/#__getitem__self-key-k","title":"<code>__getitem__(self, key: K)</code>","text":""},{"location":"libraries/api/collections/#__dict_do_op_throws__self-key-k-other-z-op-f-f-type-z-type","title":"<code>__dict_do_op_throws__(self, key: K, other: Z, op: F, F: type, Z: type)</code>","text":""},{"location":"libraries/api/collections/#__copy__self_2","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/collections/#__deepcopy__self_1","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/collections/#__eq__self-other-defaultdictk-v-s","title":"<code>__eq__(self, other: defaultdict[K, V, S])</code>","text":""},{"location":"libraries/api/collections/#__ne__self-other-defaultdictk-v-s","title":"<code>__ne__(self, other: defaultdict[K, V, S])</code>","text":""},{"location":"libraries/api/collections/#__repr__self_2","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/collections/#methods_2","title":"Methods","text":""},{"location":"libraries/api/collections/#copyself_1","title":"<code>copy(self)</code>","text":""},{"location":"libraries/api/collections/#dictkv-extend-class-is-extended-to-add-given-methods_1","title":"<code>Dict[K,V]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/collections/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/collections/#__init__self-dictk-v-other-defaultdictk-v-s-s-type","title":"<code>__init__(self: Dict[K, V], other: defaultdict[K, V, S], S: type)</code>","text":""},{"location":"libraries/api/collections/#namedtuplename-literalstr-args","title":"<code>namedtuple(name: Literal[str], args)</code>","text":""},{"location":"libraries/api/copy/","title":"module <code>copy</code>","text":"<p>Source: <code>stdlib/copy.codon</code></p>"},{"location":"libraries/api/copy/#error","title":"<code>Error</code>","text":""},{"location":"libraries/api/copy/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/copy/#__init__self-message-str","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/copy/#copyx","title":"<code>copy(x)</code>","text":""},{"location":"libraries/api/copy/#deepcopyx","title":"<code>deepcopy(x)</code>","text":""},{"location":"libraries/api/datetime/","title":"module <code>datetime</code>","text":"<p>Source: <code>stdlib/datetime.codon</code></p>"},{"location":"libraries/api/datetime/#minyear-1","title":"<code>MINYEAR</code> = <code>1</code>","text":""},{"location":"libraries/api/datetime/#maxyear-9999","title":"<code>MAXYEAR</code> = <code>9999</code>","text":""},{"location":"libraries/api/datetime/#maxordinal-3652059","title":"<code>MAXORDINAL</code> = <code>3652059</code>","text":""},{"location":"libraries/api/datetime/#max_delta_days-999999999","title":"<code>MAX_DELTA_DAYS</code> = <code>999999999</code>","text":""},{"location":"libraries/api/datetime/#timedelta-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>timedelta</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/datetime/#fields","title":"Fields","text":""},{"location":"libraries/api/datetime/#min-classvartimedelta","title":"<code>min</code>: <code>ClassVar[timedelta]</code>","text":""},{"location":"libraries/api/datetime/#max-classvartimedelta","title":"<code>max</code>: <code>ClassVar[timedelta]</code>","text":""},{"location":"libraries/api/datetime/#resolution-classvartimedelta","title":"<code>resolution</code>: <code>ClassVar[timedelta]</code>","text":""},{"location":"libraries/api/datetime/#properties","title":"Properties","text":""},{"location":"libraries/api/datetime/#days-property-method-is-a-class-property","title":"<code>days</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#seconds-property-method-is-a-class-property","title":"<code>seconds</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#microseconds-property-method-is-a-class-property","title":"<code>microseconds</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/datetime/#__new__days-float-0-seconds-float-0-microseconds-float-0-milliseconds-float-0-minutes-float-0-hours-float-0-weeks-float-0","title":"<code>__new__(days: float = 0, seconds: float = 0, microseconds: float = 0, milliseconds: float = 0, minutes: float = 0, hours: float = 0, weeks: float = 0)</code>","text":""},{"location":"libraries/api/datetime/#__new__days-int","title":"<code>__new__(days: int)</code>","text":""},{"location":"libraries/api/datetime/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/datetime/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/datetime/#__add__self-other-timedelta","title":"<code>__add__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__sub__self-other-timedelta","title":"<code>__sub__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__mul__self-other-int","title":"<code>__mul__(self, other: int)</code>","text":""},{"location":"libraries/api/datetime/#__rmul__self-other-int","title":"<code>__rmul__(self, other: int)</code>","text":""},{"location":"libraries/api/datetime/#__mul__self-other-float","title":"<code>__mul__(self, other: float)</code>","text":""},{"location":"libraries/api/datetime/#__rmul__self-other-float","title":"<code>__rmul__(self, other: float)</code>","text":""},{"location":"libraries/api/datetime/#__truediv__self-other-timedelta","title":"<code>__truediv__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__truediv__self-other-float","title":"<code>__truediv__(self, other: float)</code>","text":""},{"location":"libraries/api/datetime/#__truediv__self-other-int","title":"<code>__truediv__(self, other: int)</code>","text":""},{"location":"libraries/api/datetime/#__floordiv__self-other-timedelta","title":"<code>__floordiv__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__floordiv__self-other-int","title":"<code>__floordiv__(self, other: int)</code>","text":""},{"location":"libraries/api/datetime/#__mod__self-other-timedelta","title":"<code>__mod__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__divmod__self-other-timedelta","title":"<code>__divmod__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/datetime/#__neg__self","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/datetime/#__abs__self","title":"<code>__abs__(self)</code>","text":""},{"location":"libraries/api/datetime/#__eq__self-other-timedelta","title":"<code>__eq__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__ne__self-other-timedelta","title":"<code>__ne__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__lt__self-other-timedelta","title":"<code>__lt__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__le__self-other-timedelta","title":"<code>__le__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__gt__self-other-timedelta","title":"<code>__gt__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__ge__self-other-timedelta","title":"<code>__ge__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/datetime/#methods","title":"Methods","text":""},{"location":"libraries/api/datetime/#total_secondsself","title":"<code>total_seconds(self)</code>","text":""},{"location":"libraries/api/datetime/#isocalendardate-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>IsoCalendarDate</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/datetime/#fields_1","title":"Fields","text":""},{"location":"libraries/api/datetime/#year-int","title":"<code>year</code>: <code>int</code>","text":""},{"location":"libraries/api/datetime/#week-int","title":"<code>week</code>: <code>int</code>","text":""},{"location":"libraries/api/datetime/#weekday-int","title":"<code>weekday</code>: <code>int</code>","text":""},{"location":"libraries/api/datetime/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/datetime/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/datetime/#date-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>date</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/datetime/#fields_2","title":"Fields","text":""},{"location":"libraries/api/datetime/#min-classvardate","title":"<code>min</code>: <code>ClassVar[date]</code>","text":""},{"location":"libraries/api/datetime/#max-classvardate","title":"<code>max</code>: <code>ClassVar[date]</code>","text":""},{"location":"libraries/api/datetime/#resolution-classvartimedelta_1","title":"<code>resolution</code>: <code>ClassVar[timedelta]</code>","text":""},{"location":"libraries/api/datetime/#properties_1","title":"Properties","text":""},{"location":"libraries/api/datetime/#year-property-method-is-a-class-property","title":"<code>year</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#month-property-method-is-a-class-property","title":"<code>month</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#day-property-method-is-a-class-property","title":"<code>day</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/datetime/#__new__year-int-month-int-day-int","title":"<code>__new__(year: int, month: int, day: int)</code>","text":""},{"location":"libraries/api/datetime/#__repr__self_2","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/datetime/#__add__self-other-timedelta_1","title":"<code>__add__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__sub__self-other-timedelta_1","title":"<code>__sub__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__sub__self-other-date","title":"<code>__sub__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__eq__self-other-date","title":"<code>__eq__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__ne__self-other-date","title":"<code>__ne__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__lt__self-other-date","title":"<code>__lt__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__le__self-other-date","title":"<code>__le__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__gt__self-other-date","title":"<code>__gt__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__ge__self-other-date","title":"<code>__ge__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__bool__self_1","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/datetime/#__str__self_1","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/datetime/#methods_1","title":"Methods","text":""},{"location":"libraries/api/datetime/#today","title":"<code>today()</code>","text":""},{"location":"libraries/api/datetime/#fromtimestamptimestamp","title":"<code>fromtimestamp(timestamp)</code>","text":""},{"location":"libraries/api/datetime/#fromordinalordinal-int","title":"<code>fromordinal(ordinal: int)</code>","text":""},{"location":"libraries/api/datetime/#fromisoformatdate_string-str","title":"<code>fromisoformat(date_string: str)</code>","text":""},{"location":"libraries/api/datetime/#fromisocalendaryear-week-day","title":"<code>fromisocalendar(year, week, day)</code>","text":""},{"location":"libraries/api/datetime/#replaceself-year-int-1-month-int-1-day-int-1","title":"<code>replace(self, year: int = -1, month: int = -1, day: int = -1)</code>","text":""},{"location":"libraries/api/datetime/#timetupleself","title":"<code>timetuple(self)</code>","text":""},{"location":"libraries/api/datetime/#toordinalself","title":"<code>toordinal(self)</code>","text":""},{"location":"libraries/api/datetime/#weekdayself","title":"<code>weekday(self)</code>","text":""},{"location":"libraries/api/datetime/#isoweekdayself","title":"<code>isoweekday(self)</code>","text":""},{"location":"libraries/api/datetime/#isocalendarself","title":"<code>isocalendar(self)</code>","text":""},{"location":"libraries/api/datetime/#isoformatself","title":"<code>isoformat(self)</code>","text":""},{"location":"libraries/api/datetime/#ctimeself","title":"<code>ctime(self)</code>","text":""},{"location":"libraries/api/datetime/#time-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>time</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/datetime/#fields_3","title":"Fields","text":""},{"location":"libraries/api/datetime/#min-classvartime","title":"<code>min</code>: <code>ClassVar[time]</code>","text":""},{"location":"libraries/api/datetime/#max-classvartime","title":"<code>max</code>: <code>ClassVar[time]</code>","text":""},{"location":"libraries/api/datetime/#resolution-classvartimedelta_2","title":"<code>resolution</code>: <code>ClassVar[timedelta]</code>","text":""},{"location":"libraries/api/datetime/#properties_2","title":"Properties","text":""},{"location":"libraries/api/datetime/#hour-property-method-is-a-class-property","title":"<code>hour</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#minute-property-method-is-a-class-property","title":"<code>minute</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#second-property-method-is-a-class-property","title":"<code>second</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#microsecond-property-method-is-a-class-property","title":"<code>microsecond</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/datetime/#__new__hour-int-0-minute-int-0-second-int-0-microsecond-int-0","title":"<code>__new__(hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0)</code>","text":""},{"location":"libraries/api/datetime/#__repr__self_3","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/datetime/#__str__self_2","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/datetime/#__bool__self_2","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/datetime/#methods_2","title":"Methods","text":""},{"location":"libraries/api/datetime/#fromisoformattime_string-str","title":"<code>fromisoformat(time_string: str)</code>","text":""},{"location":"libraries/api/datetime/#replaceself-hour-int-1-minute-int-1-second-int-1-microsecond-int-1","title":"<code>replace(self, hour: int = -1, minute: int = -1, second: int = -1, microsecond: int = -1)</code>","text":""},{"location":"libraries/api/datetime/#isoformatself-timespec-literalstr-auto","title":"<code>isoformat(self, timespec: Literal[str] = \"auto\")</code>","text":""},{"location":"libraries/api/datetime/#datetime-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>datetime</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/datetime/#fields_4","title":"Fields","text":""},{"location":"libraries/api/datetime/#min-classvardatetime","title":"<code>min</code>: <code>ClassVar[datetime]</code>","text":""},{"location":"libraries/api/datetime/#max-classvardatetime","title":"<code>max</code>: <code>ClassVar[datetime]</code>","text":""},{"location":"libraries/api/datetime/#resolution-classvartimedelta_3","title":"<code>resolution</code>: <code>ClassVar[timedelta]</code>","text":""},{"location":"libraries/api/datetime/#properties_3","title":"Properties","text":""},{"location":"libraries/api/datetime/#year-property-method-is-a-class-property_1","title":"<code>year</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#month-property-method-is-a-class-property_1","title":"<code>month</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#day-property-method-is-a-class-property_1","title":"<code>day</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#hour-property-method-is-a-class-property_1","title":"<code>hour</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#minute-property-method-is-a-class-property_1","title":"<code>minute</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#second-property-method-is-a-class-property_1","title":"<code>second</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#microsecond-property-method-is-a-class-property_1","title":"<code>microsecond</code>  @property Method is a class property","text":""},{"location":"libraries/api/datetime/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/datetime/#__new__year-int-month-int-day-int-hour-int-0-minute-int-0-second-int-0-microsecond-int-0","title":"<code>__new__(year: int, month: int, day: int, hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0)</code>","text":""},{"location":"libraries/api/datetime/#__repr__self_4","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/datetime/#__str__self_3","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/datetime/#__add__self-other-timedelta_2","title":"<code>__add__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__sub__self-other-timedelta_2","title":"<code>__sub__(self, other: timedelta)</code>","text":""},{"location":"libraries/api/datetime/#__sub__self-other-datetime","title":"<code>__sub__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__eq__self-other-datetime","title":"<code>__eq__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__ne__self-other-datetime","title":"<code>__ne__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__lt__self-other-datetime","title":"<code>__lt__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__le__self-other-datetime","title":"<code>__le__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__gt__self-other-datetime","title":"<code>__gt__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__ge__self-other-datetime","title":"<code>__ge__(self, other: datetime)</code>","text":""},{"location":"libraries/api/datetime/#__bool__self_3","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/datetime/#methods_3","title":"Methods","text":""},{"location":"libraries/api/datetime/#dateself","title":"<code>date(self)</code>","text":""},{"location":"libraries/api/datetime/#timeself","title":"<code>time(self)</code>","text":""},{"location":"libraries/api/datetime/#today_1","title":"<code>today()</code>","text":""},{"location":"libraries/api/datetime/#now","title":"<code>now()</code>","text":""},{"location":"libraries/api/datetime/#utcnow","title":"<code>utcnow()</code>","text":""},{"location":"libraries/api/datetime/#fromtimestamptimestamp_1","title":"<code>fromtimestamp(timestamp)</code>","text":""},{"location":"libraries/api/datetime/#utcfromtimestamptimestamp","title":"<code>utcfromtimestamp(timestamp)</code>","text":""},{"location":"libraries/api/datetime/#fromordinalordinal-int_1","title":"<code>fromordinal(ordinal: int)</code>","text":""},{"location":"libraries/api/datetime/#combinedate-date-time-time","title":"<code>combine(date: date, time: time)</code>","text":""},{"location":"libraries/api/datetime/#fromisoformatdate_string-str_1","title":"<code>fromisoformat(date_string: str)</code>","text":""},{"location":"libraries/api/datetime/#fromisocalendaryear-int-week-int-day-int","title":"<code>fromisocalendar(year: int, week: int, day: int)</code>","text":""},{"location":"libraries/api/datetime/#replaceself-year-int-1-month-int-1-day-int-1-hour-int-1-minute-int-1-second-int-1-microsecond-int-1","title":"<code>replace(self, year: int = -1, month: int = -1, day: int = -1, hour: int = -1, minute: int = -1, second: int = -1, microsecond: int = -1)</code>","text":""},{"location":"libraries/api/datetime/#timetupleself_1","title":"<code>timetuple(self)</code>","text":""},{"location":"libraries/api/datetime/#utctimetupleself","title":"<code>utctimetuple(self)</code>","text":""},{"location":"libraries/api/datetime/#toordinalself_1","title":"<code>toordinal(self)</code>","text":""},{"location":"libraries/api/datetime/#timestampself","title":"<code>timestamp(self)</code>","text":""},{"location":"libraries/api/datetime/#weekdayself_1","title":"<code>weekday(self)</code>","text":""},{"location":"libraries/api/datetime/#isoweekdayself_1","title":"<code>isoweekday(self)</code>","text":""},{"location":"libraries/api/datetime/#isocalendarself_1","title":"<code>isocalendar(self)</code>","text":""},{"location":"libraries/api/datetime/#isoformatself-sep-str-t-timespec-literalstr-auto","title":"<code>isoformat(self, sep: str = \"T\", timespec: Literal[str] = \"auto\")</code>","text":""},{"location":"libraries/api/datetime/#ctimeself_1","title":"<code>ctime(self)</code>","text":""},{"location":"libraries/api/datetime/#timedelta-extend-class-is-extended-to-add-given-methods","title":"<code>timedelta</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/datetime/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/datetime/#__add__self-other-date","title":"<code>__add__(self, other: date)</code>","text":""},{"location":"libraries/api/datetime/#__add__self-other-datetime","title":"<code>__add__(self, other: datetime)</code>","text":""},{"location":"libraries/api/functools/","title":"module <code>functools</code>","text":"<p>Source: <code>stdlib/functools.codon</code></p>"},{"location":"libraries/api/functools/#partial-no_arg_reorder","title":"<code>partial()</code> @no_arg_reorder","text":""},{"location":"libraries/api/getopt/","title":"module <code>getopt</code>","text":"<p>Source: <code>stdlib/getopt.codon</code></p>"},{"location":"libraries/api/getopt/#getopterror","title":"<code>GetoptError</code>","text":""},{"location":"libraries/api/getopt/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/getopt/#__init__self-message-str","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/getopt/#long_has_argsopt-str-longopts-liststr","title":"<code>long_has_args(opt: str, longopts: List[str])</code>","text":""},{"location":"libraries/api/getopt/#do_longsopts-listtuplestr-str-opt-str-longopts-liststr-args-liststr","title":"<code>do_longs(opts: List[Tuple[str, str]], opt: str, longopts: List[str], args: List[str])</code>","text":""},{"location":"libraries/api/getopt/#short_has_argopt-str-shortopts-str","title":"<code>short_has_arg(opt: str, shortopts: str)</code>","text":""},{"location":"libraries/api/getopt/#do_shortsopts-listtuplestr-str-optstring-str-shortopts-str-args-liststr","title":"<code>do_shorts(opts: List[Tuple[str, str]], optstring: str, shortopts: str, args: List[str])</code>","text":""},{"location":"libraries/api/getopt/#getoptargs-liststr-shortopts-str-longopts-liststr","title":"<code>getopt(args: List[str], shortopts: str, longopts: List[str] = [])</code>","text":""},{"location":"libraries/api/gpu/","title":"module <code>gpu</code>","text":"<p>Source: <code>stdlib/gpu.codon</code></p>"},{"location":"libraries/api/gpu/#device-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Device</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#properties","title":"Properties","text":""},{"location":"libraries/api/gpu/#compute_capability-property-method-is-a-class-property","title":"<code>compute_capability</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__new__device-int","title":"<code>__new__(device: int)</code>","text":""},{"location":"libraries/api/gpu/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/gpu/#__index__self","title":"<code>__index__(self)</code>","text":""},{"location":"libraries/api/gpu/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/gpu/#methods","title":"Methods","text":""},{"location":"libraries/api/gpu/#count-staticmethod-method-is-static-does-not-take-self-argument","title":"<code>count()</code>  @staticmethod Method is static (does not take 'self' argument)","text":""},{"location":"libraries/api/gpu/#memoryt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Memory[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#fields","title":"Fields","text":""},{"location":"libraries/api/gpu/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/gpu/#syncthreads-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>syncthreads()</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.nvvm.barrier0()\ncall void @llvm.nvvm.barrier0()\nret {} {}\n</code></pre>"},{"location":"libraries/api/gpu/#dim3-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Dim3</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#properties_1","title":"Properties","text":""},{"location":"libraries/api/gpu/#x-property-method-is-a-class-property","title":"<code>x</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#y-property-method-is-a-class-property","title":"<code>y</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#z-property-method-is-a-class-property","title":"<code>z</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__new__x-int-y-int-z-int","title":"<code>__new__(x: int, y: int, z: int)</code>","text":""},{"location":"libraries/api/gpu/#thread-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Thread</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#properties_2","title":"Properties","text":""},{"location":"libraries/api/gpu/#x-property-method-is-a-class-property_1","title":"<code>x</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#y-property-method-is-a-class-property_1","title":"<code>y</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#z-property-method-is-a-class-property_1","title":"<code>z</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#block-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Block</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#properties_3","title":"Properties","text":""},{"location":"libraries/api/gpu/#x-property-method-is-a-class-property_2","title":"<code>x</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#y-property-method-is-a-class-property_2","title":"<code>y</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#z-property-method-is-a-class-property_2","title":"<code>z</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#dim-property-method-is-a-class-property","title":"<code>dim</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#grid-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Grid</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#properties_4","title":"Properties","text":""},{"location":"libraries/api/gpu/#dim-property-method-is-a-class-property_1","title":"<code>dim</code>  @property Method is a class property","text":""},{"location":"libraries/api/gpu/#warp-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Warp</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/gpu/#thread-thread","title":"<code>thread</code> = <code>Thread()</code>","text":""},{"location":"libraries/api/gpu/#block-block","title":"<code>block</code> = <code>Block()</code>","text":""},{"location":"libraries/api/gpu/#grid-grid","title":"<code>grid</code> = <code>Grid()</code>","text":""},{"location":"libraries/api/gpu/#warp-warp","title":"<code>warp</code> = <code>Warp()</code>","text":""},{"location":"libraries/api/gpu/#alloccache-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>AllocCache</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#fields_1","title":"Fields","text":""},{"location":"libraries/api/gpu/#v-listptrbyte","title":"<code>v</code>: <code>List[Ptr[byte]]</code>","text":""},{"location":"libraries/api/gpu/#methods_1","title":"Methods","text":""},{"location":"libraries/api/gpu/#addself-p-ptrbyte","title":"<code>add(self, p: Ptr[byte])</code>","text":""},{"location":"libraries/api/gpu/#freeself","title":"<code>free(self)</code>","text":""},{"location":"libraries/api/gpu/#kernelfn","title":"<code>kernel(fn)</code>","text":""},{"location":"libraries/api/gpu/#pointert-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Pointer[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/gpu/#fields_2","title":"Fields","text":""},{"location":"libraries/api/gpu/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/gpu/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-ptrt","title":"<code>__from_gpu__(self, other: Ptr[T])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-ptrt","title":"<code>__from_gpu_new__(other: Ptr[T])</code>","text":""},{"location":"libraries/api/gpu/#rawv","title":"<code>raw(v)</code>","text":""},{"location":"libraries/api/gpu/#ptrt-extend-class-is-extended-to-add-given-methods","title":"<code>Ptr[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_1","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-ptrt_1","title":"<code>__from_gpu__(self, other: Ptr[T])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-ptrt_1","title":"<code>__from_gpu_new__(other: Ptr[T])</code>","text":""},{"location":"libraries/api/gpu/#nonetype-extend-class-is-extended-to-add-given-methods","title":"<code>NoneType</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_2","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-nonetype","title":"<code>__from_gpu__(self, other: NoneType)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-nonetype","title":"<code>__from_gpu_new__(other: NoneType)</code>","text":""},{"location":"libraries/api/gpu/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_3","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-int","title":"<code>__from_gpu__(self, other: int)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-int","title":"<code>__from_gpu_new__(other: int)</code>","text":""},{"location":"libraries/api/gpu/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_4","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-float","title":"<code>__from_gpu__(self, other: float)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-float","title":"<code>__from_gpu_new__(other: float)</code>","text":""},{"location":"libraries/api/gpu/#float32-extend-class-is-extended-to-add-given-methods","title":"<code>float32</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_5","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-float32","title":"<code>__from_gpu__(self, other: float32)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-float32","title":"<code>__from_gpu_new__(other: float32)</code>","text":""},{"location":"libraries/api/gpu/#bool-extend-class-is-extended-to-add-given-methods","title":"<code>bool</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_9","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_6","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-bool","title":"<code>__from_gpu__(self, other: bool)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-bool","title":"<code>__from_gpu_new__(other: bool)</code>","text":""},{"location":"libraries/api/gpu/#byte-extend-class-is-extended-to-add-given-methods","title":"<code>byte</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_10","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_7","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-byte","title":"<code>__from_gpu__(self, other: byte)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-byte","title":"<code>__from_gpu_new__(other: byte)</code>","text":""},{"location":"libraries/api/gpu/#intn-extend-class-is-extended-to-add-given-methods","title":"<code>Int[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_11","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_8","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-intn","title":"<code>__from_gpu__(self, other: Int[N])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-intn","title":"<code>__from_gpu_new__(other: Int[N])</code>","text":""},{"location":"libraries/api/gpu/#uintn-extend-class-is-extended-to-add-given-methods","title":"<code>UInt[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_12","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_9","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-uintn","title":"<code>__from_gpu__(self, other: UInt[N])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-uintn","title":"<code>__from_gpu_new__(other: UInt[N])</code>","text":""},{"location":"libraries/api/gpu/#str-extend-class-is-extended-to-add-given-methods","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_13","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_10","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-str","title":"<code>__from_gpu__(self, other: str)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-str","title":"<code>__from_gpu_new__(other: str)</code>","text":""},{"location":"libraries/api/gpu/#listt-extend-class-is-extended-to-add-given-methods","title":"<code>List[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_14","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache-inline-function-always-inlined","title":"<code>__to_gpu__(self, cache: AllocCache)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-listt-inline-function-always-inlined","title":"<code>__from_gpu__(self, other: List[T])</code>  @inline Function always inlined","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-listt-inline-function-always-inlined","title":"<code>__from_gpu_new__(other: List[T])</code>  @inline Function always inlined","text":""},{"location":"libraries/api/gpu/#dynamictuplet-extend-class-is-extended-to-add-given-methods","title":"<code>DynamicTuple[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_15","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache-inline-function-always-inlined_1","title":"<code>__to_gpu__(self, cache: AllocCache)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-dynamictuplet-inline-function-always-inlined","title":"<code>__from_gpu__(self, other: DynamicTuple[T])</code>  @inline Function always inlined","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-dynamictuplet-inline-function-always-inlined","title":"<code>__from_gpu_new__(other: DynamicTuple[T])</code>  @inline Function always inlined","text":""},{"location":"libraries/api/gpu/#dictkv-extend-class-is-extended-to-add-given-methods","title":"<code>Dict[K,V]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_16","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_11","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-dictk-v","title":"<code>__from_gpu__(self, other: Dict[K, V])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-dictk-v","title":"<code>__from_gpu_new__(other: Dict[K, V])</code>","text":""},{"location":"libraries/api/gpu/#setk-extend-class-is-extended-to-add-given-methods","title":"<code>Set[K]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_17","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_12","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-setk","title":"<code>__from_gpu__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-setk","title":"<code>__from_gpu_new__(other: Set[K])</code>","text":""},{"location":"libraries/api/gpu/#optionalt-extend-class-is-extended-to-add-given-methods","title":"<code>Optional[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/gpu/#magic-methods_18","title":"Magic methods","text":""},{"location":"libraries/api/gpu/#__to_gpu__self-cache-alloccache_13","title":"<code>__to_gpu__(self, cache: AllocCache)</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu__self-other-optionalt","title":"<code>__from_gpu__(self, other: Optional[T])</code>","text":""},{"location":"libraries/api/gpu/#__from_gpu_new__other-optionalt","title":"<code>__from_gpu_new__(other: Optional[T])</code>","text":""},{"location":"libraries/api/gzip/","title":"module <code>gzip</code>","text":"<p>Source: <code>stdlib/gzip.codon</code></p>"},{"location":"libraries/api/gzip/#openpath-str-mode-str-r","title":"<code>open(path: str, mode: str = \"r\")</code>","text":""},{"location":"libraries/api/heapq/","title":"module <code>heapq</code>","text":"<p>Source: <code>stdlib/heapq.codon</code></p>"},{"location":"libraries/api/heapq/#heappushheap-listt-item-t-t-type","title":"<code>heappush(heap: List[T], item: T, T: type)</code>","text":""},{"location":"libraries/api/heapq/#heappopheap-listt-t-type","title":"<code>heappop(heap: List[T], T: type)</code>","text":""},{"location":"libraries/api/heapq/#heapreplaceheap-listt-item-t-t-type","title":"<code>heapreplace(heap: List[T], item: T, T: type)</code>","text":""},{"location":"libraries/api/heapq/#heappushpopheap-listt-item-t-t-type","title":"<code>heappushpop(heap: List[T], item: T, T: type)</code>","text":""},{"location":"libraries/api/heapq/#heapifyx-listt-t-type","title":"<code>heapify(x: List[T], T: type)</code>","text":""},{"location":"libraries/api/heapq/#nsmallestn-int-iterable-generatort-key-optionalint-t-type","title":"<code>nsmallest(n: int, iterable: Generator[T], key = Optional[int](), T: type)</code>","text":""},{"location":"libraries/api/heapq/#nlargestn-int-iterable-generatort-key-optionalint-t-type","title":"<code>nlargest(n: int, iterable: Generator[T], key = Optional[int](), T: type)</code>","text":""},{"location":"libraries/api/heapq/#mergeiterables-key-optionalint-reverse-bool-false","title":"<code>merge(*iterables, key = Optional[int](), reverse: bool = False)</code>","text":""},{"location":"libraries/api/itertools/","title":"module <code>itertools</code>","text":"<p>Source: <code>stdlib/itertools.codon</code></p>"},{"location":"libraries/api/itertools/#countstart-t-0-step-t-1-t-type-inline-function-always-inlined","title":"<code>count(start: T = 0, step: T = 1, T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#cycleiterable-generatort-t-type-inline-function-always-inlined","title":"<code>cycle(iterable: Generator[T], T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#repeatobject-t-times-optionalint-none-t-type-inline-function-always-inlined","title":"<code>repeat(object: T, times: Optional[int] = None, T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#accumulateiterable-generatort-func-lambda-a-b-a-b-initial-0-t-type-inline-function-always-inlined","title":"<code>accumulate(iterable: Generator[T], func = lambda a, b: (a + b), initial = 0, T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#accumulateiterable-generatort-func-lambda-a-b-a-b-t-type-inline-function-always-inlined-overload-function-is-overloaded","title":"<code>accumulate(iterable: Generator[T], func = lambda a, b: (a + b), T: type)</code>  @inline Function always inlined   @overload Function is overloaded","text":""},{"location":"libraries/api/itertools/#chain-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>chain</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/itertools/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/itertools/#__new__iterables-inline-function-always-inlined","title":"<code>__new__(*iterables)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#methods","title":"Methods","text":""},{"location":"libraries/api/itertools/#from_iterableiterables-inline-function-always-inlined","title":"<code>from_iterable(iterables)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#compressdata-generatort-selectors-generatorb-t-type-b-type-inline-function-always-inlined","title":"<code>compress(data: Generator[T], selectors: Generator[B], T: type, B: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#dropwhilepredicate-callabletraitt-bool-iterable-generatort-t-type-inline-function-always-inlined","title":"<code>dropwhile(predicate: CallableTrait[T, bool], iterable: Generator[T], T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#filterfalsepredicate-callabletraitt-bool-iterable-generatort-t-type-inline-function-always-inlined","title":"<code>filterfalse(predicate: CallableTrait[T, bool], iterable: Generator[T], T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#groupbyiterable-key-optionalint-inline-function-always-inlined","title":"<code>groupby(iterable, key = Optional[int]())</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#isliceiterable-generatort-stop-optionalint-t-type","title":"<code>islice(iterable: Generator[T], stop: Optional[int], T: type)</code>","text":""},{"location":"libraries/api/itertools/#isliceiterable-generatort-start-optionalint-stop-optionalint-step-optionalint-none-t-type-overload-function-is-overloaded","title":"<code>islice(iterable: Generator[T], start: Optional[int], stop: Optional[int], step: Optional[int] = None, T: type)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/itertools/#starmapfunction-iterable-inline-function-always-inlined","title":"<code>starmap(function, iterable)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#takewhilepredicate-callabletraitt-bool-iterable-generatort-t-type-inline-function-always-inlined","title":"<code>takewhile(predicate: CallableTrait[T, bool], iterable: Generator[T], T: type)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#teeiterable-generatort-n-int-2-t-type","title":"<code>tee(iterable: Generator[T], n: int = 2, T: type)</code>","text":""},{"location":"libraries/api/itertools/#zip_longestiterables-fillvalue-inline-function-always-inlined","title":"<code>zip_longest(*iterables, fillvalue)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/itertools/#zip_longestargs-inline-function-always-inlined-overload-function-is-overloaded","title":"<code>zip_longest(*args)</code>  @inline Function always inlined   @overload Function is overloaded","text":""},{"location":"libraries/api/itertools/#productiterables-repeat-int","title":"<code>product(*iterables, repeat: int)</code>","text":""},{"location":"libraries/api/itertools/#productiterables-repeat-literalint-1-overload-function-is-overloaded","title":"<code>product(*iterables, repeat: Literal[int] = 1)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/itertools/#combinationspool-r-int","title":"<code>combinations(pool, r: int)</code>","text":""},{"location":"libraries/api/itertools/#combinationspool-r-literalint-overload-function-is-overloaded","title":"<code>combinations(pool, r: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/itertools/#combinations_with_replacementpool-r-int","title":"<code>combinations_with_replacement(pool, r: int)</code>","text":""},{"location":"libraries/api/itertools/#combinations_with_replacementpool-r-literalint-overload-function-is-overloaded","title":"<code>combinations_with_replacement(pool, r: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/itertools/#permutationspool-r-none","title":"<code>permutations(pool, r = None)</code>","text":""},{"location":"libraries/api/itertools/#permutationspool-r-literalint-overload-function-is-overloaded","title":"<code>permutations(pool, r: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/math/","title":"module <code>math</code>","text":"<p>Source: <code>stdlib/math.codon</code></p>"},{"location":"libraries/api/math/#e-27182818284590452354","title":"<code>e</code> = <code>2.7182818284590452354</code>","text":""},{"location":"libraries/api/math/#pi-314159265358979323846","title":"<code>pi</code> = <code>3.14159265358979323846</code>","text":""},{"location":"libraries/api/math/#tau-628318530717958647693","title":"<code>tau</code> = <code>6.28318530717958647693</code>","text":""},{"location":"libraries/api/math/#inf-_inf","title":"<code>inf</code> = <code>_inf()</code>","text":""},{"location":"libraries/api/math/#nan-_nan","title":"<code>nan</code> = <code>_nan()</code>","text":""},{"location":"libraries/api/math/#factorialx-int","title":"<code>factorial(x: int)</code>","text":""},{"location":"libraries/api/math/#isnanx-float","title":"<code>isnan(x: float)</code>","text":""},{"location":"libraries/api/math/#isinfx-float","title":"<code>isinf(x: float)</code>","text":""},{"location":"libraries/api/math/#isfinitex-float","title":"<code>isfinite(x: float)</code>","text":""},{"location":"libraries/api/math/#ceilx-float","title":"<code>ceil(x: float)</code>","text":""},{"location":"libraries/api/math/#floorx-float","title":"<code>floor(x: float)</code>","text":""},{"location":"libraries/api/math/#fabsx-float","title":"<code>fabs(x: float)</code>","text":""},{"location":"libraries/api/math/#fmodx-float-y-float","title":"<code>fmod(x: float, y: float)</code>","text":""},{"location":"libraries/api/math/#expx-float","title":"<code>exp(x: float)</code>","text":""},{"location":"libraries/api/math/#expm1x-float","title":"<code>expm1(x: float)</code>","text":""},{"location":"libraries/api/math/#ldexpx-float-i-int","title":"<code>ldexp(x: float, i: int)</code>","text":""},{"location":"libraries/api/math/#logx-float-base-float-e","title":"<code>log(x: float, base: float = e)</code>","text":""},{"location":"libraries/api/math/#log2x-float","title":"<code>log2(x: float)</code>","text":""},{"location":"libraries/api/math/#log10x-float","title":"<code>log10(x: float)</code>","text":""},{"location":"libraries/api/math/#degreesx-float","title":"<code>degrees(x: float)</code>","text":""},{"location":"libraries/api/math/#radiansx-float","title":"<code>radians(x: float)</code>","text":""},{"location":"libraries/api/math/#sqrtx-float","title":"<code>sqrt(x: float)</code>","text":""},{"location":"libraries/api/math/#powx-float-y-float","title":"<code>pow(x: float, y: float)</code>","text":""},{"location":"libraries/api/math/#acosx-float","title":"<code>acos(x: float)</code>","text":""},{"location":"libraries/api/math/#asinx-float","title":"<code>asin(x: float)</code>","text":""},{"location":"libraries/api/math/#atanx-float","title":"<code>atan(x: float)</code>","text":""},{"location":"libraries/api/math/#atan2y-float-x-float","title":"<code>atan2(y: float, x: float)</code>","text":""},{"location":"libraries/api/math/#cosx-float","title":"<code>cos(x: float)</code>","text":""},{"location":"libraries/api/math/#sinx-float","title":"<code>sin(x: float)</code>","text":""},{"location":"libraries/api/math/#hypotx-float-y-float","title":"<code>hypot(x: float, y: float)</code>","text":""},{"location":"libraries/api/math/#tanx-float","title":"<code>tan(x: float)</code>","text":""},{"location":"libraries/api/math/#coshx-float","title":"<code>cosh(x: float)</code>","text":""},{"location":"libraries/api/math/#sinhx-float","title":"<code>sinh(x: float)</code>","text":""},{"location":"libraries/api/math/#tanhx-float","title":"<code>tanh(x: float)</code>","text":""},{"location":"libraries/api/math/#acoshx-float","title":"<code>acosh(x: float)</code>","text":""},{"location":"libraries/api/math/#asinhx-float","title":"<code>asinh(x: float)</code>","text":""},{"location":"libraries/api/math/#atanhx-float","title":"<code>atanh(x: float)</code>","text":""},{"location":"libraries/api/math/#copysignx-float-y-float","title":"<code>copysign(x: float, y: float)</code>","text":""},{"location":"libraries/api/math/#log1px-float","title":"<code>log1p(x: float)</code>","text":""},{"location":"libraries/api/math/#truncx-float","title":"<code>trunc(x: float)</code>","text":""},{"location":"libraries/api/math/#erfx-float","title":"<code>erf(x: float)</code>","text":""},{"location":"libraries/api/math/#erfcx-float","title":"<code>erfc(x: float)</code>","text":""},{"location":"libraries/api/math/#gammax-float","title":"<code>gamma(x: float)</code>","text":""},{"location":"libraries/api/math/#lgammax-float","title":"<code>lgamma(x: float)</code>","text":""},{"location":"libraries/api/math/#remainderx-float-y-float","title":"<code>remainder(x: float, y: float)</code>","text":""},{"location":"libraries/api/math/#gcdargs","title":"<code>gcd(*args)</code>","text":""},{"location":"libraries/api/math/#lcmargs","title":"<code>lcm(*args)</code>","text":""},{"location":"libraries/api/math/#frexpx-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>frexp(x: float)</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/math/#modfx-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>modf(x: float)</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/math/#isclosea-float-b-float-rel_tol-float-1e-09-abs_tol-float-00","title":"<code>isclose(a: float, b: float, rel_tol: float = 1e-09, abs_tol: float = 0.0)</code>","text":""},{"location":"libraries/api/math/#fsumseq","title":"<code>fsum(seq)</code>","text":""},{"location":"libraries/api/math/#proditerable-start-1","title":"<code>prod(iterable, start = 1)</code>","text":""},{"location":"libraries/api/math/#e32-float32e","title":"<code>e32</code> = <code>float32(e)</code>","text":""},{"location":"libraries/api/math/#pi32-float32pi","title":"<code>pi32</code> = <code>float32(pi)</code>","text":""},{"location":"libraries/api/math/#tau32-float32tau","title":"<code>tau32</code> = <code>float32(tau)</code>","text":""},{"location":"libraries/api/math/#inf32-float32inf","title":"<code>inf32</code> = <code>float32(inf)</code>","text":""},{"location":"libraries/api/math/#nan32-float32nan","title":"<code>nan32</code> = <code>float32(nan)</code>","text":""},{"location":"libraries/api/math/#isnanx-float32-overload-function-is-overloaded","title":"<code>isnan(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.isnan()</code></p>"},{"location":"libraries/api/math/#isinfx-float32-overload-function-is-overloaded","title":"<code>isinf(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.isinf()</code></p>"},{"location":"libraries/api/math/#isfinitex-float32-overload-function-is-overloaded","title":"<code>isfinite(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.isfinite()</code></p>"},{"location":"libraries/api/math/#ceilx-float32-overload-function-is-overloaded","title":"<code>ceil(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.ceil()</code></p>"},{"location":"libraries/api/math/#floorx-float32-overload-function-is-overloaded","title":"<code>floor(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.floor()</code></p>"},{"location":"libraries/api/math/#fabsx-float32-overload-function-is-overloaded","title":"<code>fabs(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.fabs()</code></p>"},{"location":"libraries/api/math/#fmodx-float32-y-float32-overload-function-is-overloaded","title":"<code>fmod(x: float32, y: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.fmod()</code></p>"},{"location":"libraries/api/math/#expx-float32-overload-function-is-overloaded","title":"<code>exp(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.exp()</code></p>"},{"location":"libraries/api/math/#expm1x-float32-overload-function-is-overloaded","title":"<code>expm1(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.expm1()</code></p>"},{"location":"libraries/api/math/#ldexpx-float32-i-int-overload-function-is-overloaded","title":"<code>ldexp(x: float32, i: int)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.ldexp()</code></p>"},{"location":"libraries/api/math/#logx-float32-base-float32-e32-overload-function-is-overloaded","title":"<code>log(x: float32, base: float32 = e32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.log()</code></p>"},{"location":"libraries/api/math/#log2x-float32-overload-function-is-overloaded","title":"<code>log2(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.log2()</code></p>"},{"location":"libraries/api/math/#log10x-float32-overload-function-is-overloaded","title":"<code>log10(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.log10()</code></p>"},{"location":"libraries/api/math/#degreesx-float32-overload-function-is-overloaded","title":"<code>degrees(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.degrees()</code></p>"},{"location":"libraries/api/math/#radiansx-float32-overload-function-is-overloaded","title":"<code>radians(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.radians()</code></p>"},{"location":"libraries/api/math/#sqrtx-float32-overload-function-is-overloaded","title":"<code>sqrt(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.sqrt()</code></p>"},{"location":"libraries/api/math/#powx-float32-y-float32-overload-function-is-overloaded","title":"<code>pow(x: float32, y: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.pow()</code></p>"},{"location":"libraries/api/math/#acosx-float32-overload-function-is-overloaded","title":"<code>acos(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.acos()</code></p>"},{"location":"libraries/api/math/#asinx-float32-overload-function-is-overloaded","title":"<code>asin(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.asin()</code></p>"},{"location":"libraries/api/math/#atanx-float32-overload-function-is-overloaded","title":"<code>atan(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.atan()</code></p>"},{"location":"libraries/api/math/#atan2y-float32-x-float32-overload-function-is-overloaded","title":"<code>atan2(y: float32, x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.atan2()</code></p>"},{"location":"libraries/api/math/#cosx-float32-overload-function-is-overloaded","title":"<code>cos(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.cos()</code></p>"},{"location":"libraries/api/math/#sinx-float32-overload-function-is-overloaded","title":"<code>sin(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.sin()</code></p>"},{"location":"libraries/api/math/#hypotx-float32-y-float32-overload-function-is-overloaded","title":"<code>hypot(x: float32, y: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.hypot()</code></p>"},{"location":"libraries/api/math/#tanx-float32-overload-function-is-overloaded","title":"<code>tan(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.tan()</code></p>"},{"location":"libraries/api/math/#coshx-float32-overload-function-is-overloaded","title":"<code>cosh(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.cosh()</code></p>"},{"location":"libraries/api/math/#sinhx-float32-overload-function-is-overloaded","title":"<code>sinh(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.sinh()</code></p>"},{"location":"libraries/api/math/#tanhx-float32-overload-function-is-overloaded","title":"<code>tanh(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.tanh()</code></p>"},{"location":"libraries/api/math/#acoshx-float32-overload-function-is-overloaded","title":"<code>acosh(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.acosh()</code></p>"},{"location":"libraries/api/math/#asinhx-float32-overload-function-is-overloaded","title":"<code>asinh(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.asinh()</code></p>"},{"location":"libraries/api/math/#atanhx-float32-overload-function-is-overloaded","title":"<code>atanh(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.atanh()</code></p>"},{"location":"libraries/api/math/#copysignx-float32-y-float32-overload-function-is-overloaded","title":"<code>copysign(x: float32, y: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.copysign()</code></p>"},{"location":"libraries/api/math/#log1px-float32-overload-function-is-overloaded","title":"<code>log1p(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.log1p()</code></p>"},{"location":"libraries/api/math/#truncx-float32-overload-function-is-overloaded","title":"<code>trunc(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.trunc()</code></p>"},{"location":"libraries/api/math/#erfx-float32-overload-function-is-overloaded","title":"<code>erf(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.erf()</code></p>"},{"location":"libraries/api/math/#erfcx-float32-overload-function-is-overloaded","title":"<code>erfc(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.erfc()</code></p>"},{"location":"libraries/api/math/#gammax-float32-overload-function-is-overloaded","title":"<code>gamma(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.gamma()</code></p>"},{"location":"libraries/api/math/#lgammax-float32-overload-function-is-overloaded","title":"<code>lgamma(x: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.lgamma()</code></p>"},{"location":"libraries/api/math/#remainderx-float32-y-float32-overload-function-is-overloaded","title":"<code>remainder(x: float32, y: float32)</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.remainder()</code></p>"},{"location":"libraries/api/math/#frexpx-float32-overload-function-is-overloaded-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>frexp(x: float32)</code>  @overload Function is overloaded   @pure Function has no side effects and returns same value for same inputs","text":"<p><code>float32</code> version of <code>math.frexp()</code></p>"},{"location":"libraries/api/math/#modfx-float32-overload-function-is-overloaded-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>modf(x: float32)</code>  @overload Function is overloaded   @pure Function has no side effects and returns same value for same inputs","text":"<p><code>float32</code> version of <code>math.modf()</code></p>"},{"location":"libraries/api/math/#isclosea-float32-b-float32-rel_tol-float32-float321e-09-abs_tol-float32-float3200-overload-function-is-overloaded","title":"<code>isclose(a: float32, b: float32, rel_tol: float32 = float32(1e-09), abs_tol: float32 = float32(0.0))</code>  @overload Function is overloaded","text":"<p><code>float32</code> version of <code>math.isclose()</code></p>"},{"location":"libraries/api/openmp/","title":"module <code>openmp</code>","text":"<p>Source: <code>stdlib/openmp.codon</code></p>"},{"location":"libraries/api/openmp/#routine-functioni32-cobj-i32","title":"<code>Routine</code> = <code>Function[([i32, cobj], i32)]</code>","text":""},{"location":"libraries/api/openmp/#lock-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Lock</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields","title":"Fields","text":""},{"location":"libraries/api/openmp/#a1-i32","title":"<code>a1</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a2-i32","title":"<code>a2</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a3-i32","title":"<code>a3</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a4-i32","title":"<code>a4</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a5-i32","title":"<code>a5</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a6-i32","title":"<code>a6</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a7-i32","title":"<code>a7</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#a8-i32","title":"<code>a8</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/openmp/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/openmp/#ident-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Ident</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields_1","title":"Fields","text":""},{"location":"libraries/api/openmp/#reserved_1-i32","title":"<code>reserved_1</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#flags-i32","title":"<code>flags</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#reserved_2-i32","title":"<code>reserved_2</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#reserved_3-i32","title":"<code>reserved_3</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#psource-cobj","title":"<code>psource</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/openmp/#__new__flags-int-0-source-str-unknownunknown00","title":"<code>__new__(flags: int = 0, source: str = \";unknown;unknown;0;0;;\")</code>","text":""},{"location":"libraries/api/openmp/#lrdata-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>LRData</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields_2","title":"Fields","text":""},{"location":"libraries/api/openmp/#routine-routine","title":"<code>routine</code>: <code>Routine</code>","text":""},{"location":"libraries/api/openmp/#task-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Task</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields_3","title":"Fields","text":""},{"location":"libraries/api/openmp/#shareds-cobj","title":"<code>shareds</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#routine-routine_1","title":"<code>routine</code>: <code>Routine</code>","text":""},{"location":"libraries/api/openmp/#flags-i32_1","title":"<code>flags</code>: <code>i32</code>","text":""},{"location":"libraries/api/openmp/#x-lrdata","title":"<code>x</code>: <code>LRData</code>","text":""},{"location":"libraries/api/openmp/#y-lrdata","title":"<code>y</code>: <code>LRData</code>","text":""},{"location":"libraries/api/openmp/#taskwithprivatest-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>TaskWithPrivates[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields_4","title":"Fields","text":""},{"location":"libraries/api/openmp/#task-task","title":"<code>task</code>: <code>Task</code>","text":""},{"location":"libraries/api/openmp/#data-t","title":"<code>data</code>: <code>T</code>","text":""},{"location":"libraries/api/openmp/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/openmp/#taskreductioninput-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>TaskReductionInput</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields_5","title":"Fields","text":""},{"location":"libraries/api/openmp/#reduce_shar-cobj","title":"<code>reduce_shar</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#reduce_orig-cobj","title":"<code>reduce_orig</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#reduce_size-int","title":"<code>reduce_size</code>: <code>int</code>","text":""},{"location":"libraries/api/openmp/#reduce_init-cobj","title":"<code>reduce_init</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#reduce_fini-cobj","title":"<code>reduce_fini</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#reduce_comb-cobj","title":"<code>reduce_comb</code>: <code>cobj</code>","text":""},{"location":"libraries/api/openmp/#flags-u32","title":"<code>flags</code>: <code>u32</code>","text":""},{"location":"libraries/api/openmp/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/openmp/#__new__reduce_shar-reduce_orig-reduce_size-int-reduce_init-cobj-reduce_comb-cobj","title":"<code>__new__(reduce_shar, reduce_orig, reduce_size: int, reduce_init: cobj, reduce_comb: cobj)</code>","text":""},{"location":"libraries/api/openmp/#taskreductioninputarray-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>TaskReductionInputArray</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/openmp/#fields_6","title":"Fields","text":""},{"location":"libraries/api/openmp/#len-int","title":"<code>len</code>: <code>int</code>","text":""},{"location":"libraries/api/openmp/#ptr-ptrtaskreductioninput","title":"<code>ptr</code>: <code>Ptr[TaskReductionInput]</code>","text":""},{"location":"libraries/api/openmp/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/openmp/#__setitem__self-idx-int-x-taskreductioninput","title":"<code>__setitem__(self, idx: int, x: TaskReductionInput)</code>","text":""},{"location":"libraries/api/openmp/#flush","title":"<code>flush()</code>","text":""},{"location":"libraries/api/openmp/#get_num_threads-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_num_threads()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_thread_num-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_thread_num()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_max_threads-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_max_threads()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_num_procs-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_num_procs()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#set_num_threadsnum_threads-int","title":"<code>set_num_threads(num_threads: int)</code>","text":""},{"location":"libraries/api/openmp/#in_parallel-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>in_parallel()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#set_dynamicdynamic_threads-bool-true","title":"<code>set_dynamic(dynamic_threads: bool = True)</code>","text":""},{"location":"libraries/api/openmp/#get_dynamic-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_dynamic()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_cancellation-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_cancellation()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#set_schedulekind-str-chunk_size-int-0","title":"<code>set_schedule(kind: str, chunk_size: int = 0)</code>","text":""},{"location":"libraries/api/openmp/#get_schedule-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_schedule()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_thread_limit-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_thread_limit()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#set_max_active_levelsmax_levels-int","title":"<code>set_max_active_levels(max_levels: int)</code>","text":""},{"location":"libraries/api/openmp/#get_max_active_levels-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_max_active_levels()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_level-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_level()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_ancestor_thread_numlevel-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_ancestor_thread_num(level: int)</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_team_sizelevel-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_team_size(level: int)</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_active_level-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_active_level()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#in_final-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>in_final()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_proc_bind-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_proc_bind()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#set_default_devicedevice_num-int","title":"<code>set_default_device(device_num: int)</code>","text":""},{"location":"libraries/api/openmp/#get_default_device-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_default_device()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_num_devices-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_num_devices()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_num_teams-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_num_teams()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_team_num-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_team_num()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#is_initial_device-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>is_initial_device()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_wtime-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_wtime()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#get_wtick-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>get_wtick()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/openmp/#singlefunc","title":"<code>single(func)</code>","text":""},{"location":"libraries/api/openmp/#masterfunc","title":"<code>master(func)</code>","text":""},{"location":"libraries/api/openmp/#orderedfunc","title":"<code>ordered(func)</code>","text":""},{"location":"libraries/api/openmp/#criticalfunc","title":"<code>critical(func)</code>","text":""},{"location":"libraries/api/openmp/#for_parnum_threads-int-1-chunk_size-int-1-schedule-literalstr-static-ordered-literalbool-false-collapse-literalint-0-gpu-literalbool-false","title":"<code>for_par(num_threads: int = -1, chunk_size: int = -1, schedule: Literal[str] = \"static\", ordered: Literal[bool] = False, collapse: Literal[int] = 0, gpu: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/operator/","title":"module <code>operator</code>","text":"<p>Source: <code>stdlib/operator.codon</code></p>"},{"location":"libraries/api/operator/#lt-lambda-a-b-a-b","title":"<code>lt</code> = <code>lambda a, b: (a &lt; b)</code>","text":""},{"location":"libraries/api/operator/#le-lambda-a-b-a-b","title":"<code>le</code> = <code>lambda a, b: (a &lt;= b)</code>","text":""},{"location":"libraries/api/operator/#eq-lambda-a-b-a-b","title":"<code>eq</code> = <code>lambda a, b: (a == b)</code>","text":""},{"location":"libraries/api/operator/#ne-lambda-a-b-a-b","title":"<code>ne</code> = <code>lambda a, b: (a != b)</code>","text":""},{"location":"libraries/api/operator/#gt-lambda-a-b-a-b","title":"<code>gt</code> = <code>lambda a, b: (a &gt; b)</code>","text":""},{"location":"libraries/api/operator/#ge-lambda-a-b-a-b","title":"<code>ge</code> = <code>lambda a, b: (a &gt;= b)</code>","text":""},{"location":"libraries/api/operator/#not_a","title":"<code>not_(a)</code>","text":""},{"location":"libraries/api/operator/#trutha","title":"<code>truth(a)</code>","text":""},{"location":"libraries/api/operator/#is_a-b","title":"<code>is_(a, b)</code>","text":""},{"location":"libraries/api/operator/#is_nota-b","title":"<code>is_not(a, b)</code>","text":""},{"location":"libraries/api/operator/#absa","title":"<code>abs(a)</code>","text":""},{"location":"libraries/api/operator/#adda-b","title":"<code>add(a, b)</code>","text":""},{"location":"libraries/api/operator/#and_a-b","title":"<code>and_(a, b)</code>","text":""},{"location":"libraries/api/operator/#floordiva-b","title":"<code>floordiv(a, b)</code>","text":""},{"location":"libraries/api/operator/#indexa","title":"<code>index(a)</code>","text":""},{"location":"libraries/api/operator/#inva","title":"<code>inv(a)</code>","text":""},{"location":"libraries/api/operator/#invert-inv","title":"<code>invert</code> = <code>inv</code>","text":""},{"location":"libraries/api/operator/#lshifta-b","title":"<code>lshift(a, b)</code>","text":""},{"location":"libraries/api/operator/#moda-b","title":"<code>mod(a, b)</code>","text":""},{"location":"libraries/api/operator/#mula-b","title":"<code>mul(a, b)</code>","text":""},{"location":"libraries/api/operator/#matmula-b","title":"<code>matmul(a, b)</code>","text":""},{"location":"libraries/api/operator/#nega","title":"<code>neg(a)</code>","text":""},{"location":"libraries/api/operator/#or_a-b","title":"<code>or_(a, b)</code>","text":""},{"location":"libraries/api/operator/#posa","title":"<code>pos(a)</code>","text":""},{"location":"libraries/api/operator/#powa-b","title":"<code>pow(a, b)</code>","text":""},{"location":"libraries/api/operator/#rshifta-b","title":"<code>rshift(a, b)</code>","text":""},{"location":"libraries/api/operator/#suba-b","title":"<code>sub(a, b)</code>","text":""},{"location":"libraries/api/operator/#truediva-b","title":"<code>truediv(a, b)</code>","text":""},{"location":"libraries/api/operator/#xora-b","title":"<code>xor(a, b)</code>","text":""},{"location":"libraries/api/operator/#concata-b","title":"<code>concat(a, b)</code>","text":""},{"location":"libraries/api/operator/#containsa-b","title":"<code>contains(a, b)</code>","text":""},{"location":"libraries/api/operator/#countofa-b","title":"<code>countOf(a, b)</code>","text":""},{"location":"libraries/api/operator/#delitema-b","title":"<code>delitem(a, b)</code>","text":""},{"location":"libraries/api/operator/#getitema-b","title":"<code>getitem(a, b)</code>","text":""},{"location":"libraries/api/operator/#indexofa-b","title":"<code>indexOf(a, b)</code>","text":""},{"location":"libraries/api/operator/#setitema-b-c","title":"<code>setitem(a, b, c)</code>","text":""},{"location":"libraries/api/operator/#length_hinta-default-0","title":"<code>length_hint(a, default = 0)</code>","text":""},{"location":"libraries/api/operator/#attrgetterattr-literalstr","title":"<code>attrgetter(attr: Literal[str])</code>","text":""},{"location":"libraries/api/operator/#itemgetteritems","title":"<code>itemgetter(*items)</code>","text":""},{"location":"libraries/api/operator/#itemgetteritem-literalint-overload-function-is-overloaded","title":"<code>itemgetter(item: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/operator/#methodcallername-literalstr-args-kwargs","title":"<code>methodcaller(name: Literal[str], *args, **kwargs)</code>","text":""},{"location":"libraries/api/operator/#iadda-b","title":"<code>iadd(a, b)</code>","text":""},{"location":"libraries/api/operator/#ianda-b","title":"<code>iand(a, b)</code>","text":""},{"location":"libraries/api/operator/#iconcata-b","title":"<code>iconcat(a, b)</code>","text":""},{"location":"libraries/api/operator/#ifloordiva-b","title":"<code>ifloordiv(a, b)</code>","text":""},{"location":"libraries/api/operator/#ilshifta-b","title":"<code>ilshift(a, b)</code>","text":""},{"location":"libraries/api/operator/#imoda-b","title":"<code>imod(a, b)</code>","text":""},{"location":"libraries/api/operator/#imula-b","title":"<code>imul(a, b)</code>","text":""},{"location":"libraries/api/operator/#imatmula-b","title":"<code>imatmul(a, b)</code>","text":""},{"location":"libraries/api/operator/#iora-b","title":"<code>ior(a, b)</code>","text":""},{"location":"libraries/api/operator/#ipowa-b","title":"<code>ipow(a, b)</code>","text":""},{"location":"libraries/api/operator/#irshifta-b","title":"<code>irshift(a, b)</code>","text":""},{"location":"libraries/api/operator/#isuba-b","title":"<code>isub(a, b)</code>","text":""},{"location":"libraries/api/operator/#itruediva-b","title":"<code>itruediv(a, b)</code>","text":""},{"location":"libraries/api/operator/#ixora-b","title":"<code>ixor(a, b)</code>","text":""},{"location":"libraries/api/pickle/","title":"module <code>pickle</code>","text":"<p>Source: <code>stdlib/pickle.codon</code></p>"},{"location":"libraries/api/pickle/#picklex-t-jar-jar-t-type","title":"<code>pickle(x: T, jar: Jar, T: type)</code>","text":""},{"location":"libraries/api/pickle/#unpicklejar-jar-t-type","title":"<code>unpickle(jar: Jar, T: type)</code>","text":""},{"location":"libraries/api/pickle/#dumpx-t-f-t-type","title":"<code>dump(x: T, f, T: type)</code>","text":""},{"location":"libraries/api/pickle/#loadf-t-type","title":"<code>load(f, T: type)</code>","text":""},{"location":"libraries/api/pickle/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#intn-extend-class-is-extended-to-add-given-methods","title":"<code>Int[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_1","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_1","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#uintn-extend-class-is-extended-to-add-given-methods","title":"<code>UInt[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_2","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_2","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_3","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_3","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#float32-extend-class-is-extended-to-add-given-methods","title":"<code>float32</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_4","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_4","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#bool-extend-class-is-extended-to-add-given-methods","title":"<code>bool</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_5","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_5","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#byte-extend-class-is-extended-to-add-given-methods","title":"<code>byte</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_6","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_6","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#str-extend-class-is-extended-to-add-given-methods","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_7","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_7","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#listt-extend-class-is-extended-to-add-given-methods","title":"<code>List[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_8","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_8","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#dynamictuplet-extend-class-is-extended-to-add-given-methods","title":"<code>DynamicTuple[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_9","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_9","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_9","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#dictkv-extend-class-is-extended-to-add-given-methods","title":"<code>Dict[K,V]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_10","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_10","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_10","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#setk-extend-class-is-extended-to-add-given-methods","title":"<code>Set[K]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/pickle/#magic-methods_11","title":"Magic methods","text":""},{"location":"libraries/api/pickle/#__pickle__self-jar-jar_11","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/pickle/#__unpickle__jar-jar_11","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/python/","title":"module <code>python</code>","text":"<p>Source: <code>stdlib/python.codon</code></p>"},{"location":"libraries/api/random/","title":"module <code>random</code>","text":"<p>Source: <code>stdlib/random.codon</code></p>"},{"location":"libraries/api/random/#n-624","title":"<code>N</code> = <code>624</code>","text":""},{"location":"libraries/api/random/#m-397","title":"<code>M</code> = <code>397</code>","text":""},{"location":"libraries/api/random/#log4-_log40","title":"<code>LOG4</code> = <code>_log(4.0)</code>","text":""},{"location":"libraries/api/random/#nv_magicconst-4-_exp-05-_sqrt20","title":"<code>NV_MAGICCONST</code> = <code>((4 * _exp(-0.5)) / _sqrt(2.0))</code>","text":""},{"location":"libraries/api/random/#sg_magicconst-10-_log45","title":"<code>SG_MAGICCONST</code> = <code>(1.0 + _log(4.5))</code>","text":""},{"location":"libraries/api/random/#twopi-20-_pi","title":"<code>TWOPI</code> = <code>(2.0 * _pi)</code>","text":""},{"location":"libraries/api/random/#matrix_a-u320x9908b0df","title":"<code>MATRIX_A</code> = <code>u32(0x9908b0df)</code>","text":""},{"location":"libraries/api/random/#upper_mask-u320x80000000","title":"<code>UPPER_MASK</code> = <code>u32(0x80000000)</code>","text":""},{"location":"libraries/api/random/#lower_mask-u320x7fffffff","title":"<code>LOWER_MASK</code> = <code>u32(0x7fffffff)</code>","text":""},{"location":"libraries/api/random/#randomgenerator-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>RandomGenerator</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/random/#fields","title":"Fields","text":""},{"location":"libraries/api/random/#data-ptru32","title":"<code>data</code>: <code>Ptr[u32]</code>","text":""},{"location":"libraries/api/random/#properties","title":"Properties","text":""},{"location":"libraries/api/random/#index-property-method-is-a-class-property","title":"<code>index</code>  @property Method is a class property","text":""},{"location":"libraries/api/random/#state-property-method-is-a-class-property","title":"<code>state</code>  @property Method is a class property","text":""},{"location":"libraries/api/random/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/random/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/random/#methods","title":"Methods","text":""},{"location":"libraries/api/random/#getstateself","title":"<code>getstate(self)</code>","text":""},{"location":"libraries/api/random/#setstateself-state","title":"<code>setstate(self, state)</code>","text":""},{"location":"libraries/api/random/#genrand_int32self","title":"<code>genrand_int32(self)</code>","text":""},{"location":"libraries/api/random/#genrand_res53self","title":"<code>genrand_res53(self)</code>","text":""},{"location":"libraries/api/random/#randomself","title":"<code>random(self)</code>","text":""},{"location":"libraries/api/random/#init_u32self-s-u32","title":"<code>init_u32(self, s: u32)</code>","text":""},{"location":"libraries/api/random/#init_arrayself-init_key-ptru32-key_length-int","title":"<code>init_array(self, init_key: Ptr[u32], key_length: int)</code>","text":""},{"location":"libraries/api/random/#init_intself-s-int","title":"<code>init_int(self, s: int)</code>","text":""},{"location":"libraries/api/random/#random_seed_time_pidself","title":"<code>random_seed_time_pid(self)</code>","text":""},{"location":"libraries/api/random/#seedself-s-int","title":"<code>seed(self, s: int)</code>","text":""},{"location":"libraries/api/random/#seedself","title":"<code>seed(self)</code>","text":""},{"location":"libraries/api/random/#random","title":"<code>Random</code>","text":""},{"location":"libraries/api/random/#fields_1","title":"Fields","text":""},{"location":"libraries/api/random/#gen-randomgenerator","title":"<code>gen</code>: <code>RandomGenerator</code>","text":""},{"location":"libraries/api/random/#gauss_next-optionalfloat","title":"<code>gauss_next</code>: <code>Optional[float]</code>","text":""},{"location":"libraries/api/random/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/random/#__init__self-seed-optionalint-none","title":"<code>__init__(self, seed: Optional[int] = None)</code>","text":""},{"location":"libraries/api/random/#methods_1","title":"Methods","text":""},{"location":"libraries/api/random/#seedself-a-optionalint","title":"<code>seed(self, a: Optional[int])</code>","text":""},{"location":"libraries/api/random/#getstateself_1","title":"<code>getstate(self)</code>","text":""},{"location":"libraries/api/random/#setstateself-state_1","title":"<code>setstate(self, state)</code>","text":""},{"location":"libraries/api/random/#getrandbitsself-k-int","title":"<code>getrandbits(self, k: int)</code>","text":""},{"location":"libraries/api/random/#bit_lengthself-n-int","title":"<code>bit_length(self, n: int)</code>","text":""},{"location":"libraries/api/random/#randrangeself-start-int-stop-int-step-int-1","title":"<code>randrange(self, start: int, stop: int, step: int = 1)</code>","text":""},{"location":"libraries/api/random/#randintself-a-int-b-int","title":"<code>randint(self, a: int, b: int)</code>","text":""},{"location":"libraries/api/random/#randomself_1","title":"<code>random(self)</code>","text":""},{"location":"libraries/api/random/#choiceself-sequence-generatort-t-type","title":"<code>choice(self, sequence: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/random/#choiceself-sequence-listt-t-type-overload-function-is-overloaded","title":"<code>choice(self, sequence: List[T], T: type)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/random/#shuffleself-x","title":"<code>shuffle(self, x)</code>","text":""},{"location":"libraries/api/random/#uniformself-a-b","title":"<code>uniform(self, a, b)</code>","text":""},{"location":"libraries/api/random/#triangularself-low-float-high-float-mode-float","title":"<code>triangular(self, low: float, high: float, mode: float)</code>","text":""},{"location":"libraries/api/random/#gammavariateself-alpha-float-beta-float","title":"<code>gammavariate(self, alpha: float, beta: float)</code>","text":""},{"location":"libraries/api/random/#betavariateself-alpha-float-beta-float","title":"<code>betavariate(self, alpha: float, beta: float)</code>","text":""},{"location":"libraries/api/random/#expovariateself-lambd-float","title":"<code>expovariate(self, lambd: float)</code>","text":""},{"location":"libraries/api/random/#gaussself-mu-float-00-sigma-float-10","title":"<code>gauss(self, mu: float = 0.0, sigma: float = 1.0)</code>","text":""},{"location":"libraries/api/random/#paretovariateself-alpha-float","title":"<code>paretovariate(self, alpha: float)</code>","text":""},{"location":"libraries/api/random/#weibullvariateself-alpha-float-beta-float","title":"<code>weibullvariate(self, alpha: float, beta: float)</code>","text":""},{"location":"libraries/api/random/#normalvariateself-mu-float-00-sigma-float-10","title":"<code>normalvariate(self, mu: float = 0.0, sigma: float = 1.0)</code>","text":""},{"location":"libraries/api/random/#lognormvariateself-mu-float-sigma-float","title":"<code>lognormvariate(self, mu: float, sigma: float)</code>","text":""},{"location":"libraries/api/random/#vonmisesvariateself-mu-float-kappa-float","title":"<code>vonmisesvariate(self, mu: float, kappa: float)</code>","text":""},{"location":"libraries/api/random/#sampleself-population-k-int","title":"<code>sample(self, population, k: int)</code>","text":""},{"location":"libraries/api/random/#choicesself-population-weights-optionallistint-cum_weights-optionallistint-k-int","title":"<code>choices(self, population, weights: Optional[List[int]], cum_weights: Optional[List[int]], k: int)</code>","text":""},{"location":"libraries/api/random/#seeda-int","title":"<code>seed(a: int)</code>","text":""},{"location":"libraries/api/random/#getrandbitsk-int","title":"<code>getrandbits(k: int)</code>","text":""},{"location":"libraries/api/random/#randrangestart-int-stop-optionalint-none-step-int-1","title":"<code>randrange(start: int, stop: Optional[int] = None, step: int = 1)</code>","text":""},{"location":"libraries/api/random/#randinta-int-b-int","title":"<code>randint(a: int, b: int)</code>","text":""},{"location":"libraries/api/random/#choices","title":"<code>choice(s)</code>","text":""},{"location":"libraries/api/random/#choicespopulation-weights-optionallistint-none-cum_weights-optionallistint-none-k-int-1","title":"<code>choices(population, weights: Optional[List[int]] = None, cum_weights: Optional[List[int]] = None, k: int = 1)</code>","text":""},{"location":"libraries/api/random/#shuffles","title":"<code>shuffle(s)</code>","text":""},{"location":"libraries/api/random/#samplepopulation-k-int","title":"<code>sample(population, k: int)</code>","text":""},{"location":"libraries/api/random/#random_1","title":"<code>random()</code>","text":""},{"location":"libraries/api/random/#uniforma-b","title":"<code>uniform(a, b)</code>","text":""},{"location":"libraries/api/random/#triangularlow-float-00-high-float-10-mode-optionalfloat-none","title":"<code>triangular(low: float = 0.0, high: float = 1.0, mode: Optional[float] = None)</code>","text":""},{"location":"libraries/api/random/#betavariatealpha-float-beta-float","title":"<code>betavariate(alpha: float, beta: float)</code>","text":""},{"location":"libraries/api/random/#expovariatelambd-float","title":"<code>expovariate(lambd: float)</code>","text":""},{"location":"libraries/api/random/#gammavariatealpha-float-beta-float","title":"<code>gammavariate(alpha: float, beta: float)</code>","text":""},{"location":"libraries/api/random/#gaussmu-float-sigma-float","title":"<code>gauss(mu: float, sigma: float)</code>","text":""},{"location":"libraries/api/random/#lognormvariatemu-float-sigma-float","title":"<code>lognormvariate(mu: float, sigma: float)</code>","text":""},{"location":"libraries/api/random/#normalvariatemu-float-sigma-float","title":"<code>normalvariate(mu: float, sigma: float)</code>","text":""},{"location":"libraries/api/random/#vonmisesvariatemu-float-kappa-float","title":"<code>vonmisesvariate(mu: float, kappa: float)</code>","text":""},{"location":"libraries/api/random/#paretovariatealpha-float","title":"<code>paretovariate(alpha: float)</code>","text":""},{"location":"libraries/api/random/#weibullvariatealpha-float-beta-float","title":"<code>weibullvariate(alpha: float, beta: float)</code>","text":""},{"location":"libraries/api/re/","title":"module <code>re</code>","text":"<p>Source: <code>stdlib/re.codon</code></p>"},{"location":"libraries/api/re/#a-1-0","title":"<code>A</code> = <code>(1 &lt;&lt; 0)</code>","text":""},{"location":"libraries/api/re/#ascii-1-0","title":"<code>ASCII</code> = <code>(1 &lt;&lt; 0)</code>","text":""},{"location":"libraries/api/re/#debug-1-1","title":"<code>DEBUG</code> = <code>(1 &lt;&lt; 1)</code>","text":""},{"location":"libraries/api/re/#i-1-2","title":"<code>I</code> = <code>(1 &lt;&lt; 2)</code>","text":""},{"location":"libraries/api/re/#ignorecase-1-2","title":"<code>IGNORECASE</code> = <code>(1 &lt;&lt; 2)</code>","text":""},{"location":"libraries/api/re/#l-1-3","title":"<code>L</code> = <code>(1 &lt;&lt; 3)</code>","text":""},{"location":"libraries/api/re/#locale-1-3","title":"<code>LOCALE</code> = <code>(1 &lt;&lt; 3)</code>","text":""},{"location":"libraries/api/re/#m-1-4","title":"<code>M</code> = <code>(1 &lt;&lt; 4)</code>","text":""},{"location":"libraries/api/re/#multiline-1-4","title":"<code>MULTILINE</code> = <code>(1 &lt;&lt; 4)</code>","text":""},{"location":"libraries/api/re/#s-1-5","title":"<code>S</code> = <code>(1 &lt;&lt; 5)</code>","text":""},{"location":"libraries/api/re/#dotall-1-5","title":"<code>DOTALL</code> = <code>(1 &lt;&lt; 5)</code>","text":""},{"location":"libraries/api/re/#x-1-6","title":"<code>X</code> = <code>(1 &lt;&lt; 6)</code>","text":""},{"location":"libraries/api/re/#verbose-1-6","title":"<code>VERBOSE</code> = <code>(1 &lt;&lt; 6)</code>","text":""},{"location":"libraries/api/re/#span-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Span</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/re/#fields","title":"Fields","text":""},{"location":"libraries/api/re/#start-int","title":"<code>start</code>: <code>int</code>","text":""},{"location":"libraries/api/re/#end-int","title":"<code>end</code>: <code>int</code>","text":""},{"location":"libraries/api/re/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/re/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/re/#seq_re_matchre-cobj-anchor-int-string-str-pos-int-endpos-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_match(re: cobj, anchor: int, string: str, pos: int, endpos: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_match_onere-cobj-anchor-int-string-str-pos-int-endpos-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_match_one(re: cobj, anchor: int, string: str, pos: int, endpos: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_pattern_groupsre-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_pattern_groups(re: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_group_name_to_indexre-cobj-name-str-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_group_name_to_index(re: cobj, name: str)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_group_index_to_namere-cobj-index-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_group_index_to_name(re: cobj, index: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_pattern_errorre-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_pattern_error(re: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_escapepattern-str-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_escape(pattern: str)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_purge-c-function-is-external-c-function","title":"<code>seq_re_purge()</code>  @C Function is external C function","text":""},{"location":"libraries/api/re/#seq_re_compilepattern-str-flags-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_re_compile(pattern: str, flags: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/re/#error","title":"<code>error</code>","text":""},{"location":"libraries/api/re/#fields_1","title":"Fields","text":""},{"location":"libraries/api/re/#pattern-str","title":"<code>pattern</code>: <code>str</code>","text":""},{"location":"libraries/api/re/#properties","title":"Properties","text":""},{"location":"libraries/api/re/#msg-property-method-is-a-class-property","title":"<code>msg</code>  @property Method is a class property","text":""},{"location":"libraries/api/re/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/re/#__init__self-message-str-pattern-str","title":"<code>__init__(self, message: str = \"\", pattern: str = \"\")</code>","text":""},{"location":"libraries/api/re/#pattern-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Pattern</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/re/#fields_2","title":"Fields","text":""},{"location":"libraries/api/re/#pattern-str_1","title":"<code>pattern</code>: <code>str</code>","text":""},{"location":"libraries/api/re/#flags-int","title":"<code>flags</code>: <code>int</code>","text":""},{"location":"libraries/api/re/#compilepattern-str-flags-int-0","title":"<code>compile(pattern: str, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#searchpattern-str-string-str-flags-int-0","title":"<code>search(pattern: str, string: str, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#matchpattern-str-string-str-flags-int-0","title":"<code>match(pattern: str, string: str, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#fullmatchpattern-str-string-str-flags-int-0","title":"<code>fullmatch(pattern: str, string: str, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#finditerpattern-str-string-str-flags-int-0","title":"<code>finditer(pattern: str, string: str, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#findallpattern-str-string-str-flags-int-0","title":"<code>findall(pattern: str, string: str, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#splitpattern-str-string-str-maxsplit-int-0-flags-int-0","title":"<code>split(pattern: str, string: str, maxsplit: int = 0, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#subpattern-str-repl-string-str-count-int-0-flags-int-0","title":"<code>sub(pattern: str, repl, string: str, count: int = 0, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#subnpattern-str-repl-string-str-count-int-0-flags-int-0","title":"<code>subn(pattern: str, repl, string: str, count: int = 0, flags: int = 0)</code>","text":""},{"location":"libraries/api/re/#escapepattern-str","title":"<code>escape(pattern: str)</code>","text":""},{"location":"libraries/api/re/#purge","title":"<code>purge()</code>","text":""},{"location":"libraries/api/re/#match-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Match</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/re/#fields_3","title":"Fields","text":""},{"location":"libraries/api/re/#pos-int","title":"<code>pos</code>: <code>int</code>","text":""},{"location":"libraries/api/re/#endpos-int","title":"<code>endpos</code>: <code>int</code>","text":""},{"location":"libraries/api/re/#re-pattern","title":"<code>re</code>: <code>Pattern</code>","text":""},{"location":"libraries/api/re/#string-str","title":"<code>string</code>: <code>str</code>","text":""},{"location":"libraries/api/re/#properties_1","title":"Properties","text":""},{"location":"libraries/api/re/#lastindex-property-method-is-a-class-property","title":"<code>lastindex</code>  @property Method is a class property","text":""},{"location":"libraries/api/re/#lastgroup-property-method-is-a-class-property","title":"<code>lastgroup</code>  @property Method is a class property","text":""},{"location":"libraries/api/re/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/re/#__getitem__self-g","title":"<code>__getitem__(self, g)</code>","text":""},{"location":"libraries/api/re/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/re/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/re/#__bool__self_1","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/re/#methods","title":"Methods","text":""},{"location":"libraries/api/re/#groupself-args","title":"<code>group(self, *args)</code>","text":""},{"location":"libraries/api/re/#startself-group-0","title":"<code>start(self, group = 0)</code>","text":""},{"location":"libraries/api/re/#endself-group-0","title":"<code>end(self, group = 0)</code>","text":""},{"location":"libraries/api/re/#spanself-group-0","title":"<code>span(self, group = 0)</code>","text":""},{"location":"libraries/api/re/#expandself-template-str","title":"<code>expand(self, template: str)</code>","text":""},{"location":"libraries/api/re/#groupsself-default-optionalstr-none","title":"<code>groups(self, default: Optional[str] = None)</code>","text":""},{"location":"libraries/api/re/#groupdictself-default-optionalstr-none","title":"<code>groupdict(self, default: Optional[str] = None)</code>","text":""},{"location":"libraries/api/re/#pattern-extend-class-is-extended-to-add-given-methods","title":"<code>Pattern</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/re/#properties_2","title":"Properties","text":""},{"location":"libraries/api/re/#groups-property-method-is-a-class-property","title":"<code>groups</code>  @property Method is a class property","text":""},{"location":"libraries/api/re/#groupindex-property-method-is-a-class-property","title":"<code>groupindex</code>  @property Method is a class property","text":""},{"location":"libraries/api/re/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/re/#__bool__self_2","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/re/#methods_1","title":"Methods","text":""},{"location":"libraries/api/re/#searchself-string-str-pos-optionalint-none-endpos-optionalint-none","title":"<code>search(self, string: str, pos: Optional[int] = None, endpos: Optional[int] = None)</code>","text":""},{"location":"libraries/api/re/#matchself-string-str-pos-optionalint-none-endpos-optionalint-none","title":"<code>match(self, string: str, pos: Optional[int] = None, endpos: Optional[int] = None)</code>","text":""},{"location":"libraries/api/re/#fullmatchself-string-str-pos-optionalint-none-endpos-optionalint-none","title":"<code>fullmatch(self, string: str, pos: Optional[int] = None, endpos: Optional[int] = None)</code>","text":""},{"location":"libraries/api/re/#finditerself-string-str-pos-optionalint-none-endpos-optionalint-none","title":"<code>finditer(self, string: str, pos: Optional[int] = None, endpos: Optional[int] = None)</code>","text":""},{"location":"libraries/api/re/#findallself-string-str-pos-optionalint-none-endpos-optionalint-none","title":"<code>findall(self, string: str, pos: Optional[int] = None, endpos: Optional[int] = None)</code>","text":""},{"location":"libraries/api/re/#splitself-string-str-maxsplit-int-0","title":"<code>split(self, string: str, maxsplit: int = 0)</code>","text":""},{"location":"libraries/api/re/#subnself-repl-string-str-count-int-0","title":"<code>subn(self, repl, string: str, count: int = 0)</code>","text":""},{"location":"libraries/api/re/#subself-repl-string-str-count-int-0","title":"<code>sub(self, repl, string: str, count: int = 0)</code>","text":""},{"location":"libraries/api/sortedlist/","title":"module <code>sortedlist</code>","text":"<p>Source: <code>stdlib/sortedlist.codon</code></p>"},{"location":"libraries/api/sortedlist/#default_load_factor-1000","title":"<code>DEFAULT_LOAD_FACTOR</code> = <code>1000</code>","text":""},{"location":"libraries/api/sortedlist/#sortedlistt","title":"<code>SortedList[T]</code>","text":""},{"location":"libraries/api/sortedlist/#fields","title":"Fields","text":""},{"location":"libraries/api/sortedlist/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/sortedlist/#properties","title":"Properties","text":""},{"location":"libraries/api/sortedlist/#left-property-method-is-a-class-property","title":"<code>left</code>  @property Method is a class property","text":""},{"location":"libraries/api/sortedlist/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/sortedlist/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/sortedlist/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/sortedlist/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/sortedlist/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/sortedlist/#methods","title":"Methods","text":""},{"location":"libraries/api/sortedlist/#clearself","title":"<code>clear(self)</code>","text":"<p>Remove all values from sorted list. Runtime complexity: \\(O(n)\\)</p>"},{"location":"libraries/api/sortedlist/#addself-value-t","title":"<code>add(self, value: T)</code>","text":"<p>Add <code>value</code> to sorted list. Runtime complexity: \\(O(\\log(n))\\) (approximate).</p> <pre><code>&gt;&gt;&gt; sl = SortedList()\n&gt;&gt;&gt; sl.add(3)\n&gt;&gt;&gt; sl.add(1)\n&gt;&gt;&gt; sl.add(2)\n&gt;&gt;&gt; sl\nSortedList([1, 2, 3])\n</code></pre>"},{"location":"libraries/api/statistics/","title":"module <code>statistics</code>","text":"<p>Source: <code>stdlib/statistics.codon</code></p>"},{"location":"libraries/api/statistics/#statisticserror","title":"<code>StatisticsError</code>","text":""},{"location":"libraries/api/statistics/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/statistics/#__init__self-message-str","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/statistics/#mediandata-listt-t-type","title":"<code>median(data: List[T], T: type)</code>","text":"<p>Return the median (middle value) of numeric data.</p> <p>When the number of data points is odd, return the middle data point. When the number of data points is even, the median is interpolated by taking the average of the two middle values</p>"},{"location":"libraries/api/statistics/#median_lowdata-listt-t-type","title":"<code>median_low(data: List[T], T: type)</code>","text":"<p>Return the low median of numeric data.</p> <p>When the number of data points is odd, the middle value is returned. When it is even, the smaller of the two middle values is returned.</p>"},{"location":"libraries/api/statistics/#median_highdata-listt-t-type","title":"<code>median_high(data: List[T], T: type)</code>","text":"<p>Return the high median of data.</p> <p>When the number of data points is odd, the middle value is returned. When it is even, the larger of the two middle values is returned.</p>"},{"location":"libraries/api/statistics/#median_groupeddata-listt-interval-s-1-t-type-s-type-int","title":"<code>median_grouped(data: List[T], interval: S = 1, T: type, S: type = int)</code>","text":"<p>Return the 50th percentile (median) of grouped continuous data.</p>"},{"location":"libraries/api/statistics/#modedata-listt-t-type","title":"<code>mode(data: List[T], T: type)</code>","text":"<p>Return the most common data point from discrete or nominal data.</p>"},{"location":"libraries/api/statistics/#multimodedata-listt-t-type","title":"<code>multimode(data: List[T], T: type)</code>","text":"<p>Return a list of the most frequently occurring values.</p> <p>Will return more than one result if there are multiple modes or an empty list if data is empty.</p>"},{"location":"libraries/api/statistics/#quantilesdata-listt-n-int-4-method-str-exclusive-t-type","title":"<code>quantiles(data: List[T], n: int = 4, method: str = \"exclusive\", T: type)</code>","text":"<p>Divide data into n continuous intervals with equal probability.</p> <p>Returns a list of (n - 1) cut points separating the intervals.</p> <p>Set n to 4 for quartiles (the default).  Set n to 10 for deciles. Set n to 100 for percentiles which gives the 99 cuts points that separate data into 100 equal sized groups.</p> <p>The data can be any iterable containing sample. The cut points are linearly interpolated between data points.</p> <p>If method is set to inclusive, data is treated as population data.  The minimum value is treated as the 0th percentile and the maximum value is treated as the 100th percentile.</p>"},{"location":"libraries/api/statistics/#meandata-listfloat","title":"<code>mean(data: List[float])</code>","text":"<p>Return the sample arithmetic mean of data.</p> <p>TODO/CAVEATS   - Assumes input is floats   - Does not address NAN or INF</p>"},{"location":"libraries/api/statistics/#geometric_meandata-listfloat","title":"<code>geometric_mean(data: List[float])</code>","text":"<p>Convert data to floats and compute the geometric mean.</p> <p>Raises a StatisticsError if the input dataset is empty,</p> <p>TODO/CAVEATS:   - Assumes input is a list of floats   - Uses mean instead of fmean for now   - Does not handle data that contains a zero, or if it contains a negative value.</p>"},{"location":"libraries/api/statistics/#harmonic_meandata-listfloat","title":"<code>harmonic_mean(data: List[float])</code>","text":"<p>Return the harmonic mean of data.</p> <p>The harmonic mean, sometimes called the subcontrary mean, is the reciprocal of the arithmetic mean of the reciprocals of the data, and is often appropriate when averaging quantities which are rates or ratios.</p>"},{"location":"libraries/api/statistics/#pvariancedata-listfloat-mu-optionalfloat-none","title":"<code>pvariance(data: List[float], mu: Optional[float] = None)</code>","text":"<p>Return the population variance of <code>data</code>.</p> <p>Should contain atleast one value. The optional argument mu, if given, should be the mean of the data. If it is missing or None, the mean is automatically calculated.</p> <p>TODO/CAVEATS:   - Assumes input is a list of floats</p>"},{"location":"libraries/api/statistics/#pstdevdata-listfloat-mu-optionalfloat-none","title":"<code>pstdev(data: List[float], mu: Optional[float] = None)</code>","text":"<p>Return the square root of the population variance.</p>"},{"location":"libraries/api/statistics/#variancedata-listfloat-xbar-optionalfloat-none","title":"<code>variance(data: List[float], xbar: Optional[float] = None)</code>","text":"<p>Return the sample variance of data.</p> <p>Shoulw contain atleast two values. The optional argument xbar, if given, should be the mean of the data. If it is missing or None, the mean is automatically calculated.</p>"},{"location":"libraries/api/statistics/#stdevdata-xbar-optionalfloat-none","title":"<code>stdev(data, xbar: Optional[float] = None)</code>","text":"<p>Return the square root of the sample variance.</p>"},{"location":"libraries/api/statistics/#normaldist","title":"<code>NormalDist</code>","text":"<p>Normal distribution of a random variable</p>"},{"location":"libraries/api/statistics/#fields","title":"Fields","text":""},{"location":"libraries/api/statistics/#precision-float","title":"<code>PRECISION</code>: <code>float</code>","text":""},{"location":"libraries/api/statistics/#properties","title":"Properties","text":""},{"location":"libraries/api/statistics/#mean-property-method-is-a-class-property","title":"<code>mean</code>  @property Method is a class property","text":"<p>Arithmetic mean of the normal distribution.</p>"},{"location":"libraries/api/statistics/#median-property-method-is-a-class-property","title":"<code>median</code>  @property Method is a class property","text":"<p>Return the median of the normal distribution</p>"},{"location":"libraries/api/statistics/#mode-property-method-is-a-class-property","title":"<code>mode</code>  @property Method is a class property","text":"<p>Return the mode of the normal distribution</p> <p>The mode is the value x where which the probability density function (pdf) takes its maximum value.</p>"},{"location":"libraries/api/statistics/#stdev-property-method-is-a-class-property","title":"<code>stdev</code>  @property Method is a class property","text":"<p>Standard deviation of the normal distribution.</p>"},{"location":"libraries/api/statistics/#variance-property-method-is-a-class-property","title":"<code>variance</code>  @property Method is a class property","text":"<p>Square of the standard deviation.</p>"},{"location":"libraries/api/statistics/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/statistics/#__eq__self-other-normaldist","title":"<code>__eq__(self, other: NormalDist)</code>","text":""},{"location":"libraries/api/statistics/#__init__self-mu-sigma","title":"<code>__init__(self, mu, sigma)</code>","text":""},{"location":"libraries/api/statistics/#__init__self-mu","title":"<code>__init__(self, mu)</code>","text":""},{"location":"libraries/api/statistics/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/statistics/#__add__x1-normaldist-x2-normaldist","title":"<code>__add__(x1: NormalDist, x2: NormalDist)</code>","text":"<p>Add a constant or another NormalDist instance. If other is a constant, translate mu by the constant, leaving sigma unchanged. If other is a NormalDist, add both the means and the variances. Mathematically, this works only if the two distributions are independent or if they are jointly normally distributed.</p>"},{"location":"libraries/api/statistics/#__add__x1-normaldist-x2-float","title":"<code>__add__(x1: NormalDist, x2: float)</code>","text":"<p>Add a constant or another NormalDist instance. If other is a constant, translate mu by the constant, leaving sigma unchanged. If other is a NormalDist, add both the means and the variances. Mathematically, this works only if the two distributions are independent or if they are jointly normally distributed.</p>"},{"location":"libraries/api/statistics/#__sub__x1-normaldist-x2-normaldist","title":"<code>__sub__(x1: NormalDist, x2: NormalDist)</code>","text":"<p>Subtract a constant or another NormalDist instance. If other is a constant, translate by the constant mu, leaving sigma unchanged. If other is a NormalDist, subtract the means and add the variances. Mathematically, this works only if the two distributions are independent or if they are jointly normally distributed.</p>"},{"location":"libraries/api/statistics/#__sub__x1-normaldist-x2-float","title":"<code>__sub__(x1: NormalDist, x2: float)</code>","text":"<p>Subtract a constant or another NormalDist instance. If other is a constant, translate by the constant mu, leaving sigma unchanged. If other is a NormalDist, subtract the means and add the variances. Mathematically, this works only if the two distributions are independent or if they are jointly normally distributed.</p>"},{"location":"libraries/api/statistics/#__mul__x1-normaldist-x2-float","title":"<code>__mul__(x1: NormalDist, x2: float)</code>","text":"<p>Multiply both mu and sigma by a constant. Used for rescaling, perhaps to change measurement units. Sigma is scaled with the absolute value of the constant.</p>"},{"location":"libraries/api/statistics/#__truediv__x1-normaldist-x2-float","title":"<code>__truediv__(x1: NormalDist, x2: float)</code>","text":"<p>Divide both mu and sigma by a constant. Used for rescaling, perhaps to change measurement units. Sigma is scaled with the absolute value of the constant.</p>"},{"location":"libraries/api/statistics/#__pos__x1-normaldist","title":"<code>__pos__(x1: NormalDist)</code>","text":""},{"location":"libraries/api/statistics/#__neg__x1-normaldist","title":"<code>__neg__(x1: NormalDist)</code>","text":""},{"location":"libraries/api/statistics/#__radd__x1-normaldist-x2-float","title":"<code>__radd__(x1: NormalDist, x2: float)</code>","text":""},{"location":"libraries/api/statistics/#__rsub__x1-normaldist-x2-normaldist","title":"<code>__rsub__(x1: NormalDist, x2: NormalDist)</code>","text":""},{"location":"libraries/api/statistics/#__rmul__x1-normaldist-x2-float","title":"<code>__rmul__(x1: NormalDist, x2: float)</code>","text":""},{"location":"libraries/api/statistics/#__eq__x1-normaldist-x2-normaldist","title":"<code>__eq__(x1: NormalDist, x2: NormalDist)</code>","text":""},{"location":"libraries/api/statistics/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/statistics/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/statistics/#methods","title":"Methods","text":""},{"location":"libraries/api/statistics/#pdfself-x","title":"<code>pdf(self, x)</code>","text":"<p>Probability density function.  P(x &lt;= X &lt; x+dx) / dx</p>"},{"location":"libraries/api/statistics/#cdfself-x","title":"<code>cdf(self, x)</code>","text":"<p>Cumulative distribution function.  P(X &lt;= x)</p>"},{"location":"libraries/api/statistics/#inv_cdfself-p-float","title":"<code>inv_cdf(self, p: float)</code>","text":"<p>Inverse cumulative distribution function.  x : P(X &lt;= x) = p</p> <p>Finds the value of the random variable such that the probability of the variable being less than or equal to that value equals the given probability.</p>"},{"location":"libraries/api/statistics/#quantilesself-n-int-4","title":"<code>quantiles(self, n: int = 4)</code>","text":"<p>Divide into n continuous intervals with equal probability.</p> <p>Returns a list of (n - 1) cut points separating the intervals.</p> <p>Set n to 4 for quartiles (the default).  Set n to 10 for deciles. Set n to 100 for percentiles which gives the 99 cuts points that separate the normal distribution into 100 equal sized groups.</p>"},{"location":"libraries/api/statistics/#overlapself-other-normaldist","title":"<code>overlap(self, other: NormalDist)</code>","text":"<p>Compute the overlapping coefficient (OVL) between two normal distributions.</p> <p>Measures the agreement between two normal probability distributions. Returns a value between 0.0 and 1.0 giving the overlapping area in the two underlying probability density functions.</p>"},{"location":"libraries/api/statistics/#samplesself-n-int","title":"<code>samples(self, n: int)</code>","text":"<p>Generate n samples for a given mean and standard deviation.</p>"},{"location":"libraries/api/statistics/#from_samplesdata-listfloat","title":"<code>from_samples(data: List[float])</code>","text":"<p>Make a normal distribution instance from sample data. TODO/CAVEATS:   - Assumes input is a list of floats   - Uses mean instead of fmean for now</p>"},{"location":"libraries/api/string/","title":"module <code>string</code>","text":"<p>Source: <code>stdlib/string.codon</code></p>"},{"location":"libraries/api/string/#ascii_letters-abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz","title":"<code>ascii_letters</code> = <code>\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"</code>","text":""},{"location":"libraries/api/string/#ascii_lowercase-abcdefghijklmnopqrstuvwxyz","title":"<code>ascii_lowercase</code> = <code>\"abcdefghijklmnopqrstuvwxyz\"</code>","text":""},{"location":"libraries/api/string/#ascii_uppercase-abcdefghijklmnopqrstuvwxyz","title":"<code>ascii_uppercase</code> = <code>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</code>","text":""},{"location":"libraries/api/string/#digits-0123456789","title":"<code>digits</code> = <code>\"0123456789\"</code>","text":""},{"location":"libraries/api/string/#hexdigits-0123456789abcdefabcdef","title":"<code>hexdigits</code> = <code>\"0123456789abcdefABCDEF\"</code>","text":""},{"location":"libraries/api/string/#octdigits-01234567","title":"<code>octdigits</code> = <code>\"01234567\"</code>","text":""},{"location":"libraries/api/string/#punctuation-_","title":"<code>punctuation</code> = <code>\"!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_</code>~\"`","text":""},{"location":"libraries/api/string/#printable-0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz-_-tnrvf","title":"<code>printable</code> = <code>\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_</code>~ \\t\\n\\r\\v\\f\"`","text":""},{"location":"libraries/api/string/#whitespace-tnrvf","title":"<code>whitespace</code> = <code>\" \\t\\n\\r\\v\\f\"</code>","text":""},{"location":"libraries/api/sys/","title":"module <code>sys</code>","text":"<p>Source: <code>stdlib/sys.codon</code></p>"},{"location":"libraries/api/sys/#argv-list__argv__-len__argv__","title":"<code>argv</code> = <code>list(__argv__, len(__argv__))</code>","text":""},{"location":"libraries/api/sys/#stdin-file_cseq_stdin","title":"<code>stdin</code> = <code>File(_C.seq_stdin())</code>","text":""},{"location":"libraries/api/sys/#stdout-file_cseq_stdout","title":"<code>stdout</code> = <code>File(_C.seq_stdout())</code>","text":""},{"location":"libraries/api/sys/#stderr-file_cseq_stderr","title":"<code>stderr</code> = <code>File(_C.seq_stderr())</code>","text":""},{"location":"libraries/api/sys/#exitstatus-int-0","title":"<code>exit(status: int = 0)</code>","text":""},{"location":"libraries/api/sys/#maxsize-0x7fffffffffffffff","title":"<code>maxsize</code> = <code>0x7FFFFFFFFFFFFFFF</code>","text":""},{"location":"libraries/api/threading/","title":"module <code>threading</code>","text":"<p>Source: <code>stdlib/threading.codon</code></p>"},{"location":"libraries/api/threading/#lock-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Lock</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/threading/#fields","title":"Fields","text":""},{"location":"libraries/api/threading/#p-cobj","title":"<code>p</code>: <code>cobj</code>","text":""},{"location":"libraries/api/threading/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/threading/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/threading/#__enter__self","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/threading/#__exit__self","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/threading/#methods","title":"Methods","text":""},{"location":"libraries/api/threading/#acquireself-block-bool-true-timeout-float-10","title":"<code>acquire(self, block: bool = True, timeout: float = -1.0)</code>","text":""},{"location":"libraries/api/threading/#releaseself","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/threading/#rlock-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>RLock</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/threading/#fields_1","title":"Fields","text":""},{"location":"libraries/api/threading/#p-cobj_1","title":"<code>p</code>: <code>cobj</code>","text":""},{"location":"libraries/api/threading/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/threading/#__new___1","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/threading/#__enter__self_1","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/threading/#__exit__self_1","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/threading/#methods_1","title":"Methods","text":""},{"location":"libraries/api/threading/#acquireself-block-bool-true-timeout-float-10_1","title":"<code>acquire(self, block: bool = True, timeout: float = -1.0)</code>","text":""},{"location":"libraries/api/threading/#releaseself_1","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/threading/#active_count","title":"<code>active_count()</code>","text":""},{"location":"libraries/api/threading/#get_native_id","title":"<code>get_native_id()</code>","text":""},{"location":"libraries/api/threading/#get_ident","title":"<code>get_ident()</code>","text":""},{"location":"libraries/api/time/","title":"module <code>time</code>","text":"<p>Source: <code>stdlib/time.codon</code></p>"},{"location":"libraries/api/time/#time","title":"<code>time()</code>","text":""},{"location":"libraries/api/time/#time_ns","title":"<code>time_ns()</code>","text":""},{"location":"libraries/api/time/#monotonic","title":"<code>monotonic()</code>","text":""},{"location":"libraries/api/time/#monotonic_ns","title":"<code>monotonic_ns()</code>","text":""},{"location":"libraries/api/time/#perf_counter","title":"<code>perf_counter()</code>","text":""},{"location":"libraries/api/time/#perf_counter_ns","title":"<code>perf_counter_ns()</code>","text":""},{"location":"libraries/api/time/#sleepsecs-float","title":"<code>sleep(secs: float)</code>","text":""},{"location":"libraries/api/time/#timeinterval","title":"<code>TimeInterval</code>","text":"<p>Utility class for timing Codon code</p>"},{"location":"libraries/api/time/#fields","title":"Fields","text":""},{"location":"libraries/api/time/#start-int","title":"<code>start</code>: <code>int</code>","text":""},{"location":"libraries/api/time/#msg-str","title":"<code>msg</code>: <code>str</code>","text":""},{"location":"libraries/api/time/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/time/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/time/#__enter__self","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/time/#__exit__self","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/time/#methods","title":"Methods","text":""},{"location":"libraries/api/time/#reportself-msg-memory-false","title":"<code>report(self, msg = \"\", memory = False)</code>","text":""},{"location":"libraries/api/time/#elapsedself","title":"<code>elapsed(self)</code>","text":""},{"location":"libraries/api/time/#tickself-msg-memory-false","title":"<code>tick(self, msg, memory = False)</code>","text":""},{"location":"libraries/api/time/#timingmsg-str","title":"<code>timing(msg: str = \"\")</code>","text":"<p>Example usage:</p> <pre><code>from time import timing\nwith timing('foo function'):\n    foo()  # prints runtime of foo\n</code></pre>"},{"location":"libraries/api/time/#struct_time-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>struct_time</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/time/#properties","title":"Properties","text":""},{"location":"libraries/api/time/#tm_year-property-method-is-a-class-property","title":"<code>tm_year</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_yday-property-method-is-a-class-property","title":"<code>tm_yday</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_sec-property-method-is-a-class-property","title":"<code>tm_sec</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_min-property-method-is-a-class-property","title":"<code>tm_min</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_hour-property-method-is-a-class-property","title":"<code>tm_hour</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_mday-property-method-is-a-class-property","title":"<code>tm_mday</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_mon-property-method-is-a-class-property","title":"<code>tm_mon</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_wday-property-method-is-a-class-property","title":"<code>tm_wday</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#tm_isdst-property-method-is-a-class-property","title":"<code>tm_isdst</code>  @property Method is a class property","text":""},{"location":"libraries/api/time/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/time/#__new__year-int-0-mon-int-0-mday-int-0-hour-int-0-min-int-0-sec-int-0-wday-int-0-yday-int-0-isdst-int-0","title":"<code>__new__(year: int = 0, mon: int = 0, mday: int = 0, hour: int = 0, min: int = 0, sec: int = 0, wday: int = 0, yday: int = 0, isdst: int = 0)</code>","text":""},{"location":"libraries/api/time/#localtimesecs-int-1","title":"<code>localtime(secs: int = -1)</code>","text":""},{"location":"libraries/api/time/#gmtimesecs-int-1","title":"<code>gmtime(secs: int = -1)</code>","text":""},{"location":"libraries/api/time/#mktimet","title":"<code>mktime(t)</code>","text":""},{"location":"libraries/api/typing/","title":"module <code>typing</code>","text":"<p>Source: <code>stdlib/typing.codon</code></p>"},{"location":"libraries/api/unittest/","title":"module <code>unittest</code>","text":"<p>Source: <code>stdlib/unittest.codon</code></p>"},{"location":"libraries/api/unittest/#testcase","title":"<code>TestCase</code>","text":""},{"location":"libraries/api/unittest/#methods","title":"Methods","text":""},{"location":"libraries/api/unittest/#failself-standard_message-str-special_message-str","title":"<code>fail(self, standard_message: str, special_message: str = \"\")</code>","text":""},{"location":"libraries/api/unittest/#asserttrueself-obj-msg","title":"<code>assertTrue(self, obj, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertfalseself-obj-msg","title":"<code>assertFalse(self, obj, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertequalself-first-second-msg","title":"<code>assertEqual(self, first, second, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertnotequalself-first-second-msg","title":"<code>assertNotEqual(self, first, second, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertsequenceequalself-seq1-seq2-msg","title":"<code>assertSequenceEqual(self, seq1, seq2, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertinself-member-container-msg","title":"<code>assertIn(self, member, container, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertnotinself-member-container-msg","title":"<code>assertNotIn(self, member, container, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertisself-expr1-expr2-msg","title":"<code>assertIs(self, expr1, expr2, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertisnotself-expr1-expr2-msg","title":"<code>assertIsNot(self, expr1, expr2, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertisnotself-expr1-expr2-msg_1","title":"<code>assertIsNot(self, expr1, expr2, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertcountequalself-first-second-msg","title":"<code>assertCountEqual(self, first, second, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertlessself-a-b-msg","title":"<code>assertLess(self, a, b, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertlessequalself-a-b-msg","title":"<code>assertLessEqual(self, a, b, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertgreaterself-a-b-msg","title":"<code>assertGreater(self, a, b, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertgreaterequalself-a-b-msg","title":"<code>assertGreaterEqual(self, a, b, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertisnoneself-obj-msg","title":"<code>assertIsNone(self, obj, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertisnotnoneself-obj-msg","title":"<code>assertIsNotNone(self, obj, msg = \"\")</code>","text":""},{"location":"libraries/api/unittest/#assertraisesself-exception-type-function-args-kwargs","title":"<code>assertRaises(self, exception: type, function, *args, **kwargs)</code>","text":""},{"location":"libraries/api/unittest/#assertalmostequalself-first-second-places-int-0-msg-delta-none","title":"<code>assertAlmostEqual(self, first, second, places: int = 0, msg = \"\", delta = None)</code>","text":""},{"location":"libraries/api/algorithms/","title":"<code>algorithms</code>","text":"<ul> <li><code>heapsort</code></li> <li><code>insertionsort</code></li> <li><code>pdqsort</code></li> <li><code>qsort</code></li> <li><code>strings</code></li> <li><code>timsort</code></li> </ul>"},{"location":"libraries/api/algorithms/heapsort/","title":"module <code>algorithms.heapsort</code>","text":"<p>Source: <code>stdlib/algorithms/heapsort.codon</code></p>"},{"location":"libraries/api/algorithms/heapsort/#heap_sort_arraycollection-arrayt-size-int-keyf-callabletraitt-s-t-type-s-type","title":"<code>heap_sort_array(collection: Array[T], size: int, keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/heapsort/#heap_sort_inplacecollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>heap_sort_inplace(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/heapsort/#heap_sortcollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>heap_sort(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/insertionsort/","title":"module <code>algorithms.insertionsort</code>","text":"<p>Source: <code>stdlib/algorithms/insertionsort.codon</code></p>"},{"location":"libraries/api/algorithms/insertionsort/#insertion_sort_arraycollection-arrayt-size-int-keyf-callabletraitt-s-t-type-s-type","title":"<code>insertion_sort_array(collection: Array[T], size: int, keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/insertionsort/#insertion_sort_inplacecollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>insertion_sort_inplace(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/insertionsort/#insertion_sortcollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>insertion_sort(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/pdqsort/","title":"module <code>algorithms.pdqsort</code>","text":"<p>Source: <code>stdlib/algorithms/pdqsort.codon</code></p>"},{"location":"libraries/api/algorithms/pdqsort/#insertion_sort_threshold-24","title":"<code>INSERTION_SORT_THRESHOLD</code> = <code>24</code>","text":""},{"location":"libraries/api/algorithms/pdqsort/#ninther_threshold-128","title":"<code>NINTHER_THRESHOLD</code> = <code>128</code>","text":""},{"location":"libraries/api/algorithms/pdqsort/#partial_insertion_sort_limit-8","title":"<code>PARTIAL_INSERTION_SORT_LIMIT</code> = <code>8</code>","text":""},{"location":"libraries/api/algorithms/pdqsort/#pdq_sort_arraycollection-arrayt-size-int-keyf-callabletraitt-s-t-type-s-type","title":"<code>pdq_sort_array(collection: Array[T], size: int, keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/pdqsort/#pdq_sort_inplacecollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>pdq_sort_inplace(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/pdqsort/#pdq_sortcollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>pdq_sort(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/qsort/","title":"module <code>algorithms.qsort</code>","text":"<p>Source: <code>stdlib/algorithms/qsort.codon</code></p>"},{"location":"libraries/api/algorithms/qsort/#qsort_arraycollection-arrayt-size-int-key-callabletraitt-s-t-type-s-type","title":"<code>qsort_array(collection: Array[T], size: int, key: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/qsort/#qsort_inplacecollection-listt-key-callabletraitt-s-t-type-s-type","title":"<code>qsort_inplace(collection: List[T], key: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/qsort/#qsortcollection-listt-key-callabletraitt-s-t-type-s-type","title":"<code>qsort(collection: List[T], key: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/strings/","title":"module <code>algorithms.strings</code>","text":"<p>Source: <code>stdlib/algorithms/strings.codon</code></p>"},{"location":"libraries/api/algorithms/strings/#cttzn-uintn-n-literalint-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cttz(n: UInt[N], N: Literal[int])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i{=N} @llvm.cttz.i{=N}(i{=N}, i1)\n%0 = call i{=N} @llvm.cttz.i{=N}(i{=N} %n, i1 true)\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/algorithms/strings/#ctlzn-uintn-n-literalint-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ctlz(n: UInt[N], N: Literal[int])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i{=N} @llvm.ctlz.i{=N}(i{=N}, i1)\n%0 = call i{=N} @llvm.ctlz.i{=N}(i{=N} %n, i1 true)\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/algorithms/strings/#forward_masks-ptrbyte-n-int-needle-ptrbyte-k-int-i-int-firstb-byte-lastb-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>forward_mask(s: Ptr[byte], n: int, needle: Ptr[byte], k: int, i: int, firstb: byte, lastb: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%first0 = insertelement &lt;16 x i8&gt; undef, i8 %firstb, i64 0\n%first = shufflevector &lt;16 x i8&gt; %first0, &lt;16 x i8&gt; poison, &lt;16 x i32&gt; zeroinitializer\n%last0 = insertelement &lt;16 x i8&gt; undef, i8 %lastb, i64 0\n%last = shufflevector &lt;16 x i8&gt; %last0, &lt;16 x i8&gt; poison, &lt;16 x i32&gt; zeroinitializer\n%offset0 = add i64 %i, %k\n%offset = sub i64 %offset0, 1\n%ptr_first = getelementptr inbounds i8, ptr %s, i64 %i\n%ptr_last = getelementptr inbounds i8, ptr %s, i64 %offset\n%block_first = load &lt;16 x i8&gt;, ptr %ptr_first, align 1\n%block_last = load &lt;16 x i8&gt;, ptr %ptr_last, align 1\n%eq_first = icmp eq &lt;16 x i8&gt; %first, %block_first\n%eq_last = icmp eq &lt;16 x i8&gt; %last, %block_last\n%mask0 = and &lt;16 x i1&gt; %eq_first, %eq_last\n%mask = bitcast &lt;16 x i1&gt; %mask0 to i16\nret i16 %mask\n</code></pre>"},{"location":"libraries/api/algorithms/strings/#backward_masks-ptrbyte-n-int-needle-ptrbyte-k-int-i-int-firstb-byte-lastb-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>backward_mask(s: Ptr[byte], n: int, needle: Ptr[byte], k: int, i: int, firstb: byte, lastb: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%j0 = sub i64 %i, 16\n%j = add i64 %j0, 1\n%first0 = insertelement &lt;16 x i8&gt; undef, i8 %firstb, i64 0\n%first = shufflevector &lt;16 x i8&gt; %first0, &lt;16 x i8&gt; poison, &lt;16 x i32&gt; zeroinitializer\n%last0 = insertelement &lt;16 x i8&gt; undef, i8 %lastb, i64 0\n%last = shufflevector &lt;16 x i8&gt; %last0, &lt;16 x i8&gt; poison, &lt;16 x i32&gt; zeroinitializer\n%offset0 = sub i64 %j, %k\n%offset = add i64 %offset0, 1\n%ptr_first = getelementptr inbounds i8, ptr %s, i64 %offset\n%ptr_last = getelementptr inbounds i8, ptr %s, i64 %j\n%block_first = load &lt;16 x i8&gt;, ptr %ptr_first, align 1\n%block_last = load &lt;16 x i8&gt;, ptr %ptr_last, align 1\n%eq_first = icmp eq &lt;16 x i8&gt; %last, %block_last\n%eq_last = icmp eq &lt;16 x i8&gt; %first, %block_first\n%mask0 = and &lt;16 x i1&gt; %eq_first, %eq_last\n%mask = bitcast &lt;16 x i1&gt; %mask0 to i16\nret i16 %mask\n</code></pre>"},{"location":"libraries/api/algorithms/strings/#forward_finds-ptrbyte-n-int-needle-ptrbyte-k-int","title":"<code>forward_find(s: Ptr[byte], n: int, needle: Ptr[byte], k: int)</code>","text":""},{"location":"libraries/api/algorithms/strings/#backward_finds-ptrbyte-n-int-needle-ptrbyte-k-int","title":"<code>backward_find(s: Ptr[byte], n: int, needle: Ptr[byte], k: int)</code>","text":""},{"location":"libraries/api/algorithms/strings/#findhaystack-str-needle-str","title":"<code>find(haystack: str, needle: str)</code>","text":""},{"location":"libraries/api/algorithms/strings/#rfindhaystack-str-needle-str","title":"<code>rfind(haystack: str, needle: str)</code>","text":""},{"location":"libraries/api/algorithms/strings/#counthaystack-str-needle-str","title":"<code>count(haystack: str, needle: str)</code>","text":""},{"location":"libraries/api/algorithms/strings/#count_with_maxhaystack-str-needle-str-maxcount-int","title":"<code>count_with_max(haystack: str, needle: str, maxcount: int)</code>","text":""},{"location":"libraries/api/algorithms/timsort/","title":"module <code>algorithms.timsort</code>","text":"<p>Source: <code>stdlib/algorithms/timsort.codon</code></p>"},{"location":"libraries/api/algorithms/timsort/#block_size-64","title":"<code>BLOCK_SIZE</code> = <code>64</code>","text":""},{"location":"libraries/api/algorithms/timsort/#cacheline_size-64","title":"<code>CACHELINE_SIZE</code> = <code>64</code>","text":""},{"location":"libraries/api/algorithms/timsort/#min_gallop-7","title":"<code>MIN_GALLOP</code> = <code>7</code>","text":""},{"location":"libraries/api/algorithms/timsort/#tim_sort_arraycollection-arrayt-size-int-keyf-callabletraitt-s-t-type-s-type","title":"<code>tim_sort_array(collection: Array[T], size: int, keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/timsort/#tim_sort_inplacecollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>tim_sort_inplace(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/algorithms/timsort/#tim_sortcollection-listt-keyf-callabletraitt-s-t-type-s-type","title":"<code>tim_sort(collection: List[T], keyf: CallableTrait[T, S], T: type, S: type)</code>","text":""},{"location":"libraries/api/codon/","title":"<code>codon</code>","text":"<ul> <li><code>static</code></li> </ul>"},{"location":"libraries/api/codon/static/","title":"module <code>codon.static</code>","text":"<p>Source: <code>stdlib/codon/static.codon</code></p>"},{"location":"libraries/api/experimental/","title":"<code>experimental</code>","text":"<ul> <li><code>simd</code></li> </ul>"},{"location":"libraries/api/experimental/simd/","title":"module <code>experimental.simd</code>","text":"<p>Source: <code>stdlib/experimental/simd.codon</code></p>"},{"location":"libraries/api/experimental/simd/#vectn-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Vec[T,N]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/experimental/simd/#fields","title":"Fields","text":""},{"location":"libraries/api/experimental/simd/#zero_16x8i","title":"<code>ZERO_16x8i</code>","text":""},{"location":"libraries/api/experimental/simd/#ff_16x8i","title":"<code>FF_16x8i</code>","text":""},{"location":"libraries/api/experimental/simd/#zero_32x8i","title":"<code>ZERO_32x8i</code>","text":""},{"location":"libraries/api/experimental/simd/#ff_32x8i","title":"<code>FF_32x8i</code>","text":""},{"location":"libraries/api/experimental/simd/#zero_4x64f","title":"<code>ZERO_4x64f</code>","text":""},{"location":"libraries/api/experimental/simd/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/experimental/simd/#n-literalint","title":"<code>N</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/experimental/simd/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/experimental/simd/#__new__x-t-type-n-literalint","title":"<code>__new__(x, T: type, N: Literal[int])</code>","text":""},{"location":"libraries/api/experimental/simd/#__new__x-str-offset-int-0","title":"<code>__new__(x: str, offset: int = 0)</code>","text":""},{"location":"libraries/api/experimental/simd/#__new__x-listt-offset-int-0","title":"<code>__new__(x: List[T], offset: int = 0)</code>","text":""},{"location":"libraries/api/experimental/simd/#__new__x","title":"<code>__new__(x)</code>","text":""},{"location":"libraries/api/experimental/simd/#__eq__self-vecu8-float32-other-vecu8-float32","title":"<code>__eq__(self: Vec[u8, float32], other: Vec[u8, float32])</code>","text":""},{"location":"libraries/api/experimental/simd/#__eq__self-vecu8-tuple-other-vecu8-tuple","title":"<code>__eq__(self: Vec[u8, Tuple], other: Vec[u8, Tuple])</code>","text":""},{"location":"libraries/api/experimental/simd/#__ne__self-vecu8-float32-other-vecu8-float32","title":"<code>__ne__(self: Vec[u8, float32], other: Vec[u8, float32])</code>","text":""},{"location":"libraries/api/experimental/simd/#__ne__self-vecu8-tuple-other-vecu8-tuple","title":"<code>__ne__(self: Vec[u8, Tuple], other: Vec[u8, Tuple])</code>","text":""},{"location":"libraries/api/experimental/simd/#__eq__self-vecu8-float32-other-bool","title":"<code>__eq__(self: Vec[u8, float32], other: bool)</code>","text":""},{"location":"libraries/api/experimental/simd/#__eq__self-vecu8-tuple-other-bool","title":"<code>__eq__(self: Vec[u8, Tuple], other: bool)</code>","text":""},{"location":"libraries/api/experimental/simd/#__and__self-vecu8-float32-other-vecu8-float32","title":"<code>__and__(self: Vec[u8, float32], other: Vec[u8, float32])</code>","text":""},{"location":"libraries/api/experimental/simd/#__and__self-vecu8-tuple-other-vecu8-tuple","title":"<code>__and__(self: Vec[u8, Tuple], other: Vec[u8, Tuple])</code>","text":""},{"location":"libraries/api/experimental/simd/#__and__self-vecu64-other-vecu64","title":"<code>__and__(self: Vec[u64, ?], other: Vec[u64, ?])</code>","text":""},{"location":"libraries/api/experimental/simd/#__and__self-vecf32-unrealized_type-other-vecf32-unrealized_type","title":"<code>__and__(self: Vec[f32, unrealized_type], other: Vec[f32, unrealized_type])</code>","text":""},{"location":"libraries/api/experimental/simd/#__and__self-vecf32-float32-other-vecf32-float32","title":"<code>__and__(self: Vec[f32, float32], other: Vec[f32, float32])</code>","text":""},{"location":"libraries/api/experimental/simd/#__or__self-vecu8-float32-other-vecu8-float32","title":"<code>__or__(self: Vec[u8, float32], other: Vec[u8, float32])</code>","text":""},{"location":"libraries/api/experimental/simd/#__or__self-vecu8-tuple-other-vecu8-tuple","title":"<code>__or__(self: Vec[u8, Tuple], other: Vec[u8, Tuple])</code>","text":""},{"location":"libraries/api/experimental/simd/#__or__self-vecf32-unrealized_type-other-vecf32-unrealized_type","title":"<code>__or__(self: Vec[f32, unrealized_type], other: Vec[f32, unrealized_type])</code>","text":""},{"location":"libraries/api/experimental/simd/#__or__self-vecf32-float32-other-vecf32-float32","title":"<code>__or__(self: Vec[f32, float32], other: Vec[f32, float32])</code>","text":""},{"location":"libraries/api/experimental/simd/#__rshift__self-vecu8-float32-shift-literalint","title":"<code>__rshift__(self: Vec[u8, float32], shift: Literal[int])</code>","text":""},{"location":"libraries/api/experimental/simd/#__rshift__self-vecu8-tuple-shift-literalint","title":"<code>__rshift__(self: Vec[u8, Tuple], shift: Literal[int])</code>","text":""},{"location":"libraries/api/experimental/simd/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/experimental/simd/#__and__self-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__and__(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = and &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__and__self-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__and__(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = and &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__or__self-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__or__(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = or &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__or__self-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__or__(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = or &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__xor__self-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__xor__(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = xor &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__xor__self-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__xor__(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = xor &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__lshift__self-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lshift__(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = shl &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__lshift__self-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lshift__(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = shl &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__rshift__self-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__rshift__(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = lshr &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__rshift__self-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__rshift__(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = lshr &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__ge__self-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp uge &lt;{=N} x i64&gt; %self, %other\nret &lt;{=N} x i1&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__ge__self-vecu64-n-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self: Vec[u64, N], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x i64&gt; undef, i64 %other, i32 0\n%1 = shufflevector &lt;{=N} x i64&gt; %0, &lt;{=N} x i64&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = icmp uge &lt;{=N} x i64&gt; %self, %1\nret &lt;{=N} x i1&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__ge__self-vecf64-n-other-vecf64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self: Vec[f64, N], other: Vec[f64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fcmp oge &lt;{=N} x double&gt; %self, %other\nret &lt;{=N} x i1&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__ge__self-vecf64-n-other-f64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self: Vec[f64, N], other: f64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x double&gt; undef, double %other, i32 0\n%1 = shufflevector &lt;{=N} x double&gt; %0, &lt;{=N} x double&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = fcmp oge &lt;{=N} x double&gt; %self, %1\nret &lt;{=N} x i1&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__le__self-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ule &lt;{=N} x i64&gt; %self, %other\nret &lt;{=N} x i1&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__le__self-vecu64-n-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self: Vec[u64, N], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x i64&gt; undef, i64 %other, i32 0\n%1 = shufflevector &lt;{=N} x i64&gt; %0, &lt;{=N} x i64&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = icmp ule &lt;{=N} x i64&gt; %self, %1\nret &lt;{=N} x i1&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__neg__self-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__neg__(self: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub &lt;{=N} x {=T}&gt; zeroinitializer, %self\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__mod__self-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = urem &lt;{=N} x i64&gt; %self, %other\nret &lt;{=N} x i64&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__mod__self-vecu64-n-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(self: Vec[u64, N], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x i64&gt; undef, i64 %other, i32 0\n%1 = shufflevector &lt;{=N} x i64&gt; %0, &lt;{=N} x i64&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = urem &lt;{=N} x i64&gt; %self, %1\nret &lt;{=N} x i64&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__add__self-vect-n-other","title":"<code>__add__(self: Vec[T, N], other)</code>","text":""},{"location":"libraries/api/experimental/simd/#__sub__self-vect-n-other","title":"<code>__sub__(self: Vec[T, N], other)</code>","text":""},{"location":"libraries/api/experimental/simd/#__mul__self-vect-n-other","title":"<code>__mul__(self: Vec[T, N], other)</code>","text":""},{"location":"libraries/api/experimental/simd/#__truediv__self-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp &lt;{=N} x i64&gt; %self to &lt;{=N} x double&gt;\n%1 = uitofp &lt;{=N} x i64&gt; %other to &lt;{=N} x double&gt;\n%2 = fdiv &lt;{=N} x double&gt; %0, %1\nret &lt;{=N} x double&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__truediv__self-vecu64-other-vecu64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self: Vec[u64, ?], other: Vec[u64, ?])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp &lt;4 x i64&gt; %self to &lt;4 x double&gt;\n%1 = uitofp &lt;4 x i64&gt; %other to &lt;4 x double&gt;\n%2 = fdiv &lt;4 x double&gt; %0, %1\nret &lt;4 x double&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__truediv__self-vecu64-unrealized_type-other-vecu64-unrealized_type-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self: Vec[u64, unrealized_type], other: Vec[u64, unrealized_type])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp &lt;8 x i64&gt; %self to &lt;8 x double&gt;\n%1 = uitofp &lt;8 x i64&gt; %other to &lt;8 x double&gt;\n%2 = fdiv &lt;8 x double&gt; %0, %1\nret &lt;8 x double&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__truediv__self-vecu64-unrealized_type-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self: Vec[u64, unrealized_type], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp &lt;8 x i64&gt; %self to &lt;8 x double&gt;\n%1 = uitofp i64 %other to double\n%2 = insertelement &lt;8 x double&gt; undef, double %1, i32 0\n%3 = shufflevector &lt;8 x double&gt; %0, &lt;8 x double&gt; undef, &lt;8 x i32&gt; zeroinitializer\n%4 = fdiv &lt;8 x double&gt; %0, %3\nret &lt;8 x double&gt; %4\n</code></pre>"},{"location":"libraries/api/experimental/simd/#__getitem__self-vect-n-idx-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__getitem__(self: Vec[T, N], idx)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = extractelement &lt;{=N} x {=T}&gt; %self, i64 %idx\nret {=T} %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#methods","title":"Methods","text":""},{"location":"libraries/api/experimental/simd/#sumself-vecf32-unrealized_type-x-f32-f3200","title":"<code>sum(self: Vec[f32, unrealized_type], x: f32 = f32(0.0))</code>","text":""},{"location":"libraries/api/experimental/simd/#generic_initval-t-sls-literalint-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>generic_init(val: T, SLS: Literal[int])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=SLS} x {=T}&gt; undef, {=T} %val, i32 0\n%1 = shufflevector &lt;{=SLS} x {=T}&gt; %0, &lt;{=SLS} x {=T}&gt; undef, &lt;{=SLS} x i32&gt; zeroinitializer\nret &lt;{=SLS} x {=T}&gt; %1\n</code></pre>"},{"location":"libraries/api/experimental/simd/#generic_loaddata-ptrt-sls-literalint-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>generic_load(data: Ptr[T], SLS: Literal[int])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = bitcast T* %data to &lt;{=SLS} x {=T}&gt;*\n%1 = load &lt;{=SLS} x {=T}&gt;, &lt;{=SLS} x {=T}&gt;* %0\nret &lt;{=SLS} x {=T}&gt; %1\n</code></pre>"},{"location":"libraries/api/experimental/simd/#bit_flipself-vecu1-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>bit_flip(self: Vec[u1, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x i1&gt; undef, i1 1, i32 0\n%1 = shufflevector &lt;{=N} x i1&gt; %0, &lt;{=N} x i1&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = xor &lt;{=N} x i1&gt; %self, %1\nret &lt;{=N} x i1&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#shift_halfself-vecu128-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>shift_half(self: Vec[u128, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x i128&gt; undef, i128 64, i32 0\n%1 = shufflevector &lt;{=N} x i128&gt; %0, &lt;{=N} x i128&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = lshr &lt;{=N} x i128&gt; %self, %1\nret &lt;{=N} x i128&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#addself-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>add(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = add &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#addself-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>add(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = add &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#faddself-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fadd(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fadd &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#faddself-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fadd(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = fadd &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#subself-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sub(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#subself-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sub(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = sub &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#fsubself-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fsub(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fsub &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#fsubself-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fsub(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = fsub &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#mulself-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>mul(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = mul &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#fmulself-vect-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmul(self: Vec[T, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fmul &lt;{=N} x {=T}&gt; %self, %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#mulself-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>mul(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = mul &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#fmulself-vect-n-other-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmul(self: Vec[T, N], other: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = fmul &lt;{=N} x {=T}&gt; %self, %1\nret &lt;{=N} x {=T}&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#add_overflowself-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>add_overflow(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.uadd.with.overflow.v{=N}i64(&lt;{=N} x i64&gt;, &lt;{=N} x i64&gt;)\n%0 = call {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.uadd.with.overflow.v{=N}i64(&lt;{=N} x i64&gt; %self, &lt;{=N} x i64&gt; %other)\nret {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#add_overflowself-vecu64-n-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>add_overflow(self: Vec[u64, N], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.uadd.with.overflow.v{=N}i64(&lt;{=N} x i64&gt;, &lt;{=N} x i64&gt;)\n%0 = insertelement &lt;{=N} x i64&gt; undef, i64 %other, i32 0\n%1 = shufflevector &lt;{=N} x i64&gt; %0, &lt;{=N} x i64&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = call {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.uadd.with.overflow.v{=N}i64(&lt;{=N} x i64&gt; %self, &lt;{=N} x i64&gt; %1)\nret {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#sub_overflowself-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sub_overflow(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.usub.with.overflow.v{=N}i64(&lt;{=N} x i64&gt;, &lt;{=N} x i64&gt;)\n%0 = call {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.usub.with.overflow.v{=N}i64(&lt;{=N} x i64&gt; %self, &lt;{=N} x i64&gt; %other)\nret {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#sub_overflow_commutativeself-vecu64-n-other-u64","title":"<code>sub_overflow_commutative(self: Vec[u64, N], other: u64)</code>","text":""},{"location":"libraries/api/experimental/simd/#sub_overflowself-vecu64-n-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sub_overflow(self: Vec[u64, N], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.usub.with.overflow.v{=N}i64(&lt;{=N} x i64&gt;, &lt;{=N} x i64&gt;)\n%0 = insertelement &lt;{=N} x i64&gt; undef, i64 %other, i32 0\n%1 = shufflevector &lt;{=N} x i64&gt; %0, &lt;{=N} x i64&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = call {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} @llvm.usub.with.overflow.v{=N}i64(&lt;{=N} x i64&gt; %self, &lt;{=N} x i64&gt; %1)\nret {&lt;{=N} x i64&gt;, &lt;{=N} x i1&gt;} %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#zext_mulself-vecu64-n-other-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>zext_mul(self: Vec[u64, N], other: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext &lt;{=N} x i64&gt; %self to &lt;{=N} x i128&gt;\n%1 = zext &lt;{=N} x i64&gt; %other to &lt;{=N} x i128&gt;\n%2 = mul nuw &lt;{=N} x i128&gt; %0, %1\nret &lt;{=N} x i128&gt; %2\n</code></pre>"},{"location":"libraries/api/experimental/simd/#zext_mulself-vecu64-n-other-u64-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>zext_mul(self: Vec[u64, N], other: u64)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext &lt;{=N} x i64&gt; %self to &lt;{=N} x i128&gt;\n%1 = insertelement &lt;{=N} x i64&gt; undef, i64 %other, i32 0\n%2 = shufflevector &lt;{=N} x i64&gt; %1, &lt;{=N} x i64&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%3 = zext &lt;{=N} x i64&gt; %2 to &lt;{=N} x i128&gt;\n%4 = mul nuw &lt;{=N} x i128&gt; %0, %3\nret &lt;{=N} x i128&gt; %4\n</code></pre>"},{"location":"libraries/api/experimental/simd/#mulxself-vecu64-n-other-vecu64-n-hi-ptrvecu64-n-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>mulx(self: Vec[u64, N], other: Vec[u64, N], hi: Ptr[Vec[u64, N]])</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext &lt;{=N} x i64&gt; %self to &lt;{=N} x i128&gt;\n%1 = zext &lt;{=N} x i64&gt; %other to &lt;{=N} x i128&gt;\n%2 = mul nuw &lt;{=N} x i128&gt; %0, %1\n%3 = lshr &lt;{=N} x i128&gt; %2, &lt;i128 64, i128 64, i128 64, i128 64, i128 64, i128 64, i128 64, i128 64&gt;\n%4 = trunc &lt;{=N} x i128&gt; %3 to &lt;{=N} x i64&gt;\nstore &lt;{=N} x i64&gt; %4, &lt;{=N} x i64&gt;* %hi, align 8\n%5 = trunc &lt;{=N} x i128&gt; %2 to &lt;{=N} x i64&gt;\nret &lt;{=N} x i64&gt; %5\n</code></pre>"},{"location":"libraries/api/experimental/simd/#mulhiself-vecu64-n-other-vecu64-n","title":"<code>mulhi(self: Vec[u64, N], other: Vec[u64, N])</code>","text":""},{"location":"libraries/api/experimental/simd/#sqrtself-vecf64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt(self: Vec[f64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare &lt;{=N} x double&gt; @llvm.sqrt.v{=N}f64(&lt;{=N} x double&gt;)\n%0 = call &lt;{=N} x double&gt; @llvm.sqrt.v{=N}f64(&lt;{=N} x double&gt; %self)\nret &lt;{=N} x double&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#logself-vecf64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log(self: Vec[f64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare &lt;{=N} x double&gt; @llvm.log.v{=N}f64(&lt;{=N} x double&gt;)\n%0 = call &lt;{=N} x double&gt; @llvm.log.v{=N}f64(&lt;{=N} x double&gt; %self)\nret &lt;{=N} x double&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#cosself-vecf64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos(self: Vec[f64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare &lt;{=N} x double&gt; @llvm.cos.v{=N}f64(&lt;{=N} x double&gt;)\n%0 = call &lt;{=N} x double&gt; @llvm.cos.v{=N}f64(&lt;{=N} x double&gt; %self)\nret &lt;{=N} x double&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#fabsself-vecf64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fabs(self: Vec[f64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare &lt;{=N} x double&gt; @llvm.fabs.v{=N}f64(&lt;{=N} x double&gt;)\n%0 = call &lt;{=N} x double&gt; @llvm.fabs.v{=N}f64(&lt;{=N} x double&gt; %self)\nret &lt;{=N} x double&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#zext_doubleself-vecu64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>zext_double(self: Vec[u64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext &lt;{=N} x i64&gt; %self to &lt;{=N} x i128&gt;\nret &lt;{=N} x i128&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#trunc_halfself-vecu128-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>trunc_half(self: Vec[u128, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = trunc &lt;{=N} x i128&gt; %self to &lt;{=N} x i64&gt;\nret &lt;{=N} x i64&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#shift_trunc_halfself-vecu128-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>shift_trunc_half(self: Vec[u128, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x i128&gt; undef, i128 64, i32 0\n%1 = shufflevector &lt;{=N} x i128&gt; %0, &lt;{=N} x i128&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = lshr &lt;{=N} x i128&gt; %self, %1\n%3 = trunc &lt;{=N} x i128&gt; %2 to &lt;{=N} x i64&gt;\nret &lt;{=N} x i64&gt; %3\n</code></pre>"},{"location":"libraries/api/experimental/simd/#to_u64self-vecf64-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>to_u64(self: Vec[f64, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptoui &lt;{=N} x double&gt; %self to &lt;{=N} x i64&gt;\nret &lt;{=N} x i64&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#to_u64self-vecu1-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>to_u64(self: Vec[u1, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext &lt;{=N} x i1&gt; %self to &lt;{=N} x i64&gt;\nret &lt;{=N} x i64&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#to_floatself-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>to_float(self: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp &lt;{=N} x {=T}&gt; %self to &lt;{=N} x double&gt;\nret &lt;{=N} x double&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#sub_ifself-vect-n-other-vect-n-mask-vecu1-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sub_if(self: Vec[T, N], other: Vec[T, N], mask: Vec[u1, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub &lt;{=N} x {=T}&gt; %self, %other\n%1 = select &lt;{=N} x i1&gt; %mask, &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; %self\nret &lt;{=N} x {=T}&gt; %1\n</code></pre>"},{"location":"libraries/api/experimental/simd/#sub_ifself-vect-n-other-t-mask-vecu1-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sub_if(self: Vec[T, N], other: T, mask: Vec[u1, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertelement &lt;{=N} x {=T}&gt; undef, {=T} %other, i32 0\n%1 = shufflevector &lt;{=N} x {=T}&gt; %0, &lt;{=N} x {=T}&gt; undef, &lt;{=N} x i32&gt; zeroinitializer\n%2 = sub &lt;{=N} x {=T}&gt; %self, %1\n%3 = select &lt;{=N} x i1&gt; %mask, &lt;{=N} x {=T}&gt; %2, &lt;{=N} x {=T}&gt; %self\nret &lt;{=N} x {=T}&gt; %3\n</code></pre>"},{"location":"libraries/api/experimental/simd/#copyself-vect-n","title":"<code>copy(self: Vec[T, N])</code>","text":""},{"location":"libraries/api/experimental/simd/#maskself-vect-n-mask-vecu1-n-other-vect-n-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>mask(self: Vec[T, N], mask: Vec[u1, N], other: Vec[T, N])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = select &lt;{=N} x i1&gt; %mask, &lt;{=N} x {=T}&gt; %self, &lt;{=N} x {=T}&gt; %other\nret &lt;{=N} x {=T}&gt; %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#scatterself-vect-n","title":"<code>scatter(self: Vec[T, N])</code>","text":""},{"location":"libraries/api/experimental/simd/#u8x16-vecu8-16","title":"<code>u8x16</code> = <code>Vec[(u8, 16)]</code>","text":""},{"location":"libraries/api/experimental/simd/#u8x32-vecu8-32","title":"<code>u8x32</code> = <code>Vec[(u8, 32)]</code>","text":""},{"location":"libraries/api/experimental/simd/#f32x8-vecf32-8","title":"<code>f32x8</code> = <code>Vec[(f32, 8)]</code>","text":""},{"location":"libraries/api/experimental/simd/#bitcast_scatterptr_in-ptrvecu64-n-n-literalint-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>bitcast_scatter(ptr_in: Ptr[Vec[u64, N]], N: Literal[int])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = bitcast &lt;{=N} x i64&gt;* %ptr_in to i64*\nret i64* %0\n</code></pre>"},{"location":"libraries/api/experimental/simd/#bitcast_vectorizeptr_in-ptru64-n-literalint-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>bitcast_vectorize(ptr_in: Ptr[u64], N: Literal[int])</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = bitcast i64* %ptr_in to &lt;{=N} x i64&gt;*\nret &lt;{=N} x i64&gt;* %0\n</code></pre>"},{"location":"libraries/api/internal/","title":"<code>internal</code>","text":"<ul> <li><code>attributes</code></li> <li><code>builtin</code></li> <li><code>c_stubs</code></li> <li><code>core</code></li> <li><code>dlopen</code></li> <li><code>file</code></li> <li><code>format</code></li> <li><code>gc</code></li> <li><code>internal</code></li> <li><code>khash</code></li> <li><code>pynumerics</code></li> <li><code>python</code></li> <li><code>sort</code></li> <li><code>static</code></li> <li><code>str</code></li> <li><code>types</code></li> </ul> <p>Source: <code>stdlib/internal/__init__.codon</code></p>"},{"location":"libraries/api/internal/attributes/","title":"module <code>internal.attributes</code>","text":"<p>Source: <code>stdlib/internal/attributes.codon</code></p>"},{"location":"libraries/api/internal/attributes/#test-attribute-function-is-an-attribute","title":"<code>test()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#export-attribute-function-is-an-attribute","title":"<code>export()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#inline-attribute-function-is-an-attribute","title":"<code>inline()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#noinline-attribute-function-is-an-attribute","title":"<code>noinline()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#nonpure-attribute-function-is-an-attribute","title":"<code>nonpure()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#no_side_effect-attribute-function-is-an-attribute","title":"<code>no_side_effect()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#nocapture-attribute-function-is-an-attribute","title":"<code>nocapture()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#pycapture-attribute-function-is-an-attribute","title":"<code>pycapture()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#self_captures-attribute-function-is-an-attribute","title":"<code>self_captures()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#commutative-attribute-function-is-an-attribute","title":"<code>commutative()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#associative-attribute-function-is-an-attribute","title":"<code>associative()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#distributive-attribute-function-is-an-attribute","title":"<code>distributive()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#realize_without_self-attribute-function-is-an-attribute","title":"<code>realize_without_self()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#virtual-attribute-function-is-an-attribute","title":"<code>virtual()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#no_argument_wrap-attribute-function-is-an-attribute","title":"<code>no_argument_wrap()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/attributes/#no_arg_reorder-attribute-function-is-an-attribute","title":"<code>no_arg_reorder()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/builtin/","title":"module <code>internal.builtin</code>","text":"<p>Source: <code>stdlib/internal/builtin.codon</code></p>"},{"location":"libraries/api/internal/builtin/#object","title":"<code>object</code>","text":""},{"location":"libraries/api/internal/builtin/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/builtin/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/internal/builtin/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/builtin/#idx","title":"<code>id(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#printargs-sep-str-end-str-n-file-_cseq_stdout-flush-bool-false","title":"<code>print(*args, sep: str = \" \", end: str = \"\\n\", file = _C.seq_stdout(), flush: bool = False)</code>","text":""},{"location":"libraries/api/internal/builtin/#inputprompt-str","title":"<code>input(prompt: str = \"\")</code>","text":""},{"location":"libraries/api/internal/builtin/#minargs-key-none-default-none","title":"<code>min(*args, key = None, default = None)</code>","text":""},{"location":"libraries/api/internal/builtin/#maxargs-key-none-default-none","title":"<code>max(*args, key = None, default = None)</code>","text":""},{"location":"libraries/api/internal/builtin/#lenx","title":"<code>len(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#iterx","title":"<code>iter(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#absx","title":"<code>abs(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#hashx","title":"<code>hash(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#ords-str","title":"<code>ord(s: str)</code>","text":""},{"location":"libraries/api/internal/builtin/#divmoda-b","title":"<code>divmod(a, b)</code>","text":""},{"location":"libraries/api/internal/builtin/#chri-int","title":"<code>chr(i: int)</code>","text":""},{"location":"libraries/api/internal/builtin/#nextg-generatort-default-optionalt-none-t-type","title":"<code>next(g: Generator[T], default: Optional[T] = None, T: type)</code>","text":""},{"location":"libraries/api/internal/builtin/#anyx-generatort-t-type","title":"<code>any(x: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/internal/builtin/#allx-generatort-t-type","title":"<code>all(x: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/internal/builtin/#zipargs","title":"<code>zip(*args)</code>","text":""},{"location":"libraries/api/internal/builtin/#filterf-callabletraitt-bool-x-generatort-t-type","title":"<code>filter(f: CallableTrait[T, bool], x: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/internal/builtin/#mapf-args","title":"<code>map(f, *args)</code>","text":""},{"location":"libraries/api/internal/builtin/#enumeratex-start-int-0","title":"<code>enumerate(x, start: int = 0)</code>","text":""},{"location":"libraries/api/internal/builtin/#echox","title":"<code>echo(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#reversedx","title":"<code>reversed(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#roundx-n-0","title":"<code>round(x, n = 0)</code>","text":""},{"location":"libraries/api/internal/builtin/#sumx-start-0","title":"<code>sum(x, start = 0)</code>","text":""},{"location":"libraries/api/internal/builtin/#reprx","title":"<code>repr(x)</code>","text":""},{"location":"libraries/api/internal/builtin/#binn","title":"<code>bin(n)</code>","text":""},{"location":"libraries/api/internal/builtin/#octn","title":"<code>oct(n)</code>","text":""},{"location":"libraries/api/internal/builtin/#hexn","title":"<code>hex(n)</code>","text":""},{"location":"libraries/api/internal/builtin/#powbase-float-exp-float","title":"<code>pow(base: float, exp: float)</code>","text":""},{"location":"libraries/api/internal/builtin/#powbase-int-exp-int-mod-optionalint-none-overload-function-is-overloaded","title":"<code>pow(base: int, exp: int, mod: Optional[int] = None)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/builtin/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/builtin/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/builtin/#complex-extend-class-is-extended-to-add-given-methods","title":"<code>complex</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/builtin/#float32-extend-class-is-extended-to-add-given-methods","title":"<code>float32</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/builtin/#float16-extend-class-is-extended-to-add-given-methods","title":"<code>float16</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/builtin/#bfloat16-extend-class-is-extended-to-add-given-methods","title":"<code>bfloat16</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/builtin/#complex64-extend-class-is-extended-to-add-given-methods","title":"<code>complex64</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/c_stubs/","title":"module <code>internal.c_stubs</code>","text":"<p>Source: <code>stdlib/internal/c_stubs.codon</code></p>"},{"location":"libraries/api/internal/c_stubs/#seq_print_-str-c-function-is-external-c-function","title":"<code>seq_print(_: str)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_print_full_-str-_-cobj-c-function-is-external-c-function","title":"<code>seq_print_full(_: str, _: cobj)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_str_inta-int-fmt-str-error-ptrbool-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_str_int(a: int, fmt: str, error: Ptr[bool])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_str_uinta-int-fmt-str-error-ptrbool-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_str_uint(a: int, fmt: str, error: Ptr[bool])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_str_floata-float-fmt-str-error-ptrbool-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_str_float(a: float, fmt: str, error: Ptr[bool])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_str_stra-str-fmt-str-error-ptrbool-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_str_str(a: str, fmt: str, error: Ptr[bool])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_str_ptra-cobj-fmt-str-error-ptrbool-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_str_ptr(a: cobj, fmt: str, error: Ptr[bool])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_int_from_stra-str-b-ptrcobj-c-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_int_from_str(a: str, b: Ptr[cobj], c: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_float_from_stra-str-b-ptrcobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_float_from_str(a: str, b: Ptr[cobj])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_strdupa-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_strdup(a: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_stdin-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_stdin()</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_stdout-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_stdout()</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_stderr-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_stderr()</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_env-no_side_effect-function-has-no-side-effects-c-function-is-external-c-function","title":"<code>seq_env()</code>  @no_side_effect Function has no side effects   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_time-no_side_effect-function-has-no-side-effects-c-function-is-external-c-function","title":"<code>seq_time()</code>  @no_side_effect Function has no side effects   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_time_monotonic-no_side_effect-function-has-no-side-effects-c-function-is-external-c-function","title":"<code>seq_time_monotonic()</code>  @no_side_effect Function has no side effects   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_time_highres-no_side_effect-function-has-no-side-effects-c-function-is-external-c-function","title":"<code>seq_time_highres()</code>  @no_side_effect Function has no side effects   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_localtimea-int-b-cobj-no_side_effect-function-has-no-side-effects-c-function-is-external-c-function","title":"<code>seq_localtime(a: int, b: cobj)</code>  @no_side_effect Function has no side effects   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_gmtimea-int-b-cobj-no_side_effect-function-has-no-side-effects-c-function-is-external-c-function","title":"<code>seq_gmtime(a: int, b: cobj)</code>  @no_side_effect Function has no side effects   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_mktimea-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_mktime(a: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_sleep_-float-c-function-is-external-c-function","title":"<code>seq_sleep(_: float)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_pid-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_pid()</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_lock_new-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_lock_new()</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_lock_acquirea-cobj-b-bool-c-float-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_lock_acquire(a: cobj, b: bool, c: float)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_lock_releasea-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_lock_release(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_rlock_new-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_rlock_new()</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_rlock_acquirea-cobj-b-bool-c-float-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_rlock_acquire(a: cobj, b: bool, c: float)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_rlock_releasea-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_rlock_release(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#seq_i32_to_floata-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_i32_to_float(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#isdigita-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>isdigit(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#isspacea-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>isspace(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#isuppera-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>isupper(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#islowera-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>islower(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#touppera-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>toupper(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tolowera-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tolower(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#isalnuma-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>isalnum(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#isalphaa-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>isalpha(a: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#ceila-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>ceil(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#floora-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>floor(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fabsa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>fabs(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fmoda-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>fmod(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#expa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>exp(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#expm1a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>expm1(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#ldexpa-float-b-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>ldexp(a: float, b: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#loga-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#log10a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log10(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#sqrta-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>sqrt(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#cbrta-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>cbrt(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#powa-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>pow(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#rounda-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>round(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#nextaftera-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>nextafter(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#acosa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>acos(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#asina-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>asin(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atana-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atan(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atan2a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atan2(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#cosa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>cos(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#sina-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>sin(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tana-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tan(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#cosha-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>cosh(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#sinha-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>sinh(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tanha-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tanh(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#acosha-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>acosh(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#asinha-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>asinh(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atanha-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atanh(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#copysigna-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>copysign(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#log1pa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log1p(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#trunca-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>trunc(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#log2a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log2(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#erfa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>erf(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#erfca-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>erfc(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tgammaa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tgamma(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#lgammaa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>lgamma(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#remaindera-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>remainder(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#hypota-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>hypot(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#frexpa-float-b-ptrinttuple-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>frexp(a: float, b: Ptr[Int[Tuple]])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#modfa-float-b-ptrfloat-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>modf(a: float, b: Ptr[float])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#ceilfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>ceilf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#floorfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>floorf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fabsfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>fabsf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fmodfa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>fmodf(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#expfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>expf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#expm1fa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>expm1f(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#ldexpfa-float32-b-i32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>ldexpf(a: float32, b: i32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#logfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>logf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#log2fa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log2f(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#log10fa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log10f(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#sqrtfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>sqrtf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#cbrtfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>cbrtf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#powfa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>powf(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#roundfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>roundf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#nextafterfa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>nextafterf(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#acosfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>acosf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#asinfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>asinf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atanfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atanf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atan2fa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atan2f(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#cosfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>cosf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#sinfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>sinf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tanfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tanf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#coshfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>coshf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#sinhfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>sinhf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tanhfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tanhf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#acoshfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>acoshf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#asinhfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>asinhf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atanhfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atanhf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#copysignfa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>copysignf(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#log1pfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>log1pf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#truncfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>truncf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#erffa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>erff(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#erfcfa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>erfcf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#tgammafa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>tgammaf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#lgammafa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>lgammaf(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#remainderfa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>remainderf(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#hypotfa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>hypotf(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#frexpfa-float32-b-ptrinttuple-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>frexpf(a: float32, b: Ptr[Int[Tuple]])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#modffa-float32-b-ptrfloat32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>modff(a: float32, b: Ptr[float32])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#ferrora-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>ferror(a: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fgetca-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fgetc(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fopena-cobj-b-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fopen(a: cobj, b: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fdopena-int-b-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fdopen(a: int, b: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fclosea-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fclose(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#freada-cobj-b-int-c-int-d-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fread(a: cobj, b: int, c: int, d: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fwritea-cobj-b-int-c-int-d-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fwrite(a: cobj, b: int, c: int, d: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#ftella-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>ftell(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fseeka-cobj-b-int-c-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fseek(a: cobj, b: int, c: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fgetsa-cobj-b-int-c-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fgets(a: cobj, b: int, c: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#fflusha-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>fflush(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#getlinea-ptrcobj-b-ptrint-c-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>getline(a: Ptr[cobj], b: Ptr[int], c: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#exit_-int-c-function-is-external-c-function","title":"<code>exit(_: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#systema-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>system(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#freea-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>free(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#atoia-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>atoi(a: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzopena-cobj-b-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzopen(a: cobj, b: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzerrora-cobj-b-ptri32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzerror(a: cobj, b: Ptr[i32])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzgetca-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzgetc(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzgetsa-cobj-b-cobj-c-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzgets(a: cobj, b: cobj, c: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzclosea-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzclose(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzreada-cobj-b-cobj-c-u32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzread(a: cobj, b: cobj, c: u32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzwritea-cobj-b-cobj-c-u32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzwrite(a: cobj, b: cobj, c: u32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gztella-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gztell(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzseeka-cobj-b-int-c-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzseek(a: cobj, b: int, c: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#gzflusha-cobj-b-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>gzflush(a: cobj, b: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#bz2_bzopena-cobj-b-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>BZ2_bzopen(a: cobj, b: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#bz2_bzreada-cobj-b-cobj-c-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>BZ2_bzread(a: cobj, b: cobj, c: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#bz2_bzwritea-cobj-b-cobj-c-i32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>BZ2_bzwrite(a: cobj, b: cobj, c: i32)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#bz2_bzflusha-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>BZ2_bzflush(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#bz2_bzclosea-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>BZ2_bzclose(a: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#bz2_bzerrora-cobj-b-ptri32-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>BZ2_bzerror(a: cobj, b: Ptr[i32])</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#memcmplhs-ptrbyte-rhs-ptrbyte-count-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>memcmp(lhs: Ptr[byte], rhs: Ptr[byte], count: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/c_stubs/#memchrp-ptrbyte-ch-i32-count-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>memchr(p: Ptr[byte], ch: i32, count: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/core/","title":"module <code>internal.core</code>","text":"<p>Source: <code>stdlib/internal/core.codon</code></p>"},{"location":"libraries/api/internal/core/#typet-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>type[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#unrealized_typet-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>unrealized_type[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_1","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#typewrapt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>TypeWrap[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_2","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_2","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#bool-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>bool</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#byte-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>byte</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#int-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>int</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_3","title":"Fields","text":""},{"location":"libraries/api/internal/core/#max","title":"<code>MAX</code>","text":""},{"location":"libraries/api/internal/core/#float-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>float</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_4","title":"Fields","text":""},{"location":"libraries/api/internal/core/#min_10_exp","title":"<code>MIN_10_EXP</code>","text":""},{"location":"libraries/api/internal/core/#float32-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>float32</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_5","title":"Fields","text":""},{"location":"libraries/api/internal/core/#min_10_exp_1","title":"<code>MIN_10_EXP</code>","text":""},{"location":"libraries/api/internal/core/#float16-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>float16</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_6","title":"Fields","text":""},{"location":"libraries/api/internal/core/#min_10_exp_2","title":"<code>MIN_10_EXP</code>","text":""},{"location":"libraries/api/internal/core/#bfloat16-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>bfloat16</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_7","title":"Fields","text":""},{"location":"libraries/api/internal/core/#min_10_exp_3","title":"<code>MIN_10_EXP</code>","text":""},{"location":"libraries/api/internal/core/#float128-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>float128</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_8","title":"Fields","text":""},{"location":"libraries/api/internal/core/#min_10_exp_4","title":"<code>MIN_10_EXP</code>","text":""},{"location":"libraries/api/internal/core/#functionttr-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Function[T,TR]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_9","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_3","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#tr-type","title":"<code>TR</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#callabletraitttr-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>CallableTrait[T,TR]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_10","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_4","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#tr-type_1","title":"<code>TR</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#nonetype-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>NoneType</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#ptrt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Ptr[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_11","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_5","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#cobj-ptrbyte","title":"<code>cobj</code> = <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/core/#capsulet-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Capsule[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_12","title":"Fields","text":""},{"location":"libraries/api/internal/core/#val-ptrt","title":"<code>val</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/internal/core/#t-type_6","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#generatort-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Generator[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_13","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_7","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#optionalt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Optional[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_14","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_8","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#intn-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Int[N]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_15","title":"Fields","text":""},{"location":"libraries/api/internal/core/#n-literalint","title":"<code>N</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/internal/core/#uintn-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>UInt[N]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_16","title":"Fields","text":""},{"location":"libraries/api/internal/core/#n-literalint_1","title":"<code>N</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/internal/core/#pyobj","title":"<code>pyobj</code>","text":""},{"location":"libraries/api/internal/core/#fields_17","title":"Fields","text":""},{"location":"libraries/api/internal/core/#p-ptrbyte","title":"<code>p</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/core/#str-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>str</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_18","title":"Fields","text":""},{"location":"libraries/api/internal/core/#ptr-ptrbyte","title":"<code>ptr</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/core/#len-int","title":"<code>len</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/core/#tuple-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Tuple</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__()</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret {} {}\n</code></pre>"},{"location":"libraries/api/internal/core/#__add__self-__self__-obj-__self__-type","title":"<code>__add__(self: __SELF__, obj, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__mul__self-__self__-n-literalint-__self__-type","title":"<code>__mul__(self: __SELF__, n: Literal[int], __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__contains__self-__self__-obj-__self__-type","title":"<code>__contains__(self: __SELF__, obj, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__getitem__self-__self__-idx-int-__self__-type","title":"<code>__getitem__(self: __SELF__, idx: int, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__iter__self-__self__-__self__-type","title":"<code>__iter__(self: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__hash__self-__self__-__self__-type","title":"<code>__hash__(self: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__repr__self-__self__-__self__-type","title":"<code>__repr__(self: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__len__self-__self__-__self__-type","title":"<code>__len__(self: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__eq__self-__self__-obj-__self__-__self__-type","title":"<code>__eq__(self: __SELF__, obj: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__ne__self-__self__-obj-__self__-__self__-type","title":"<code>__ne__(self: __SELF__, obj: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__gt__self-__self__-obj-__self__-__self__-type","title":"<code>__gt__(self: __SELF__, obj: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__ge__self-__self__-obj-__self__-__self__-type","title":"<code>__ge__(self: __SELF__, obj: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__lt__self-__self__-obj-__self__-__self__-type","title":"<code>__lt__(self: __SELF__, obj: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__le__self-__self__-obj-__self__-__self__-type","title":"<code>__le__(self: __SELF__, obj: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__pickle__self-__self__-dest-ptrbyte-__self__-type","title":"<code>__pickle__(self: __SELF__, dest: Ptr[byte], __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__unpickle__src-ptrbyte-__self__-type","title":"<code>__unpickle__(src: Ptr[byte], __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__to_py__self-__self__-__self__-type","title":"<code>__to_py__(self: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__from_py__src-ptrbyte-__self__-type","title":"<code>__from_py__(src: Ptr[byte], __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__to_gpu__self-__self__-cache-__self__-type","title":"<code>__to_gpu__(self: __SELF__, cache, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__from_gpu__self-__self__-other-__self__-__self__-type","title":"<code>__from_gpu__(self: __SELF__, other: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__from_gpu_new__other-__self__-__self__-type","title":"<code>__from_gpu_new__(other: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#__tuplesize__self-__self__-__self__-type","title":"<code>__tuplesize__(self: __SELF__, __SELF__: type)</code>","text":""},{"location":"libraries/api/internal/core/#tuple-tuple","title":"<code>tuple</code> = <code>Tuple</code>","text":""},{"location":"libraries/api/internal/core/#pure-attribute-function-is-an-attribute","title":"<code>pure()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/core/#derives-attribute-function-is-an-attribute","title":"<code>derives()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/core/#nonetype-extend-class-is-extended-to-add-given-methods","title":"<code>NoneType</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/core/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__()</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret {} {}\n</code></pre>"},{"location":"libraries/api/internal/core/#arrayt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Array[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_19","title":"Fields","text":""},{"location":"libraries/api/internal/core/#len-int_1","title":"<code>len</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/core/#ptr-ptrt","title":"<code>ptr</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/internal/core/#t-type_9","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#typet-extend-class-is-extended-to-add-given-methods","title":"<code>type[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/core/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__obj","title":"<code>__new__(obj)</code>","text":""},{"location":"libraries/api/internal/core/#function-function","title":"<code>function</code> = <code>Function</code>","text":""},{"location":"libraries/api/internal/core/#uniontu-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Union[TU]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_20","title":"Fields","text":""},{"location":"libraries/api/internal/core/#tu-type","title":"<code>TU</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__val","title":"<code>__new__(val)</code>","text":""},{"location":"libraries/api/internal/core/#__call__self-args-kwargs","title":"<code>__call__(self, *args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/core/#functionttr-extend-class-is-extended-to-add-given-methods","title":"<code>Function[T,TR]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/core/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__new__()</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr null\n</code></pre>"},{"location":"libraries/api/internal/core/#typetraitt","title":"<code>TypeTrait[T]</code>","text":""},{"location":"libraries/api/internal/core/#fields_21","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_10","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#byval","title":"<code>ByVal</code>","text":""},{"location":"libraries/api/internal/core/#byref","title":"<code>ByRef</code>","text":""},{"location":"libraries/api/internal/core/#classvart","title":"<code>ClassVar[T]</code>","text":""},{"location":"libraries/api/internal/core/#fields_22","title":"Fields","text":""},{"location":"libraries/api/internal/core/#t-type_11","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#rtti","title":"<code>RTTI</code>","text":""},{"location":"libraries/api/internal/core/#fields_23","title":"Fields","text":""},{"location":"libraries/api/internal/core/#id-int","title":"<code>id</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/core/#ellipsis-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>ellipsis</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir_2","title":"<code>__new__()</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret {} {}\n</code></pre>"},{"location":"libraries/api/internal/core/#ellipsis-ellipsis","title":"<code>Ellipsis</code> = <code>ellipsis()</code>","text":""},{"location":"libraries/api/internal/core/#importfilename-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Import[file,name]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_24","title":"Fields","text":""},{"location":"libraries/api/internal/core/#loaded-bool","title":"<code>loaded</code>: <code>bool</code>","text":""},{"location":"libraries/api/internal/core/#file-literalstr","title":"<code>file</code>: <code>Literal[str]</code>","text":""},{"location":"libraries/api/internal/core/#name-literalstr","title":"<code>name</code>: <code>Literal[str]</code>","text":""},{"location":"libraries/api/internal/core/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__loaded-bool-file-literalstr-name-literalstr-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(loaded: bool, file: Literal[str], name: Literal[str])</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertvalue { {=bool} } undef, {=bool} %loaded, 0\nret { {=bool} } %0\n</code></pre>"},{"location":"libraries/api/internal/core/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/core/#compile_errormsg-literalstr","title":"<code>compile_error(msg: Literal[str])</code>","text":""},{"location":"libraries/api/internal/core/#isinstanceobj-what","title":"<code>isinstance(obj, what)</code>","text":""},{"location":"libraries/api/internal/core/#overload-attribute-function-is-an-attribute","title":"<code>overload()</code>  @attribute Function is an attribute","text":""},{"location":"libraries/api/internal/core/#hasattrobj-attr-literalstr-args-kwargs","title":"<code>hasattr(obj, attr: Literal[str], *args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/core/#getattrobj-attr-literalstr","title":"<code>getattr(obj, attr: Literal[str])</code>","text":""},{"location":"libraries/api/internal/core/#setattrobj-attr-literalstr-what","title":"<code>setattr(obj, attr: Literal[str], what)</code>","text":""},{"location":"libraries/api/internal/core/#super__t__-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Super[__T__]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#super","title":"<code>super()</code>","text":""},{"location":"libraries/api/internal/core/#superfargs","title":"<code>superf(*args)</code>","text":"<p>Special handling</p>"},{"location":"libraries/api/internal/core/#namedtuplent-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>NamedTuple[N,T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_25","title":"Fields","text":""},{"location":"libraries/api/internal/core/#args-t","title":"<code>args</code>: <code>T</code>","text":""},{"location":"libraries/api/internal/core/#n-literalint_2","title":"<code>N</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/internal/core/#t-type_12","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__args-t-n-literalint-0-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(args: T = (), N: Literal[int] = 0, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertvalue { {=T} } undef, {=T} %args, 0\nret { {=T} } %0\n</code></pre>"},{"location":"libraries/api/internal/core/#__getitem__self-key-literalstr","title":"<code>__getitem__(self, key: Literal[str])</code>","text":""},{"location":"libraries/api/internal/core/#__contains__self-key-literalstr","title":"<code>__contains__(self, key: Literal[str])</code>","text":""},{"location":"libraries/api/internal/core/#__keys__self","title":"<code>__keys__(self)</code>","text":""},{"location":"libraries/api/internal/core/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/core/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/core/#getself-key-literalstr-default-nonetype","title":"<code>get(self, key: Literal[str], default = NoneType())</code>","text":""},{"location":"libraries/api/internal/core/#partialmtkf-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Partial[M,T,K,F]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_26","title":"Fields","text":""},{"location":"libraries/api/internal/core/#args-t_1","title":"<code>args</code>: <code>T</code>","text":""},{"location":"libraries/api/internal/core/#kwargs-k","title":"<code>kwargs</code>: <code>K</code>","text":""},{"location":"libraries/api/internal/core/#m-literalstr","title":"<code>M</code>: <code>Literal[str]</code>","text":""},{"location":"libraries/api/internal/core/#t-type_13","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#k-type","title":"<code>K</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#f-type","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#properties","title":"Properties","text":""},{"location":"libraries/api/internal/core/#__fn_name__-property-method-is-a-class-property","title":"<code>__fn_name__</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/core/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/internal/core/#__new__args-t-kwargs-k-m-literalstr-f-type-t-type-k-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(args: T, kwargs: K, M: Literal[str], F: type, T: type, K: type)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertvalue { {=T}, {=K} } undef, {=T} %args, 0\n%1 = insertvalue { {=T}, {=K} } %0, {=K} %kwargs, 1\nret { {=T}, {=K} } %1\n</code></pre>"},{"location":"libraries/api/internal/core/#__repr__self_2","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/core/#__call__self-args-kwargs_1","title":"<code>__call__(self, *args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/core/#__fn_name__self-property-method-is-a-class-property","title":"<code>__fn_name__(self)</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/core/#__raw__self","title":"<code>__raw__(self)</code>","text":""},{"location":"libraries/api/internal/core/#callablettr-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Callable[T,TR]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/core/#fields_27","title":"Fields","text":""},{"location":"libraries/api/internal/core/#fn-functionptrbyte-t-tr","title":"<code>fn</code>: <code>Function[Ptr[byte], T, TR]</code>","text":""},{"location":"libraries/api/internal/core/#data-ptrbyte","title":"<code>data</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/core/#t-type_14","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/core/#tr-type_2","title":"<code>TR</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/dlopen/","title":"module <code>internal.dlopen</code>","text":"<p>Source: <code>stdlib/internal/dlopen.codon</code></p>"},{"location":"libraries/api/internal/dlopen/#c_dlerror-c-function-is-external-c-function","title":"<code>c_dlerror()</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/dlopen/#c_dlopen_-cobj-_-int-c-function-is-external-c-function","title":"<code>c_dlopen(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/dlopen/#c_dlsym_-cobj-_-cobj-c-function-is-external-c-function","title":"<code>c_dlsym(_: cobj, _: cobj)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/dlopen/#c_dlclose_-cobj-c-function-is-external-c-function","title":"<code>c_dlclose(_: cobj)</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/dlopen/#rtld_now-literalint-2","title":"<code>RTLD_NOW</code>: <code>Literal[int]</code> = <code>2</code>","text":""},{"location":"libraries/api/internal/dlopen/#rtld_global-literalint-8-if-__apple__-else-256","title":"<code>RTLD_GLOBAL</code>: <code>Literal[int]</code> = <code>(8 if __apple__ else 256)</code>","text":""},{"location":"libraries/api/internal/dlopen/#rtld_local-literalint-0-if-__apple__-else-256","title":"<code>RTLD_LOCAL</code>: <code>Literal[int]</code> = <code>(0 if __apple__ else 256)</code>","text":""},{"location":"libraries/api/internal/dlopen/#dlext","title":"<code>dlext()</code>","text":""},{"location":"libraries/api/internal/dlopen/#dlerror-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs","title":"<code>dlerror()</code>  @pure Function has no side effects and returns same value for same inputs","text":""},{"location":"libraries/api/internal/dlopen/#dlopenname-str-flag-int-rtld_now-rtld_global","title":"<code>dlopen(name: str, flag: int = (RTLD_NOW | RTLD_GLOBAL))</code>","text":""},{"location":"libraries/api/internal/dlopen/#dlsymlib-name-str-fn-type","title":"<code>dlsym(lib, name: str, Fn: type)</code>","text":""},{"location":"libraries/api/internal/dlopen/#dlclosehandle-cobj","title":"<code>dlclose(handle: cobj)</code>","text":""},{"location":"libraries/api/internal/file/","title":"module <code>internal.file</code>","text":"<p>Source: <code>stdlib/internal/file.codon</code></p>"},{"location":"libraries/api/internal/file/#file","title":"<code>File</code>","text":""},{"location":"libraries/api/internal/file/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/file/#sz-int","title":"<code>sz</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/file/#buf-ptrbyte","title":"<code>buf</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/file/#fp-cobj","title":"<code>fp</code>: <code>cobj</code>","text":""},{"location":"libraries/api/internal/file/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/file/#__init__self-fp-cobj","title":"<code>__init__(self, fp: cobj)</code>","text":""},{"location":"libraries/api/internal/file/#__init__self-path-str-mode-str","title":"<code>__init__(self, path: str, mode: str)</code>","text":""},{"location":"libraries/api/internal/file/#__init__self-fd-int-mode-str","title":"<code>__init__(self, fd: int, mode: str)</code>","text":""},{"location":"libraries/api/internal/file/#__enter__self","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__exit__self","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__file_write_gen__self-g-generatort-t-type","title":"<code>__file_write_gen__(self, g: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/internal/file/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/file/#readlinesself","title":"<code>readlines(self)</code>","text":""},{"location":"libraries/api/internal/file/#writeself-s-str","title":"<code>write(self, s: str)</code>","text":""},{"location":"libraries/api/internal/file/#readself-sz-int-1","title":"<code>read(self, sz: int = -1)</code>","text":""},{"location":"libraries/api/internal/file/#tellself","title":"<code>tell(self)</code>","text":""},{"location":"libraries/api/internal/file/#seekself-offset-int-whence-int","title":"<code>seek(self, offset: int, whence: int)</code>","text":""},{"location":"libraries/api/internal/file/#flushself","title":"<code>flush(self)</code>","text":""},{"location":"libraries/api/internal/file/#closeself","title":"<code>close(self)</code>","text":""},{"location":"libraries/api/internal/file/#gzfile","title":"<code>gzFile</code>","text":""},{"location":"libraries/api/internal/file/#fields_1","title":"Fields","text":""},{"location":"libraries/api/internal/file/#sz-int_1","title":"<code>sz</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/file/#buf-ptrbyte_1","title":"<code>buf</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/file/#fp-cobj_1","title":"<code>fp</code>: <code>cobj</code>","text":""},{"location":"libraries/api/internal/file/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/file/#__init__self-fp-cobj_1","title":"<code>__init__(self, fp: cobj)</code>","text":""},{"location":"libraries/api/internal/file/#__init__self-path-str-mode-str_1","title":"<code>__init__(self, path: str, mode: str)</code>","text":""},{"location":"libraries/api/internal/file/#__iter__self_1","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__enter__self_1","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__exit__self_1","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__file_write_gen__self-g-generatort-t-type_1","title":"<code>__file_write_gen__(self, g: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/internal/file/#methods_1","title":"Methods","text":""},{"location":"libraries/api/internal/file/#closeself_1","title":"<code>close(self)</code>","text":""},{"location":"libraries/api/internal/file/#readlinesself_1","title":"<code>readlines(self)</code>","text":""},{"location":"libraries/api/internal/file/#writeself-s-str_1","title":"<code>write(self, s: str)</code>","text":""},{"location":"libraries/api/internal/file/#readself-sz-int-1_1","title":"<code>read(self, sz: int = -1)</code>","text":""},{"location":"libraries/api/internal/file/#tellself_1","title":"<code>tell(self)</code>","text":""},{"location":"libraries/api/internal/file/#seekself-offset-int-whence-int_1","title":"<code>seek(self, offset: int, whence: int)</code>","text":""},{"location":"libraries/api/internal/file/#flushself_1","title":"<code>flush(self)</code>","text":""},{"location":"libraries/api/internal/file/#bzfile","title":"<code>bzFile</code>","text":""},{"location":"libraries/api/internal/file/#fields_2","title":"Fields","text":""},{"location":"libraries/api/internal/file/#sz-int_2","title":"<code>sz</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/file/#buf-ptrbyte_2","title":"<code>buf</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/file/#fp-cobj_2","title":"<code>fp</code>: <code>cobj</code>","text":""},{"location":"libraries/api/internal/file/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/file/#__init__self-fp-cobj_2","title":"<code>__init__(self, fp: cobj)</code>","text":""},{"location":"libraries/api/internal/file/#__init__self-path-str-mode-str_2","title":"<code>__init__(self, path: str, mode: str)</code>","text":""},{"location":"libraries/api/internal/file/#__iter__self_2","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__enter__self_2","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__exit__self_2","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/internal/file/#__file_write_gen__self-g-generatort-t-type_2","title":"<code>__file_write_gen__(self, g: Generator[T], T: type)</code>","text":""},{"location":"libraries/api/internal/file/#methods_2","title":"Methods","text":""},{"location":"libraries/api/internal/file/#closeself_2","title":"<code>close(self)</code>","text":""},{"location":"libraries/api/internal/file/#readlinesself_2","title":"<code>readlines(self)</code>","text":""},{"location":"libraries/api/internal/file/#writeself-s-str_2","title":"<code>write(self, s: str)</code>","text":""},{"location":"libraries/api/internal/file/#readself-sz-int-1_2","title":"<code>read(self, sz: int = -1)</code>","text":""},{"location":"libraries/api/internal/file/#flushself_2","title":"<code>flush(self)</code>","text":""},{"location":"libraries/api/internal/file/#openpath-mode-str-r","title":"<code>open(path, mode: str = \"r\")</code>","text":""},{"location":"libraries/api/internal/file/#gzopenpath-str-mode-str-r","title":"<code>gzopen(path: str, mode: str = \"r\")</code>","text":""},{"location":"libraries/api/internal/file/#bzopenpath-str-mode-str-r","title":"<code>bzopen(path: str, mode: str = \"r\")</code>","text":""},{"location":"libraries/api/internal/file/#is_binarypath-str","title":"<code>is_binary(path: str)</code>","text":""},{"location":"libraries/api/internal/format/","title":"module <code>internal.format</code>","text":"<p>Source: <code>stdlib/internal/format.codon</code></p>"},{"location":"libraries/api/internal/format/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__format__self-format_spec-str","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/format/#intn-extend-class-is-extended-to-add-given-methods","title":"<code>Int[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__format__self-format_spec-str_1","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/format/#uintn-extend-class-is-extended-to-add-given-methods","title":"<code>UInt[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__format__self-format_spec-str_2","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/format/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__format__self-format_spec-str_3","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/format/#str-extend-class-is-extended-to-add-given-methods","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__format__self-format_spec-str_4","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/format/#ptrt-extend-class-is-extended-to-add-given-methods","title":"<code>Ptr[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__format__self-format_spec-str_5","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/format/#intn-extend-class-is-extended-to-add-given-methods_1","title":"<code>Int[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/format/#uintn-extend-class-is-extended-to-add-given-methods_1","title":"<code>UInt[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/format/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/internal/format/#__str__self_1","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/gc/","title":"module <code>internal.gc</code>","text":"<p>Source: <code>stdlib/internal/gc.codon</code></p>"},{"location":"libraries/api/internal/gc/#seq_alloca-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_alloc(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_alloc_atomica-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_alloc_atomic(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_alloc_uncollectablea-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_alloc_uncollectable(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_alloc_atomic_uncollectablea-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>seq_alloc_atomic_uncollectable(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_reallocp-cobj-newsize-int-oldsize-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-derives-function-return-value-captures-arguments-c-function-is-external-c-function","title":"<code>seq_realloc(p: cobj, newsize: int, oldsize: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @derives Function return value captures arguments   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_freep-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_free(p: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_register_finalizerp-cobj-f-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_register_finalizer(p: cobj, f: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_gc_add_rootsp-cobj-q-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_gc_add_roots(p: cobj, q: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_gc_remove_rootsp-cobj-q-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_gc_remove_roots(p: cobj, q: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_gc_clear_roots-c-function-is-external-c-function","title":"<code>seq_gc_clear_roots()</code>  @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#seq_gc_exclude_static_rootsp-cobj-q-cobj-nocapture-function-does-not-capture-arguments-return-value-might-capture-c-function-is-external-c-function","title":"<code>seq_gc_exclude_static_roots(p: cobj, q: cobj)</code>  @nocapture Function does not capture arguments (return value might capture)   @C Function is external C function","text":""},{"location":"libraries/api/internal/gc/#sizeoft-type","title":"<code>sizeof(T: type)</code>","text":""},{"location":"libraries/api/internal/gc/#atomict-type","title":"<code>atomic(T: type)</code>","text":""},{"location":"libraries/api/internal/gc/#allocsz-int","title":"<code>alloc(sz: int)</code>","text":""},{"location":"libraries/api/internal/gc/#alloc_atomicsz-int","title":"<code>alloc_atomic(sz: int)</code>","text":""},{"location":"libraries/api/internal/gc/#alloc_uncollectablesz-int","title":"<code>alloc_uncollectable(sz: int)</code>","text":""},{"location":"libraries/api/internal/gc/#alloc_atomic_uncollectablesz-int","title":"<code>alloc_atomic_uncollectable(sz: int)</code>","text":""},{"location":"libraries/api/internal/gc/#reallocp-cobj-newsz-int-oldsz-int","title":"<code>realloc(p: cobj, newsz: int, oldsz: int)</code>","text":""},{"location":"libraries/api/internal/gc/#freep-cobj","title":"<code>free(p: cobj)</code>","text":""},{"location":"libraries/api/internal/gc/#add_rootsstart-cobj-end-cobj","title":"<code>add_roots(start: cobj, end: cobj)</code>","text":""},{"location":"libraries/api/internal/gc/#remove_rootsstart-cobj-end-cobj","title":"<code>remove_roots(start: cobj, end: cobj)</code>","text":""},{"location":"libraries/api/internal/gc/#clear_roots","title":"<code>clear_roots()</code>","text":""},{"location":"libraries/api/internal/gc/#exclude_static_rootsstart-cobj-end-cobj","title":"<code>exclude_static_roots(start: cobj, end: cobj)</code>","text":""},{"location":"libraries/api/internal/gc/#register_finalizerp","title":"<code>register_finalizer(p)</code>","text":""},{"location":"libraries/api/internal/gc/#construct_refargs-t-type","title":"<code>construct_ref(args, T: type)</code>","text":""},{"location":"libraries/api/internal/internal/","title":"module <code>internal.internal</code>","text":"<p>Source: <code>stdlib/internal/internal.codon</code></p>"},{"location":"libraries/api/internal/internal/#functionttr-extend-class-is-extended-to-add-given-methods","title":"<code>Function[T,TR]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__new__what-ptrbyte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(what: Ptr[byte])</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %what\n</code></pre>"},{"location":"libraries/api/internal/internal/#__new__what-functiont-tr-overload-function-is-overloaded","title":"<code>__new__(what: Function[T, TR])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/internal/#__raw__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__raw__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %self\n</code></pre>"},{"location":"libraries/api/internal/internal/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/internal/#__call_internal__self-functiont-tr-args-t-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__call_internal__(self: Function[T, TR], args: T)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>noop  # compiler will populate this one\n</code></pre>"},{"location":"libraries/api/internal/internal/#__call__self-args","title":"<code>__call__(self, *args)</code>","text":""},{"location":"libraries/api/internal/internal/#pyobject-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyObject</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/internal/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/internal/#refcnt-int","title":"<code>refcnt</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/internal/#pytype-ptrbyte","title":"<code>pytype</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/internal/#pywrappert-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyWrapper[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/internal/#fields_1","title":"Fields","text":""},{"location":"libraries/api/internal/internal/#head-pyobject","title":"<code>head</code>: <code>PyObject</code>","text":""},{"location":"libraries/api/internal/internal/#data-t","title":"<code>data</code>: <code>T</code>","text":""},{"location":"libraries/api/internal/internal/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/internal/#rtti-extend-class-is-extended-to-add-given-methods","title":"<code>RTTI</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/internal/#__init__self-i-int","title":"<code>__init__(self, i: int)</code>","text":""},{"location":"libraries/api/internal/internal/#__raw__self","title":"<code>__raw__(self)</code>","text":""},{"location":"libraries/api/internal/internal/#ellipsis-extend-class-is-extended-to-add-given-methods","title":"<code>ellipsis</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/internal/#__eq__self-other-ellipsis","title":"<code>__eq__(self, other: ellipsis)</code>","text":""},{"location":"libraries/api/internal/internal/#__ne__self-other-ellipsis","title":"<code>__ne__(self, other: ellipsis)</code>","text":""},{"location":"libraries/api/internal/internal/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/internal/#super__t__-extend-class-is-extended-to-add-given-methods","title":"<code>Super[__T__]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__repr__self_2","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/internal/#typewrapt-extend-class-is-extended-to-add-given-methods","title":"<code>TypeWrap[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#properties","title":"Properties","text":""},{"location":"libraries/api/internal/internal/#__name__-property-method-is-a-class-property","title":"<code>__name__</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/internal/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__new__t-type","title":"<code>__new__(T: type)</code>","text":""},{"location":"libraries/api/internal/internal/#__call_no_self__args-kwargs","title":"<code>__call_no_self__(*args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/internal/#__call__self-args-kwargs","title":"<code>__call__(self, *args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/internal/#__repr__self_3","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/internal/#__name__self-property-method-is-a-class-property","title":"<code>__name__(self)</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/internal/#capsulet-extend-class-is-extended-to-add-given-methods","title":"<code>Capsule[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__init__self-val-t","title":"<code>__init__(self, val: T)</code>","text":""},{"location":"libraries/api/internal/internal/#callablettr-extend-class-is-extended-to-add-given-methods","title":"<code>Callable[T,TR]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/internal/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/internal/internal/#__new__fn-functionptrbyte-t-tr-data-ptrbyte","title":"<code>__new__(fn: Function[Ptr[byte], T, TR], data: Ptr[byte])</code>","text":""},{"location":"libraries/api/internal/internal/#__new__fn-functionptrbyte-t-tr-data-partialm-pt-k-f-t-type-tr-type-m-literalstr-pt-type-f-type-k-type-overload-function-is-overloaded","title":"<code>__new__(fn: Function[Ptr[byte], T, TR], data: Partial[M, PT, K, F], T: type, TR: type, M: Literal[str], PT: type, F: type, K: type)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/internal/#__new__fn-functionptrbyte-t-tr-data-functiont-tr-overload-function-is-overloaded","title":"<code>__new__(fn: Function[Ptr[byte], T, TR], data: Function[T, TR])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/internal/#__new__fn-functiont-tr-overload-function-is-overloaded","title":"<code>__new__(fn: Function[T, TR])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/internal/#__call__self-args_1","title":"<code>__call__(self, *args)</code>","text":""},{"location":"libraries/api/internal/khash/","title":"module <code>internal.khash</code>","text":"<p>Source: <code>stdlib/internal/khash.codon</code></p>"},{"location":"libraries/api/internal/pynumerics/","title":"module <code>internal.pynumerics</code>","text":"<p>Source: <code>stdlib/internal/pynumerics.codon</code></p>"},{"location":"libraries/api/internal/pynumerics/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/pynumerics/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/pynumerics/#__floordiv__self-other-float","title":"<code>__floordiv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__floordiv__self-other-int","title":"<code>__floordiv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__truediv__self-other-float","title":"<code>__truediv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__truediv__self-other-int","title":"<code>__truediv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__mod__self-other-float","title":"<code>__mod__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__mod__self-other-int","title":"<code>__mod__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__divmod__self-other-float","title":"<code>__divmod__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__divmod__self-other-int","title":"<code>__divmod__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/pynumerics/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/pynumerics/#__floordiv__self-other-float_1","title":"<code>__floordiv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__floordiv__self-other-int_1","title":"<code>__floordiv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__truediv__self-other-float_1","title":"<code>__truediv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__truediv__self-other-int_1","title":"<code>__truediv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__mod__self-other-float_1","title":"<code>__mod__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__mod__self-other-int_1","title":"<code>__mod__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__divmod__self-other-float_1","title":"<code>__divmod__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/pynumerics/#__divmod__self-other-int_1","title":"<code>__divmod__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/python/","title":"module <code>internal.python</code>","text":"<p>Source: <code>stdlib/internal/python.codon</code></p>"},{"location":"libraries/api/internal/python/#py_decref-functioncobj-nonetypecobj","title":"<code>Py_DecRef</code> = <code>Function[([cobj], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#py_incref-functioncobj-nonetypecobj","title":"<code>Py_IncRef</code> = <code>Function[([cobj], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#py_initialize-function-nonetypecobj","title":"<code>Py_Initialize</code> = <code>Function[([], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyimport_addmodule-functioncobj-cobjcobj","title":"<code>PyImport_AddModule</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyimport_addmoduleobject-functioncobj-cobjcobj","title":"<code>PyImport_AddModuleObject</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyimport_importmodule-functioncobj-cobjcobj","title":"<code>PyImport_ImportModule</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyrun_simplestring-functioncobj-nonetypecobj","title":"<code>PyRun_SimpleString</code> = <code>Function[([cobj], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyeval_getglobals-function-cobjcobj","title":"<code>PyEval_GetGlobals</code> = <code>Function[([], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyeval_getbuiltins-function-cobjcobj","title":"<code>PyEval_GetBuiltins</code> = <code>Function[([], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyos_setsig-functioni32-cobj-cobjcobj","title":"<code>PyOS_setsig</code> = <code>Function[([i32, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pylong_aslong-functioncobj-intcobj","title":"<code>PyLong_AsLong</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pylong_fromlong-functionint-cobjcobj","title":"<code>PyLong_FromLong</code> = <code>Function[([int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyfloat_asdouble-functioncobj-floatcobj","title":"<code>PyFloat_AsDouble</code> = <code>Function[([cobj], float)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyfloat_fromdouble-functionfloat-cobjcobj","title":"<code>PyFloat_FromDouble</code> = <code>Function[([float], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pybool_fromlong-functionint-cobjcobj","title":"<code>PyBool_FromLong</code> = <code>Function[([int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pybytes_asstring-functioncobj-cobjcobj","title":"<code>PyBytes_AsString</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pybytes_size-functioncobj-intcobj","title":"<code>PyBytes_Size</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pylist_new-functionint-cobjcobj","title":"<code>PyList_New</code> = <code>Function[([int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pylist_size-functioncobj-intcobj","title":"<code>PyList_Size</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pylist_getitem-functioncobj-int-cobjcobj","title":"<code>PyList_GetItem</code> = <code>Function[([cobj, int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pylist_setitem-functioncobj-int-cobj-cobjcobj","title":"<code>PyList_SetItem</code> = <code>Function[([cobj, int, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pydict_new-function-cobjcobj","title":"<code>PyDict_New</code> = <code>Function[([], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pydict_next-functioncobj-ptrint-ptrcobj-ptrcobj-intcobj","title":"<code>PyDict_Next</code> = <code>Function[([cobj, Ptr[int], Ptr[cobj], Ptr[cobj]], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pydict_getitem-functioncobj-cobj-cobjcobj","title":"<code>PyDict_GetItem</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pydict_getitemstring-functioncobj-cobj-cobjcobj","title":"<code>PyDict_GetItemString</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pydict_setitem-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyDict_SetItem</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pydict_size-functioncobj-intcobj","title":"<code>PyDict_Size</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyset_add-functioncobj-cobj-cobjcobj","title":"<code>PySet_Add</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyset_new-functioncobj-cobjcobj","title":"<code>PySet_New</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pytuple_new-functionint-cobjcobj","title":"<code>PyTuple_New</code> = <code>Function[([int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pytuple_size-functioncobj-intcobj","title":"<code>PyTuple_Size</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pytuple_getitem-functioncobj-int-cobjcobj","title":"<code>PyTuple_GetItem</code> = <code>Function[([cobj, int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pytuple_setitem-functioncobj-int-cobj-nonetypecobj","title":"<code>PyTuple_SetItem</code> = <code>Function[([cobj, int, cobj], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyunicode_asencodedstring-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyUnicode_AsEncodedString</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyunicode_decodefsdefaultandsize-functioncobj-int-cobjcobj","title":"<code>PyUnicode_DecodeFSDefaultAndSize</code> = <code>Function[([cobj, int], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyunicode_fromstring-functioncobj-cobjcobj","title":"<code>PyUnicode_FromString</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pycomplex_fromdoubles-functionfloat-float-cobjcobj","title":"<code>PyComplex_FromDoubles</code> = <code>Function[([float, float], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pycomplex_realasdouble-functioncobj-floatcobj","title":"<code>PyComplex_RealAsDouble</code> = <code>Function[([cobj], float)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pycomplex_imagasdouble-functioncobj-floatcobj","title":"<code>PyComplex_ImagAsDouble</code> = <code>Function[([cobj], float)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyiter_next-functioncobj-cobjcobj","title":"<code>PyIter_Next</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyslice_new-functioncobj-cobj-cobj-cobjcobj","title":"<code>PySlice_New</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyslice_unpack-functioncobj-ptrint-ptrint-ptrint-intcobj","title":"<code>PySlice_Unpack</code> = <code>Function[([cobj, Ptr[int], Ptr[int], Ptr[int]], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pycapsule_new-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyCapsule_New</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pycapsule_getpointer-functioncobj-cobj-cobjcobj","title":"<code>PyCapsule_GetPointer</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_add-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Add</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_subtract-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Subtract</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_multiply-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Multiply</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_matrixmultiply-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_MatrixMultiply</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_floordivide-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_FloorDivide</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_truedivide-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_TrueDivide</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_remainder-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Remainder</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_divmod-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Divmod</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_power-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyNumber_Power</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_negative-functioncobj-cobjcobj","title":"<code>PyNumber_Negative</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_positive-functioncobj-cobjcobj","title":"<code>PyNumber_Positive</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_absolute-functioncobj-cobjcobj","title":"<code>PyNumber_Absolute</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_invert-functioncobj-cobjcobj","title":"<code>PyNumber_Invert</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_lshift-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Lshift</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_rshift-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Rshift</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_and-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_And</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_xor-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Xor</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_or-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_Or</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplaceadd-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceAdd</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacesubtract-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceSubtract</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacemultiply-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceMultiply</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacematrixmultiply-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceMatrixMultiply</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacefloordivide-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceFloorDivide</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacetruedivide-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceTrueDivide</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplaceremainder-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceRemainder</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacepower-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyNumber_InPlacePower</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacelshift-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceLshift</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacershift-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceRshift</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplaceand-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceAnd</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplacexor-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceXor</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_inplaceor-functioncobj-cobj-cobjcobj","title":"<code>PyNumber_InPlaceOr</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_long-functioncobj-cobjcobj","title":"<code>PyNumber_Long</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_float-functioncobj-cobjcobj","title":"<code>PyNumber_Float</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pynumber_index-functioncobj-cobjcobj","title":"<code>PyNumber_Index</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_call-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyObject_Call</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_getattr-functioncobj-cobj-cobjcobj","title":"<code>PyObject_GetAttr</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_getattrstring-functioncobj-cobj-cobjcobj","title":"<code>PyObject_GetAttrString</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_getiter-functioncobj-cobjcobj","title":"<code>PyObject_GetIter</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_hasattrstring-functioncobj-cobj-intcobj","title":"<code>PyObject_HasAttrString</code> = <code>Function[([cobj, cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_istrue-functioncobj-intcobj","title":"<code>PyObject_IsTrue</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_length-functioncobj-intcobj","title":"<code>PyObject_Length</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_lengthhint-functioncobj-int-intcobj","title":"<code>PyObject_LengthHint</code> = <code>Function[([cobj, int], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_setattrstring-functioncobj-cobj-cobj-cobjcobj","title":"<code>PyObject_SetAttrString</code> = <code>Function[([cobj, cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_str-functioncobj-cobjcobj","title":"<code>PyObject_Str</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_repr-functioncobj-cobjcobj","title":"<code>PyObject_Repr</code> = <code>Function[([cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_hash-functioncobj-intcobj","title":"<code>PyObject_Hash</code> = <code>Function[([cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_getitem-functioncobj-cobj-cobjcobj","title":"<code>PyObject_GetItem</code> = <code>Function[([cobj, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_setitem-functioncobj-cobj-cobj-intcobj","title":"<code>PyObject_SetItem</code> = <code>Function[([cobj, cobj, cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_delitem-functioncobj-cobj-intcobj","title":"<code>PyObject_DelItem</code> = <code>Function[([cobj, cobj], int)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_richcompare-functioncobj-cobj-i32-cobjcobj","title":"<code>PyObject_RichCompare</code> = <code>Function[([cobj, cobj, i32], cobj)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyobject_isinstance-functioncobj-cobj-i32cobj","title":"<code>PyObject_IsInstance</code> = <code>Function[([cobj, cobj], i32)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyerr_fetch-functionptrcobj-ptrcobj-ptrcobj-nonetypecobj","title":"<code>PyErr_Fetch</code> = <code>Function[([Ptr[cobj], Ptr[cobj], Ptr[cobj]], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyerr_normalizeexception-functionptrcobj-ptrcobj-ptrcobj-nonetypecobj","title":"<code>PyErr_NormalizeException</code> = <code>Function[([Ptr[cobj], Ptr[cobj], Ptr[cobj]], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#pyerr_setstring-functioncobj-cobj-nonetypecobj","title":"<code>PyErr_SetString</code> = <code>Function[([cobj, cobj], NoneType)](cobj())</code>","text":""},{"location":"libraries/api/internal/python/#py_none-cobj","title":"<code>Py_None</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#py_true-cobj","title":"<code>Py_True</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#py_false-cobj","title":"<code>Py_False</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#py_ellipsis-cobj","title":"<code>Py_Ellipsis</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#py_notimplemented-cobj","title":"<code>Py_NotImplemented</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#py_lt-0","title":"<code>Py_LT</code> = <code>0</code>","text":""},{"location":"libraries/api/internal/python/#py_le-1","title":"<code>Py_LE</code> = <code>1</code>","text":""},{"location":"libraries/api/internal/python/#py_eq-2","title":"<code>Py_EQ</code> = <code>2</code>","text":""},{"location":"libraries/api/internal/python/#py_ne-3","title":"<code>Py_NE</code> = <code>3</code>","text":""},{"location":"libraries/api/internal/python/#py_gt-4","title":"<code>Py_GT</code> = <code>4</code>","text":""},{"location":"libraries/api/internal/python/#py_ge-5","title":"<code>Py_GE</code> = <code>5</code>","text":""},{"location":"libraries/api/internal/python/#pylong_type-cobj","title":"<code>PyLong_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyfloat_type-cobj","title":"<code>PyFloat_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pybool_type-cobj","title":"<code>PyBool_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyunicode_type-cobj","title":"<code>PyUnicode_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pybytes_type-cobj","title":"<code>PyBytes_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pycomplex_type-cobj","title":"<code>PyComplex_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pylist_type-cobj","title":"<code>PyList_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pydict_type-cobj","title":"<code>PyDict_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyset_type-cobj","title":"<code>PySet_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pytuple_type-cobj","title":"<code>PyTuple_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyslice_type-cobj","title":"<code>PySlice_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pycapsule_type-cobj","title":"<code>PyCapsule_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_baseexception-cobj","title":"<code>PyExc_BaseException</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_exception-cobj","title":"<code>PyExc_Exception</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_nameerror-cobj","title":"<code>PyExc_NameError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_oserror-cobj","title":"<code>PyExc_OSError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_ioerror-cobj","title":"<code>PyExc_IOError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_valueerror-cobj","title":"<code>PyExc_ValueError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_lookuperror-cobj","title":"<code>PyExc_LookupError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_indexerror-cobj","title":"<code>PyExc_IndexError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_keyerror-cobj","title":"<code>PyExc_KeyError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_typeerror-cobj","title":"<code>PyExc_TypeError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_arithmeticerror-cobj","title":"<code>PyExc_ArithmeticError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_zerodivisionerror-cobj","title":"<code>PyExc_ZeroDivisionError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_overflowerror-cobj","title":"<code>PyExc_OverflowError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_attributeerror-cobj","title":"<code>PyExc_AttributeError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_runtimeerror-cobj","title":"<code>PyExc_RuntimeError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_notimplementederror-cobj","title":"<code>PyExc_NotImplementedError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_stopiteration-cobj","title":"<code>PyExc_StopIteration</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_assertionerror-cobj","title":"<code>PyExc_AssertionError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_eoferror-cobj","title":"<code>PyExc_EOFError</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#pyexc_systemexit-cobj","title":"<code>PyExc_SystemExit</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/internal/python/#init_handles_dlopenpy_handle-cobj","title":"<code>init_handles_dlopen(py_handle: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#init_handles_static","title":"<code>init_handles_static()</code>","text":""},{"location":"libraries/api/internal/python/#init_error_py_types","title":"<code>init_error_py_types()</code>","text":""},{"location":"libraries/api/internal/python/#setup_pythonpython_loaded-bool","title":"<code>setup_python(python_loaded: bool)</code>","text":""},{"location":"libraries/api/internal/python/#ensure_initializedpython_loaded-bool-false","title":"<code>ensure_initialized(python_loaded: bool = False)</code>","text":""},{"location":"libraries/api/internal/python/#setup_decorator","title":"<code>setup_decorator()</code>","text":""},{"location":"libraries/api/internal/python/#pyerror","title":"<code>PyError</code>","text":""},{"location":"libraries/api/internal/python/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/python/#pytype-pyobj","title":"<code>pytype</code>: <code>pyobj</code>","text":""},{"location":"libraries/api/internal/python/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__init__self-message-str","title":"<code>__init__(self, message: str)</code>","text":""},{"location":"libraries/api/internal/python/#__init__self-message-str-pytype-pyobj-overload-function-is-overloaded","title":"<code>__init__(self, message: str, pytype: pyobj)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/python/#pyobj-extend-class-is-extended-to-add-given-methods","title":"<code>pyobj</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/python/#__raw__self","title":"<code>__raw__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__init__self-p-ptrbyte-steal-bool-false","title":"<code>__init__(self, p: Ptr[byte], steal: bool = False)</code>","text":""},{"location":"libraries/api/internal/python/#__del__self","title":"<code>__del__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__add__self-other","title":"<code>__add__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__radd__self-other","title":"<code>__radd__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__sub__self-other","title":"<code>__sub__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rsub__self-other","title":"<code>__rsub__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__mul__self-other","title":"<code>__mul__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rmul__self-other","title":"<code>__rmul__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__matmul__self-other","title":"<code>__matmul__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rmatmul__self-other","title":"<code>__rmatmul__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__floordiv__self-other","title":"<code>__floordiv__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rfloordiv__self-other","title":"<code>__rfloordiv__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__truediv__self-other","title":"<code>__truediv__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rtruediv__self-other","title":"<code>__rtruediv__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__mod__self-other","title":"<code>__mod__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rmod__self-other","title":"<code>__rmod__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__divmod__self-other","title":"<code>__divmod__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rdivmod__self-other","title":"<code>__rdivmod__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__pow__self-other","title":"<code>__pow__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rpow__self-other","title":"<code>__rpow__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__neg__self","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__invert__self","title":"<code>__invert__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__lshift__self-other","title":"<code>__lshift__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rlshift__self-other","title":"<code>__rlshift__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rshift__self-other","title":"<code>__rshift__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rrshift__self-other","title":"<code>__rrshift__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__and__self-other","title":"<code>__and__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rand__self-other","title":"<code>__rand__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__xor__self-other","title":"<code>__xor__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__rxor__self-other","title":"<code>__rxor__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__or__self-other","title":"<code>__or__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ror__self-other","title":"<code>__ror__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__iadd__self-other","title":"<code>__iadd__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__isub__self-other","title":"<code>__isub__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__imul__self-other","title":"<code>__imul__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__imatmul__self-other","title":"<code>__imatmul__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ifloordiv__self-other","title":"<code>__ifloordiv__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__itruediv__self-other","title":"<code>__itruediv__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__imod__self-other","title":"<code>__imod__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ipow__self-other","title":"<code>__ipow__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ilshift__self-other","title":"<code>__ilshift__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__irshift__self-other","title":"<code>__irshift__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__iand__self-other","title":"<code>__iand__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ixor__self-other","title":"<code>__ixor__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ior__self-other","title":"<code>__ior__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__int__self","title":"<code>__int__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__float__self","title":"<code>__float__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__index__self","title":"<code>__index__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__length_hint__self","title":"<code>__length_hint__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__getitem__self-key","title":"<code>__getitem__(self, key)</code>","text":""},{"location":"libraries/api/internal/python/#__setitem__self-key-v","title":"<code>__setitem__(self, key, v)</code>","text":""},{"location":"libraries/api/internal/python/#__delitem__self-key","title":"<code>__delitem__(self, key)</code>","text":""},{"location":"libraries/api/internal/python/#__lt__self-other","title":"<code>__lt__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__le__self-other","title":"<code>__le__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__eq__self-other","title":"<code>__eq__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ne__self-other","title":"<code>__ne__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__gt__self-other","title":"<code>__gt__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__ge__self-other","title":"<code>__ge__(self, other)</code>","text":""},{"location":"libraries/api/internal/python/#__to_py__self","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__p-cobj","title":"<code>__from_py__(p: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__call__self-args-kwargs","title":"<code>__call__(self, *args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/python/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/python/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/python/#exc_wrap_retval-t-t-type","title":"<code>exc_wrap(_retval: T, T: type)</code>","text":""},{"location":"libraries/api/internal/python/#to_strself-errors-str-empty-str","title":"<code>to_str(self, errors: str, empty: str = \"\")</code>","text":""},{"location":"libraries/api/internal/python/#to_strp-cobj-errors-str-empty-str","title":"<code>to_str(p: cobj, errors: str, empty: str = \"\")</code>","text":""},{"location":"libraries/api/internal/python/#exc_check","title":"<code>exc_check()</code>","text":""},{"location":"libraries/api/internal/python/#increfself","title":"<code>incref(self)</code>","text":""},{"location":"libraries/api/internal/python/#increfptr-ptrbyte","title":"<code>incref(ptr: Ptr[byte])</code>","text":""},{"location":"libraries/api/internal/python/#decrefself","title":"<code>decref(self)</code>","text":""},{"location":"libraries/api/internal/python/#decrefptr-ptrbyte","title":"<code>decref(ptr: Ptr[byte])</code>","text":""},{"location":"libraries/api/internal/python/#nonetype-extend-class-is-extended-to-add-given-methods","title":"<code>NoneType</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_1","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__x-cobj","title":"<code>__from_py__(x: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_2","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__i-cobj","title":"<code>__from_py__(i: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_3","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__d-cobj","title":"<code>__from_py__(d: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#bool-extend-class-is-extended-to-add-given-methods","title":"<code>bool</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_4","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__b-cobj","title":"<code>__from_py__(b: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#byte-extend-class-is-extended-to-add-given-methods","title":"<code>byte</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_5","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__c-cobj","title":"<code>__from_py__(c: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#str-extend-class-is-extended-to-add-given-methods","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_6","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__s-cobj","title":"<code>__from_py__(s: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#complex-extend-class-is-extended-to-add-given-methods","title":"<code>complex</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_7","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__c-cobj_1","title":"<code>__from_py__(c: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#listt-extend-class-is-extended-to-add-given-methods","title":"<code>List[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_9","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_8","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__v-cobj","title":"<code>__from_py__(v: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#dictkv-extend-class-is-extended-to-add-given-methods","title":"<code>Dict[K,V]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_10","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_9","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__d-cobj_1","title":"<code>__from_py__(d: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#setk-extend-class-is-extended-to-add-given-methods","title":"<code>Set[K]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_11","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_10","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__s-cobj_1","title":"<code>__from_py__(s: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#dynamictuplet-extend-class-is-extended-to-add-given-methods","title":"<code>DynamicTuple[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_12","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_11","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__t-cobj","title":"<code>__from_py__(t: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#slicetuv-extend-class-is-extended-to-add-given-methods","title":"<code>Slice[T,U,V]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_13","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_12","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__s-cobj_2","title":"<code>__from_py__(s: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#optionalt-extend-class-is-extended-to-add-given-methods","title":"<code>Optional[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_14","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_13","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__o-cobj","title":"<code>__from_py__(o: cobj)</code>","text":""},{"location":"libraries/api/internal/python/#ellipsis-extend-class-is-extended-to-add-given-methods","title":"<code>ellipsis</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/python/#magic-methods_15","title":"Magic methods","text":""},{"location":"libraries/api/internal/python/#__to_py__self_14","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/internal/python/#__from_py__e-cobj","title":"<code>__from_py__(e: cobj)</code>","text":""},{"location":"libraries/api/internal/sort/","title":"module <code>internal.sort</code>","text":"<p>Source: <code>stdlib/internal/sort.codon</code></p>"},{"location":"libraries/api/internal/sort/#sortedv-generatort-key-optionalint-reverse-bool-false-algorithm-literalstr-auto-t-type","title":"<code>sorted(v: Generator[T], key = Optional[int](), reverse: bool = False, algorithm: Literal[str] = \"auto\", T: type)</code>","text":""},{"location":"libraries/api/internal/sort/#listt-extend-class-is-extended-to-add-given-methods","title":"<code>List[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/sort/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/sort/#sortself-key-optionalint-reverse-bool-false-algorithm-literalstr-auto","title":"<code>sort(self, key = Optional[int](), reverse: bool = False, algorithm: Literal[str] = \"auto\")</code>","text":""},{"location":"libraries/api/internal/static/","title":"module <code>internal.static</code>","text":"<p>Source: <code>stdlib/internal/static.codon</code></p>"},{"location":"libraries/api/internal/static/#lenobj","title":"<code>len(obj)</code>","text":""},{"location":"libraries/api/internal/static/#printargs-no_argument_wrap","title":"<code>print(*args)</code> @no_argument_wrap","text":""},{"location":"libraries/api/internal/static/#rangestart-literalint-stop-literalint-step-literalint-1","title":"<code>range(start: Literal[int], stop: Literal[int], step: Literal[int] = 1)</code>","text":""},{"location":"libraries/api/internal/static/#rangestop-literalint-overload-function-is-overloaded","title":"<code>range(stop: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/static/#enumeratetup","title":"<code>enumerate(tup)</code>","text":""},{"location":"libraries/api/internal/static/#tupleargs","title":"<code>tuple(*args)</code>","text":""},{"location":"libraries/api/internal/static/#has_rttit-type","title":"<code>has_rtti(T: type)</code>","text":""},{"location":"libraries/api/internal/static/#function","title":"<code>function</code>","text":""},{"location":"libraries/api/internal/static/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/static/#realizedfn-args","title":"<code>realized(fn, *args)</code>","text":""},{"location":"libraries/api/internal/static/#overloadst-type-f-literalstr","title":"<code>overloads(T: type, F: Literal[str])</code>","text":""},{"location":"libraries/api/internal/static/#argsf","title":"<code>args(F)</code>","text":""},{"location":"libraries/api/internal/static/#has_typef-i-literalint","title":"<code>has_type(F, i: Literal[int])</code>","text":""},{"location":"libraries/api/internal/static/#get_typef-i-literalint","title":"<code>get_type(F, i: Literal[int])</code>","text":""},{"location":"libraries/api/internal/static/#can_callf-args-kwargs-no_argument_wrap","title":"<code>can_call(F, *args, **kwargs)</code> @no_argument_wrap","text":""},{"location":"libraries/api/internal/static/#wrap_argsf-args-kwargs","title":"<code>wrap_args(F, *args, **kwargs)</code>","text":""},{"location":"libraries/api/internal/static/#has_defaultf-i-literalint","title":"<code>has_default(F, i: Literal[int])</code>","text":""},{"location":"libraries/api/internal/static/#get_defaultf-i-literalint","title":"<code>get_default(F, i: Literal[int])</code>","text":""},{"location":"libraries/api/internal/static/#varsobj-with_index-literalbool-false","title":"<code>vars(obj, with_index: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/internal/static/#vars_typest-type-with_index-literalbool-false","title":"<code>vars_types(T: type, with_index: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/internal/static/#tuple_typet-type-n-literalint","title":"<code>tuple_type(T: type, N: Literal[int])</code>","text":""},{"location":"libraries/api/internal/str/","title":"module <code>internal.str</code>","text":"<p>Source: <code>stdlib/internal/str.codon</code></p>"},{"location":"libraries/api/internal/str/#str-extend-class-is-extended-to-add-given-methods","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/str/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/str/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/str/#__lt__self-other-str","title":"<code>__lt__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/str/#__le__self-other-str","title":"<code>__le__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/str/#__gt__self-other-str","title":"<code>__gt__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/str/#__ge__self-other-str","title":"<code>__ge__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/str/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/str/#__getitem__self-idx-int","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/internal/str/#__getitem__self-s-slice","title":"<code>__getitem__(self, s: Slice)</code>","text":""},{"location":"libraries/api/internal/str/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/str/#__reversed__self","title":"<code>__reversed__(self)</code>","text":""},{"location":"libraries/api/internal/str/#__mul__self-x-int","title":"<code>__mul__(self, x: int)</code>","text":""},{"location":"libraries/api/internal/str/#str-extend-class-is-extended-to-add-given-methods_1","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/str/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/str/#__contains__self-pattern-str","title":"<code>__contains__(self, pattern: str)</code>","text":""},{"location":"libraries/api/internal/str/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/str/#joinself-l-generatorstr","title":"<code>join(self, l: Generator[str])</code>","text":""},{"location":"libraries/api/internal/str/#joinself-l-liststr","title":"<code>join(self, l: List[str])</code>","text":""},{"location":"libraries/api/internal/str/#isdigitself","title":"<code>isdigit(self)</code>","text":""},{"location":"libraries/api/internal/str/#islowerself","title":"<code>islower(self)</code>","text":""},{"location":"libraries/api/internal/str/#isupperself","title":"<code>isupper(self)</code>","text":""},{"location":"libraries/api/internal/str/#isalnumself","title":"<code>isalnum(self)</code>","text":""},{"location":"libraries/api/internal/str/#isalphaself","title":"<code>isalpha(self)</code>","text":""},{"location":"libraries/api/internal/str/#isspaceself","title":"<code>isspace(self)</code>","text":""},{"location":"libraries/api/internal/str/#istitleself","title":"<code>istitle(self)</code>","text":""},{"location":"libraries/api/internal/str/#capitalizeself","title":"<code>capitalize(self)</code>","text":""},{"location":"libraries/api/internal/str/#isdecimalself","title":"<code>isdecimal(self)</code>","text":""},{"location":"libraries/api/internal/str/#lowerself","title":"<code>lower(self)</code>","text":""},{"location":"libraries/api/internal/str/#upperself","title":"<code>upper(self)</code>","text":""},{"location":"libraries/api/internal/str/#isasciiself","title":"<code>isascii(self)</code>","text":""},{"location":"libraries/api/internal/str/#casefoldself","title":"<code>casefold(self)</code>","text":""},{"location":"libraries/api/internal/str/#swapcaseself","title":"<code>swapcase(self)</code>","text":""},{"location":"libraries/api/internal/str/#titleself","title":"<code>title(self)</code>","text":""},{"location":"libraries/api/internal/str/#isnumericself","title":"<code>isnumeric(self)</code>","text":""},{"location":"libraries/api/internal/str/#ljustself-width-int-fillchar-str","title":"<code>ljust(self, width: int, fillchar: str = \" \")</code>","text":""},{"location":"libraries/api/internal/str/#rjustself-width-int-fillchar-str","title":"<code>rjust(self, width: int, fillchar: str = \" \")</code>","text":""},{"location":"libraries/api/internal/str/#centerself-width-int-fillchar-str","title":"<code>center(self, width: int, fillchar: str = \" \")</code>","text":""},{"location":"libraries/api/internal/str/#zfillself-width-int","title":"<code>zfill(self, width: int)</code>","text":""},{"location":"libraries/api/internal/str/#countself-sub-str-start-int-0-end-optionalint-none","title":"<code>count(self, sub: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#findself-sub-str-start-int-0-end-optionalint-none","title":"<code>find(self, sub: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#rfindself-sub-str-start-int-0-end-optionalint-none","title":"<code>rfind(self, sub: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#isidentifierself","title":"<code>isidentifier(self)</code>","text":""},{"location":"libraries/api/internal/str/#isprintableself","title":"<code>isprintable(self)</code>","text":""},{"location":"libraries/api/internal/str/#lstripself-chars-str","title":"<code>lstrip(self, chars: str = \"\")</code>","text":""},{"location":"libraries/api/internal/str/#rstripself-chars-str","title":"<code>rstrip(self, chars: str = \"\")</code>","text":""},{"location":"libraries/api/internal/str/#stripself-chars-str","title":"<code>strip(self, chars: str = \"\")</code>","text":""},{"location":"libraries/api/internal/str/#partitionself-sep-str","title":"<code>partition(self, sep: str)</code>","text":""},{"location":"libraries/api/internal/str/#rpartitionself-sep-str","title":"<code>rpartition(self, sep: str)</code>","text":""},{"location":"libraries/api/internal/str/#splitself-sep-optionalstr-none-maxsplit-int-1","title":"<code>split(self, sep: Optional[str] = None, maxsplit: int = -1)</code>","text":""},{"location":"libraries/api/internal/str/#rsplitself-sep-optionalstr-none-maxsplit-int-1","title":"<code>rsplit(self, sep: Optional[str] = None, maxsplit: int = -1)</code>","text":""},{"location":"libraries/api/internal/str/#splitlinesself-keepends-bool-false","title":"<code>splitlines(self, keepends: bool = False)</code>","text":""},{"location":"libraries/api/internal/str/#startswithself-prefix-str-start-int-0-end-optionalint-none","title":"<code>startswith(self, prefix: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#endswithself-suffix-str-start-int-0-end-optionalint-none","title":"<code>endswith(self, suffix: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#indexself-sub-str-start-int-0-end-optionalint-none","title":"<code>index(self, sub: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#rindexself-sub-str-start-int-0-end-optionalint-none","title":"<code>rindex(self, sub: str, start: int = 0, end: Optional[int] = None)</code>","text":""},{"location":"libraries/api/internal/str/#replaceself-old-str-new-str-maxcount-int-1","title":"<code>replace(self, old: str, new: str, maxcount: int = -1)</code>","text":""},{"location":"libraries/api/internal/str/#expandtabsself-tabsize-int-8","title":"<code>expandtabs(self, tabsize: int = 8)</code>","text":""},{"location":"libraries/api/internal/str/#translateself-map","title":"<code>translate(self, map)</code>","text":""},{"location":"libraries/api/internal/types/","title":"<code>internal.types</code>","text":"<ul> <li><code>array</code></li> <li><code>bool</code></li> <li><code>byte</code></li> <li><code>collections</code></li> <li><code>complex</code></li> <li><code>error</code></li> <li><code>float</code></li> <li><code>generator</code></li> <li><code>int</code></li> <li><code>intn</code></li> <li><code>optional</code></li> <li><code>ptr</code></li> <li><code>range</code></li> <li><code>slice</code></li> <li><code>str</code></li> <li><code>strbuf</code></li> </ul>"},{"location":"libraries/api/internal/types/array/","title":"module <code>internal.types.array</code>","text":"<p>Source: <code>stdlib/internal/types/array.codon</code></p>"},{"location":"libraries/api/internal/types/array/#arrayt-extend-class-is-extended-to-add-given-methods","title":"<code>Array[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/array/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/array/#__new__ptr-ptrt-sz-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(ptr: Ptr[T], sz: int)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = insertvalue { i64, ptr } undef, i64 %sz, 0\n%1 = insertvalue { i64, ptr } %0, ptr %ptr, 1\nret { i64, ptr } %1\n</code></pre>"},{"location":"libraries/api/internal/types/array/#__new__sz-int-overload-function-is-overloaded","title":"<code>__new__(sz: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/array/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/array/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/array/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/types/array/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/array/#__getitem__self-index-int","title":"<code>__getitem__(self, index: int)</code>","text":""},{"location":"libraries/api/internal/types/array/#__setitem__self-index-int-what-t","title":"<code>__setitem__(self, index: int, what: T)</code>","text":""},{"location":"libraries/api/internal/types/array/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/array/#sliceself-s-int-e-int","title":"<code>slice(self, s: int, e: int)</code>","text":""},{"location":"libraries/api/internal/types/array/#array-array","title":"<code>array</code> = <code>Array</code>","text":""},{"location":"libraries/api/internal/types/array/#listt","title":"<code>List[T]</code>","text":""},{"location":"libraries/api/internal/types/array/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/array/#len-int","title":"<code>len</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/array/#arr-arrayt","title":"<code>arr</code>: <code>Array[T]</code>","text":""},{"location":"libraries/api/internal/types/array/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/bool/","title":"module <code>internal.types.bool</code>","text":"<p>Source: <code>stdlib/internal/types/bool.codon</code></p>"},{"location":"libraries/api/internal/types/bool/#bool-extend-class-is-extended-to-add-given-methods","title":"<code>bool</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/bool/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/bool/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/bool/#__new__what-overload-function-is-overloaded","title":"<code>__new__(what)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/bool/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/bool/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/bool/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/bool/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/bool/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/bool/#__invert__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__invert__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = trunc i8 %self to i1\n%1 = xor i1 %0, true\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__eq__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp eq i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__ne__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__lt__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ult i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__gt__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ugt i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__le__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ule i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__ge__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp uge i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__and__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__and__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = and i8 %self, %other\nret i8 %0\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__or__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__or__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = or i8 %self, %other\nret i8 %0\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__xor__self-other-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__xor__(self, other: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = xor i8 %self, %other\nret i8 %0\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext i8 %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/bool/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp i8 %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/byte/","title":"module <code>internal.types.byte</code>","text":"<p>Source: <code>stdlib/internal/types/byte.codon</code></p>"},{"location":"libraries/api/internal/types/byte/#byte-extend-class-is-extended-to-add-given-methods","title":"<code>byte</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/byte/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/byte/#__new__-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret i8 0\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__new__b-byte-overload-function-is-overloaded","title":"<code>__new__(b: byte)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/byte/#__new__s-str-overload-function-is-overloaded","title":"<code>__new__(s: str)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/byte/#__new__i-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(i: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = trunc i64 %i to i8\nret i8 %0\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/byte/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/byte/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i8 %self, 0\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__eq__self-other-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(self, other: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp eq i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__eq__self-other-int-overload-function-is-overloaded","title":"<code>__eq__(self, other: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/byte/#__ne__self-other-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(self, other: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__lt__self-other-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(self, other: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ult i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__gt__self-other-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(self, other: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ugt i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__le__self-other-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self, other: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ule i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__ge__self-other-byte-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self, other: byte)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp uge i8 %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/types/byte/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/byte/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = zext i8 %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/byte/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp i8 %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/complex/","title":"module <code>internal.types.complex</code>","text":"<p>Source: <code>stdlib/internal/types/complex.codon</code></p>"},{"location":"libraries/api/internal/types/complex/#complex64-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>complex64</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/types/complex/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/complex/#real-float32","title":"<code>real</code>: <code>float32</code>","text":""},{"location":"libraries/api/internal/types/complex/#imag-float32","title":"<code>imag</code>: <code>float32</code>","text":""},{"location":"libraries/api/internal/types/complex/#complex-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>complex</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/types/complex/#fields_1","title":"Fields","text":""},{"location":"libraries/api/internal/types/complex/#real-float","title":"<code>real</code>: <code>float</code>","text":""},{"location":"libraries/api/internal/types/complex/#imag-float","title":"<code>imag</code>: <code>float</code>","text":""},{"location":"libraries/api/internal/types/complex/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/complex/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/complex/#__new__what-overload-function-is-overloaded","title":"<code>__new__(what)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/complex/#__new__real-imag-overload-function-is-overloaded","title":"<code>__new__(real, imag)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/complex/#__complex__self","title":"<code>__complex__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__neg__self","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__abs__self","title":"<code>__abs__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-float","title":"<code>__add__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-float","title":"<code>__sub__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-float","title":"<code>__mul__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-float","title":"<code>__truediv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-float","title":"<code>__eq__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-float","title":"<code>__ne__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-float","title":"<code>__pow__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-int","title":"<code>__add__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-int","title":"<code>__sub__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-int","title":"<code>__mul__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-int","title":"<code>__truediv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-int","title":"<code>__eq__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-int","title":"<code>__ne__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__radd__self-other-float","title":"<code>__radd__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rsub__self-other-float","title":"<code>__rsub__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rmul__self-other-float","title":"<code>__rmul__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rtruediv__self-other-float","title":"<code>__rtruediv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rpow__self-other-float","title":"<code>__rpow__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__radd__self-other-int","title":"<code>__radd__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rsub__self-other-int","title":"<code>__rsub__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rmul__self-other-int","title":"<code>__rmul__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rtruediv__self-other-int","title":"<code>__rtruediv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rpow__self-other-int","title":"<code>__rpow__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-complex","title":"<code>__add__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-complex","title":"<code>__sub__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-complex","title":"<code>__mul__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-complex","title":"<code>__truediv__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-complex","title":"<code>__eq__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-complex","title":"<code>__ne__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-int","title":"<code>__pow__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-complex","title":"<code>__pow__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/complex/#conjugateself","title":"<code>conjugate(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/complex/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/complex/#__suffix_j__x-int","title":"<code>__suffix_j__(x: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/complex/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/complex/#__complex__self_1","title":"<code>__complex__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__suffix_j__x-float","title":"<code>__suffix_j__(x: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#f32-float32","title":"<code>f32</code> = <code>float32</code>","text":""},{"location":"libraries/api/internal/types/complex/#complex64-extend-class-is-extended-to-add-given-methods","title":"<code>complex64</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/complex/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/complex/#__new___1","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/complex/#__new__other","title":"<code>__new__(other)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__new__real-f32","title":"<code>__new__(real: f32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__new__other-complex","title":"<code>__new__(other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__new__real-imag","title":"<code>__new__(real, imag)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__complex__self_2","title":"<code>__complex__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__bool__self_1","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pos__self_1","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__neg__self_1","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__abs__self_1","title":"<code>__abs__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__copy__self_1","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__hash__self_1","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-complex_1","title":"<code>__add__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-complex_1","title":"<code>__sub__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-complex_1","title":"<code>__mul__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-complex_1","title":"<code>__truediv__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-complex_1","title":"<code>__pow__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-complex_1","title":"<code>__eq__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-complex_1","title":"<code>__ne__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__radd__self-other-complex","title":"<code>__radd__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rsub__self-other-complex","title":"<code>__rsub__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rmul__self-other-complex","title":"<code>__rmul__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rtruediv__self-other-complex","title":"<code>__rtruediv__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rpow__self-other-complex","title":"<code>__rpow__(self, other: complex)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-float32","title":"<code>__add__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-float32","title":"<code>__sub__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-float32","title":"<code>__mul__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-float32","title":"<code>__truediv__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-float32","title":"<code>__pow__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-float32","title":"<code>__eq__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-float32","title":"<code>__ne__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__radd__self-other-float32","title":"<code>__radd__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rsub__self-other-float32","title":"<code>__rsub__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rmul__self-other-float32","title":"<code>__rmul__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rtruediv__self-other-float32","title":"<code>__rtruediv__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rpow__self-other-float32","title":"<code>__rpow__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-float_1","title":"<code>__add__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-float_1","title":"<code>__sub__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-float_1","title":"<code>__mul__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-float_1","title":"<code>__truediv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-float_1","title":"<code>__pow__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-float_1","title":"<code>__eq__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-float_1","title":"<code>__ne__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__radd__self-other-float_1","title":"<code>__radd__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rsub__self-other-float_1","title":"<code>__rsub__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rmul__self-other-float_1","title":"<code>__rmul__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rtruediv__self-other-float_1","title":"<code>__rtruediv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rpow__self-other-float_1","title":"<code>__rpow__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-int_1","title":"<code>__add__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-int_1","title":"<code>__sub__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-int_1","title":"<code>__mul__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-int_1","title":"<code>__truediv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-int_1","title":"<code>__eq__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-int_1","title":"<code>__ne__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__radd__self-other-int_1","title":"<code>__radd__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rsub__self-other-int_1","title":"<code>__rsub__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rmul__self-other-int_1","title":"<code>__rmul__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rtruediv__self-other-int_1","title":"<code>__rtruediv__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__rpow__self-other-int_1","title":"<code>__rpow__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__add__self-other-complex64","title":"<code>__add__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__sub__self-other-complex64","title":"<code>__sub__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__mul__self-other-complex64","title":"<code>__mul__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__truediv__self-other-complex64","title":"<code>__truediv__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__eq__self-other-complex64","title":"<code>__eq__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__ne__self-other-complex64","title":"<code>__ne__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-int_1","title":"<code>__pow__(self, other: int)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__pow__self-other-complex64","title":"<code>__pow__(self, other: complex64)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#methods_1","title":"Methods","text":""},{"location":"libraries/api/internal/types/complex/#conjugateself_1","title":"<code>conjugate(self)</code>","text":""},{"location":"libraries/api/internal/types/complex/#int-extend-class-is-extended-to-add-given-methods_1","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/complex/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/complex/#__complex__self_3","title":"<code>__complex__(self)</code>","text":""},{"location":"libraries/api/internal/types/error/","title":"module <code>internal.types.error</code>","text":"<p>Source: <code>stdlib/internal/types/error.codon</code></p>"},{"location":"libraries/api/internal/types/error/#baseexception","title":"<code>BaseException</code>","text":""},{"location":"libraries/api/internal/types/error/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/error/#typename-str","title":"<code>typename</code>: <code>str</code>","text":""},{"location":"libraries/api/internal/types/error/#message-str","title":"<code>message</code>: <code>str</code>","text":""},{"location":"libraries/api/internal/types/error/#func-str","title":"<code>func</code>: <code>str</code>","text":""},{"location":"libraries/api/internal/types/error/#file-str","title":"<code>file</code>: <code>str</code>","text":""},{"location":"libraries/api/internal/types/error/#line-int","title":"<code>line</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/error/#col-int","title":"<code>col</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/error/#python_type-cobj","title":"<code>python_type</code>: <code>cobj</code>","text":""},{"location":"libraries/api/internal/types/error/#cause-optionalbaseexception","title":"<code>cause</code>: <code>Optional[BaseException]</code>","text":""},{"location":"libraries/api/internal/types/error/#properties","title":"Properties","text":""},{"location":"libraries/api/internal/types/error/#__cause__-property-method-is-a-class-property","title":"<code>__cause__</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/error/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-typename-str-message-str","title":"<code>__init__(self, typename: str, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/types/error/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/error/#__cause__self-property-method-is-a-class-property","title":"<code>__cause__(self)</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/error/#exception","title":"<code>Exception</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-typename-str-msg-str","title":"<code>__init__(self, typename: str, msg: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#nameerror","title":"<code>NameError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#oserror","title":"<code>OSError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_1","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#ioerror","title":"<code>IOError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_2","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#valueerror","title":"<code>ValueError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_3","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#lookuperror","title":"<code>LookupError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-typename-str-message-str_1","title":"<code>__init__(self, typename: str, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#__init__self-msg-str","title":"<code>__init__(self, msg: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#indexerror","title":"<code>IndexError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_4","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#keyerror","title":"<code>KeyError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_5","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#cerror","title":"<code>CError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_9","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_6","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#typeerror","title":"<code>TypeError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_10","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_7","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#arithmeticerror","title":"<code>ArithmeticError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_11","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-msg-str_1","title":"<code>__init__(self, msg: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#zerodivisionerror","title":"<code>ZeroDivisionError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_12","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-typename-str-message-str_2","title":"<code>__init__(self, typename: str, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_8","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#overflowerror","title":"<code>OverflowError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_13","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_9","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#attributeerror","title":"<code>AttributeError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_14","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_10","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#runtimeerror","title":"<code>RuntimeError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_15","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-typename-str-message-str_3","title":"<code>__init__(self, typename: str, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_11","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#notimplementederror","title":"<code>NotImplementedError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_16","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_12","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#stopiteration","title":"<code>StopIteration</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_17","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_13","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#assertionerror","title":"<code>AssertionError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_18","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_14","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#eoferror","title":"<code>EOFError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_19","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_15","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/error/#systemexit","title":"<code>SystemExit</code>","text":""},{"location":"libraries/api/internal/types/error/#properties_1","title":"Properties","text":""},{"location":"libraries/api/internal/types/error/#status-property-method-is-a-class-property","title":"<code>status</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_20","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str-status-int-0","title":"<code>__init__(self, message: str = \"\", status: int = 0)</code>","text":""},{"location":"libraries/api/internal/types/error/#__init__self-status-int","title":"<code>__init__(self, status: int)</code>","text":""},{"location":"libraries/api/internal/types/error/#staticcompileerror","title":"<code>StaticCompileError</code>","text":""},{"location":"libraries/api/internal/types/error/#magic-methods_21","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/error/#__init__self-message-str_16","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/internal/types/float/","title":"module <code>internal.types.float</code>","text":"<p>Source: <code>stdlib/internal/types/float.codon</code></p>"},{"location":"libraries/api/internal/types/float/#float-extend-class-is-extended-to-add-given-methods","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#properties","title":"Properties","text":""},{"location":"libraries/api/internal/types/float/#real-property-method-is-a-class-property","title":"<code>real</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/float/#imag-property-method-is-a-class-property","title":"<code>imag</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/float/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/float/#__new__what-overload-function-is-overloaded","title":"<code>__new__(what)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptosi double %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__float__self","title":"<code>__float__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fcmp une double %self, 0.000000e+00\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fneg double %self\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__add__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fadd double %a, %b\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__sub__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fsub double %a, %b\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mul__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fmul double %a, %b\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floordiv__self-other-float","title":"<code>__floordiv__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/float/#__truediv__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fdiv double %a, %b\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mod__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = frem double %a, %b\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__divmod__self-other-float","title":"<code>__divmod__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/float/#__eq__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oeq double %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ne__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp une double %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__lt__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp olt double %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__gt__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ogt double %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__le__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ole double %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ge__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oge double %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__abs__a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.fabs.f64(double %a)\n%tmp = call double @llvm.fabs.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floor__a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floor__(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.floor.f64(double %a)\n%tmp = call double @llvm.floor.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ceil__a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ceil__(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.ceil.f64(double %a)\n%tmp = call double @llvm.ceil.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__trunc__a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__trunc__(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.trunc.f64(double %a)\n%tmp = call double @llvm.trunc.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__round__a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__round__(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.round.f64(double %a)\n%tmp = call double @llvm.round.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pow__a-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__pow__(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.pow.f64(double %a, double %b)\n%tmp = call double @llvm.pow.f64(double %a, double %b)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__atomic_xchg__d-ptrfloat-b-float-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_xchg__(d: Ptr[float], b: float)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw xchg ptr %d, double %b seq_cst\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__atomic_add__d-ptrfloat-b-float-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_add__(d: Ptr[float], b: float)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>0:\n%1 = load atomic i64, ptr %d monotonic, align 8\n%2 = bitcast i64 %1 to double\n%3 = fadd double %2, %b\n%4 = bitcast double %3 to i64\n%5 = cmpxchg weak ptr %d, i64 %1, i64 %4 seq_cst monotonic, align 8\n%6 = extractvalue { i64, i1 } %5, 1\nbr i1 %6, label %15, label %7\n7:                                                ; preds = %0, %7\n%8 = phi { i64, i1 } [ %13, %7 ], [ %5, %0 ]\n%9 = extractvalue { i64, i1 } %8, 0\n%10 = bitcast i64 %9 to double\n%11 = fadd double %10, %b\n%12 = bitcast double %11 to i64\n%13 = cmpxchg weak ptr %d, i64 %9, i64 %12 seq_cst monotonic, align 8\n%14 = extractvalue { i64, i1 } %13, 1\nbr i1 %14, label %15, label %7\n15:                                               ; preds = %7, %0\n%16 = phi double [ %2, %0 ], [ %10, %7 ]\nret double %16\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__atomic_sub__d-ptrfloat-b-float-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_sub__(d: Ptr[float], b: float)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>0:\n%1 = load atomic i64, ptr %d monotonic, align 8\n%2 = bitcast i64 %1 to double\n%3 = fsub double %2, %b\n%4 = bitcast double %3 to i64\n%5 = cmpxchg weak ptr %d, i64 %1, i64 %4 seq_cst monotonic, align 8\n%6 = extractvalue { i64, i1 } %5, 1\nbr i1 %6, label %15, label %7\n7:                                                ; preds = %0, %7\n%8 = phi { i64, i1 } [ %13, %7 ], [ %5, %0 ]\n%9 = extractvalue { i64, i1 } %8, 0\n%10 = bitcast i64 %9 to double\n%11 = fsub double %10, %b\n%12 = bitcast double %11 to i64\n%13 = cmpxchg weak ptr %d, i64 %9, i64 %12 seq_cst monotonic, align 8\n%14 = extractvalue { i64, i1 } %13, 1\nbr i1 %14, label %15, label %7\n15:                                               ; preds = %7, %0\n%16 = phi double [ %2, %0 ], [ %10, %7 ]\nret double %16\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__match__self-obj-float","title":"<code>__match__(self, obj: float)</code>","text":""},{"location":"libraries/api/internal/types/float/#__add__self-float-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self: float, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-float-b-int-overload-function-is-overloaded","title":"<code>__sub__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-float-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self: float, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-int-overload-function-is-overloaded","title":"<code>__floordiv__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-float-b-int-overload-function-is-overloaded","title":"<code>__truediv__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-float-b-int-overload-function-is-overloaded","title":"<code>__mod__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-int-overload-function-is-overloaded","title":"<code>__divmod__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-float-b-int-overload-function-is-overloaded","title":"<code>__eq__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-float-b-int-overload-function-is-overloaded","title":"<code>__ne__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-float-b-int-overload-function-is-overloaded","title":"<code>__lt__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-float-b-int-overload-function-is-overloaded","title":"<code>__gt__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-float-b-int-overload-function-is-overloaded","title":"<code>__le__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-float-b-int-overload-function-is-overloaded","title":"<code>__ge__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-float-b-int-overload-function-is-overloaded","title":"<code>__pow__(self: float, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/float/#sqrta-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.sqrt.f64(double %a)\n%tmp = call double @llvm.sqrt.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#sina-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.sin.f64(double %a)\n%tmp = call double @llvm.sin.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#cosa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.cos.f64(double %a)\n%tmp = call double @llvm.cos.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#expa-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.exp.f64(double %a)\n%tmp = call double @llvm.exp.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#exp2a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.exp2.f64(double %a)\n%tmp = call double @llvm.exp2.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#loga-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.log.f64(double %a)\n%tmp = call double @llvm.log.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log10a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.log10.f64(double %a)\n%tmp = call double @llvm.log10.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log2a-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.log2.f64(double %a)\n%tmp = call double @llvm.log2.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#rinta-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.rint.f64(double %a)\n%tmp = call double @llvm.rint.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#nearbyinta-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nearbyint(a: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.nearbyint.f64(double %a)\n%tmp = call double @llvm.nearbyint.f64(double %a)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#mina-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>min(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.minnum.f64(double %a, double %b)\n%tmp = call double @llvm.minnum.f64(double %a, double %b)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#maxa-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>max(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.maxnum.f64(double %a, double %b)\n%tmp = call double @llvm.maxnum.f64(double %a, double %b)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#copysigna-float-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign(a: float, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.copysign.f64(double %a, double %b)\n%tmp = call double @llvm.copysign.f64(double %a, double %b)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#fmaa-float-b-float-c-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fma(a: float, b: float, c: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.fma.f64(double %a, double %b, double %c)\n%tmp = call double @llvm.fma.f64(double %a, double %b, double %c)\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#float32-extend-class-is-extended-to-add-given-methods","title":"<code>float32</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__new__self-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(self: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptrunc double %self to float\nret float %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__new__what-float32-overload-function-is-overloaded","title":"<code>__new__(what: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__what-str-overload-function-is-overloaded","title":"<code>__new__(what: str)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__-overload-function-is-overloaded","title":"<code>__new__()</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__format__self-format_spec-str","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/types/float/#__copy__self_1","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__deepcopy__self_1","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptosi float %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fpext float %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fcmp une float %self, 0.000000e+00\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pos__self_1","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fneg float %self\nret float %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__add__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fadd float %a, %b\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__sub__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fsub float %a, %b\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mul__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fmul float %a, %b\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floordiv__self-other-float32","title":"<code>__floordiv__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/float/#__truediv__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fdiv float %a, %b\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mod__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = frem float %a, %b\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__divmod__self-other-float32","title":"<code>__divmod__(self, other: float32)</code>","text":""},{"location":"libraries/api/internal/types/float/#__eq__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oeq float %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ne__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp une float %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__lt__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp olt float %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__gt__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ogt float %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__le__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ole float %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ge__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oge float %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__abs__a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.fabs.f32(float %a)\n%tmp = call float @llvm.fabs.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floor__a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floor__(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.floor.f32(float %a)\n%tmp = call float @llvm.floor.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ceil__a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ceil__(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.ceil.f32(float %a)\n%tmp = call float @llvm.ceil.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__trunc__a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__trunc__(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.trunc.f32(float %a)\n%tmp = call float @llvm.trunc.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__round__a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__round__(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.round.f32(float %a)\n%tmp = call float @llvm.round.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pow__a-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__pow__(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.pow.f32(float %a, float %b)\n%tmp = call float @llvm.pow.f32(float %a, float %b)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__atomic_xchg__d-ptrfloat32-b-float32-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_xchg__(d: Ptr[float32], b: float32)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw xchg ptr %d, float %b seq_cst\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__atomic_add__d-ptrfloat32-b-float32-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_add__(d: Ptr[float32], b: float32)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>0:\n%1 = load atomic i32, ptr %d monotonic, align 4\n%2 = bitcast i32 %1 to float\n%3 = fadd float %2, %b\n%4 = bitcast float %3 to i32\n%5 = cmpxchg weak ptr %d, i32 %1, i32 %4 seq_cst monotonic, align 4\n%6 = extractvalue { i32, i1 } %5, 1\nbr i1 %6, label %15, label %7\n7:                                                ; preds = %0, %7\n%8 = phi { i32, i1 } [ %13, %7 ], [ %5, %0 ]\n%9 = extractvalue { i32, i1 } %8, 0\n%10 = bitcast i32 %9 to float\n%11 = fadd float %10, %b\n%12 = bitcast float %11 to i32\n%13 = cmpxchg weak ptr %d, i32 %9, i32 %12 seq_cst monotonic, align 4\n%14 = extractvalue { i32, i1 } %13, 1\nbr i1 %14, label %15, label %7\n15:                                               ; preds = %7, %0\n%16 = phi float [ %2, %0 ], [ %10, %7 ]\nret float %16\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__atomic_sub__d-ptrfloat32-b-float32-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_sub__(d: Ptr[float32], b: float32)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>0:\n%1 = load atomic i32, ptr %d monotonic, align 4\n%2 = bitcast i32 %1 to float\n%3 = fsub float %2, %b\n%4 = bitcast float %3 to i32\n%5 = cmpxchg weak ptr %d, i32 %1, i32 %4 seq_cst monotonic, align 4\n%6 = extractvalue { i32, i1 } %5, 1\nbr i1 %6, label %15, label %7\n7:                                                ; preds = %0, %7\n%8 = phi { i32, i1 } [ %13, %7 ], [ %5, %0 ]\n%9 = extractvalue { i32, i1 } %8, 0\n%10 = bitcast i32 %9 to float\n%11 = fsub float %10, %b\n%12 = bitcast float %11 to i32\n%13 = cmpxchg weak ptr %d, i32 %9, i32 %12 seq_cst monotonic, align 4\n%14 = extractvalue { i32, i1 } %13, 1\nbr i1 %14, label %15, label %7\n15:                                               ; preds = %7, %0\n%16 = phi float [ %2, %0 ], [ %10, %7 ]\nret float %16\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__hash__self_1","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__match__self-obj-float32","title":"<code>__match__(self, obj: float32)</code>","text":""},{"location":"libraries/api/internal/types/float/#__add__self-float32-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self: float32, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-float32-b-int-overload-function-is-overloaded","title":"<code>__sub__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-float32-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self: float32, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-int-overload-function-is-overloaded_1","title":"<code>__floordiv__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-float32-b-int-overload-function-is-overloaded","title":"<code>__truediv__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-float32-b-int-overload-function-is-overloaded","title":"<code>__mod__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-int-overload-function-is-overloaded_1","title":"<code>__divmod__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-float32-b-int-overload-function-is-overloaded","title":"<code>__eq__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-float32-b-int-overload-function-is-overloaded","title":"<code>__ne__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-float32-b-int-overload-function-is-overloaded","title":"<code>__lt__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-float32-b-int-overload-function-is-overloaded","title":"<code>__gt__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-float32-b-int-overload-function-is-overloaded","title":"<code>__le__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-float32-b-int-overload-function-is-overloaded","title":"<code>__ge__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-float32-b-int-overload-function-is-overloaded","title":"<code>__pow__(self: float32, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#methods_1","title":"Methods","text":""},{"location":"libraries/api/internal/types/float/#sqrta-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.sqrt.f32(float %a)\n%tmp = call float @llvm.sqrt.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#sina-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.sin.f32(float %a)\n%tmp = call float @llvm.sin.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#cosa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.cos.f32(float %a)\n%tmp = call float @llvm.cos.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#expa-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.exp.f32(float %a)\n%tmp = call float @llvm.exp.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#exp2a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.exp2.f32(float %a)\n%tmp = call float @llvm.exp2.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#loga-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.log.f32(float %a)\n%tmp = call float @llvm.log.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log10a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.log10.f32(float %a)\n%tmp = call float @llvm.log10.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log2a-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.log2.f32(float %a)\n%tmp = call float @llvm.log2.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#rinta-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.rint.f32(float %a)\n%tmp = call float @llvm.rint.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#nearbyinta-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nearbyint(a: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.nearbyint.f32(float %a)\n%tmp = call float @llvm.nearbyint.f32(float %a)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#mina-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>min(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.minnum.f32(float %a, float %b)\n%tmp = call float @llvm.minnum.f32(float %a, float %b)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#maxa-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>max(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.maxnum.f32(float %a, float %b)\n%tmp = call float @llvm.maxnum.f32(float %a, float %b)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#copysigna-float32-b-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign(a: float32, b: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.copysign.f32(float %a, float %b)\n%tmp = call float @llvm.copysign.f32(float %a, float %b)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#fmaa-float32-b-float32-c-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fma(a: float32, b: float32, c: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.fma.f32(float %a, float %b, float %c)\n%tmp = call float @llvm.fma.f32(float %a, float %b, float %c)\nret float %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#float16-extend-class-is-extended-to-add-given-methods","title":"<code>float16</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__new__self-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__new__(self: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptrunc double %self to half\nret half %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__new__what-float16-overload-function-is-overloaded","title":"<code>__new__(what: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__what-str-overload-function-is-overloaded_1","title":"<code>__new__(what: str)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__-overload-function-is-overloaded_1","title":"<code>__new__()</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__repr__self_2","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__format__self-format_spec-str_1","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/types/float/#__copy__self_2","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__deepcopy__self_2","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_2","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptosi half %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fpext half %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_2","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fcmp une half %self, 0.000000e+00\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pos__self_2","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_2","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fneg half %self\nret half %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__add__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fadd half %a, %b\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__sub__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fsub half %a, %b\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mul__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fmul half %a, %b\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floordiv__self-other-float16","title":"<code>__floordiv__(self, other: float16)</code>","text":""},{"location":"libraries/api/internal/types/float/#__truediv__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fdiv half %a, %b\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mod__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = frem half %a, %b\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__divmod__self-other-float16","title":"<code>__divmod__(self, other: float16)</code>","text":""},{"location":"libraries/api/internal/types/float/#__eq__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oeq half %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ne__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp une half %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__lt__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp olt half %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__gt__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ogt half %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__le__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ole half %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ge__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oge half %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__abs__a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.fabs.f16(half %a)\n%tmp = call half @llvm.fabs.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floor__a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floor__(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.floor.f16(half %a)\n%tmp = call half @llvm.floor.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ceil__a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ceil__(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.ceil.f16(half %a)\n%tmp = call half @llvm.ceil.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__trunc__a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__trunc__(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.trunc.f16(half %a)\n%tmp = call half @llvm.trunc.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__round__a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__round__(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.round.f16(half %a)\n%tmp = call half @llvm.round.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pow__a-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__pow__(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.pow.f16(half %a, half %b)\n%tmp = call half @llvm.pow.f16(half %a, half %b)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__hash__self_2","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__match__self-obj-float16","title":"<code>__match__(self, obj: float16)</code>","text":""},{"location":"libraries/api/internal/types/float/#__add__self-float16-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self: float16, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-float16-b-int-overload-function-is-overloaded","title":"<code>__sub__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-float16-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self: float16, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-int-overload-function-is-overloaded_2","title":"<code>__floordiv__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-float16-b-int-overload-function-is-overloaded","title":"<code>__truediv__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-float16-b-int-overload-function-is-overloaded","title":"<code>__mod__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-int-overload-function-is-overloaded_2","title":"<code>__divmod__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-float16-b-int-overload-function-is-overloaded","title":"<code>__eq__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-float16-b-int-overload-function-is-overloaded","title":"<code>__ne__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-float16-b-int-overload-function-is-overloaded","title":"<code>__lt__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-float16-b-int-overload-function-is-overloaded","title":"<code>__gt__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-float16-b-int-overload-function-is-overloaded","title":"<code>__le__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-float16-b-int-overload-function-is-overloaded","title":"<code>__ge__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-float16-b-int-overload-function-is-overloaded","title":"<code>__pow__(self: float16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#methods_2","title":"Methods","text":""},{"location":"libraries/api/internal/types/float/#sqrta-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.sqrt.f16(half %a)\n%tmp = call half @llvm.sqrt.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#sina-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.sin.f16(half %a)\n%tmp = call half @llvm.sin.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#cosa-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.cos.f16(half %a)\n%tmp = call half @llvm.cos.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#expa-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.exp.f16(half %a)\n%tmp = call half @llvm.exp.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#exp2a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.exp2.f16(half %a)\n%tmp = call half @llvm.exp2.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#loga-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.log.f16(half %a)\n%tmp = call half @llvm.log.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log10a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.log10.f16(half %a)\n%tmp = call half @llvm.log10.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log2a-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.log2.f16(half %a)\n%tmp = call half @llvm.log2.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#rinta-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.rint.f16(half %a)\n%tmp = call half @llvm.rint.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#nearbyinta-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nearbyint(a: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.nearbyint.f16(half %a)\n%tmp = call half @llvm.nearbyint.f16(half %a)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#mina-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>min(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.minnum.f16(half %a, half %b)\n%tmp = call half @llvm.minnum.f16(half %a, half %b)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#maxa-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>max(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.maxnum.f16(half %a, half %b)\n%tmp = call half @llvm.maxnum.f16(half %a, half %b)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#copysigna-float16-b-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign(a: float16, b: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.copysign.f16(half %a, half %b)\n%tmp = call half @llvm.copysign.f16(half %a, half %b)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#fmaa-float16-b-float16-c-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fma(a: float16, b: float16, c: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.fma.f16(half %a, half %b, half %c)\n%tmp = call half @llvm.fma.f16(half %a, half %b, half %c)\nret half %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#bfloat16-extend-class-is-extended-to-add-given-methods","title":"<code>bfloat16</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__new__self-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_2","title":"<code>__new__(self: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptrunc double %self to bfloat\nret bfloat %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__new__what-bfloat16-overload-function-is-overloaded","title":"<code>__new__(what: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__what-str-overload-function-is-overloaded_2","title":"<code>__new__(what: str)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__-overload-function-is-overloaded_2","title":"<code>__new__()</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__repr__self_3","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__format__self-format_spec-str_2","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/types/float/#__copy__self_3","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__deepcopy__self_3","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_3","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptosi bfloat %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_2","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fpext bfloat %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_3","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fcmp une bfloat %self, 0.000000e+00\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pos__self_3","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_3","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fneg bfloat %self\nret bfloat %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__add__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fadd bfloat %a, %b\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__sub__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fsub bfloat %a, %b\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mul__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fmul bfloat %a, %b\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floordiv__self-other-bfloat16","title":"<code>__floordiv__(self, other: bfloat16)</code>","text":""},{"location":"libraries/api/internal/types/float/#__truediv__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fdiv bfloat %a, %b\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mod__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = frem bfloat %a, %b\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__divmod__self-other-bfloat16","title":"<code>__divmod__(self, other: bfloat16)</code>","text":""},{"location":"libraries/api/internal/types/float/#__eq__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oeq bfloat %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ne__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp une bfloat %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__lt__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp olt bfloat %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__gt__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ogt bfloat %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__le__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ole bfloat %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ge__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oge bfloat %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__abs__a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.fabs.bf16(bfloat %a)\n%tmp = call bfloat @llvm.fabs.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floor__a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floor__(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.floor.bf16(bfloat %a)\n%tmp = call bfloat @llvm.floor.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ceil__a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ceil__(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.ceil.bf16(bfloat %a)\n%tmp = call bfloat @llvm.ceil.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__trunc__a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__trunc__(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.trunc.bf16(bfloat %a)\n%tmp = call bfloat @llvm.trunc.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__round__a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__round__(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.round.bf16(bfloat %a)\n%tmp = call bfloat @llvm.round.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pow__a-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__pow__(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.pow.bf16(bfloat %a, bfloat %b)\n%tmp = call bfloat @llvm.pow.bf16(bfloat %a, bfloat %b)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__hash__self_3","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__match__self-obj-bfloat16","title":"<code>__match__(self, obj: bfloat16)</code>","text":""},{"location":"libraries/api/internal/types/float/#__add__self-bfloat16-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self: bfloat16, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__sub__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-bfloat16-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self: bfloat16, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-int-overload-function-is-overloaded_3","title":"<code>__floordiv__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__truediv__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__mod__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-int-overload-function-is-overloaded_3","title":"<code>__divmod__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__eq__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__ne__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__lt__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__gt__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__le__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__ge__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-bfloat16-b-int-overload-function-is-overloaded","title":"<code>__pow__(self: bfloat16, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#methods_3","title":"Methods","text":""},{"location":"libraries/api/internal/types/float/#sqrta-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.sqrt.bf16(bfloat %a)\n%tmp = call bfloat @llvm.sqrt.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#sina-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.sin.bf16(bfloat %a)\n%tmp = call bfloat @llvm.sin.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#cosa-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.cos.bf16(bfloat %a)\n%tmp = call bfloat @llvm.cos.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#expa-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.exp.bf16(bfloat %a)\n%tmp = call bfloat @llvm.exp.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#exp2a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.exp2.bf16(bfloat %a)\n%tmp = call bfloat @llvm.exp2.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#loga-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.log.bf16(bfloat %a)\n%tmp = call bfloat @llvm.log.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log10a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.log10.bf16(bfloat %a)\n%tmp = call bfloat @llvm.log10.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log2a-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.log2.bf16(bfloat %a)\n%tmp = call bfloat @llvm.log2.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#rinta-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.rint.bf16(bfloat %a)\n%tmp = call bfloat @llvm.rint.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#nearbyinta-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nearbyint(a: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.nearbyint.bf16(bfloat %a)\n%tmp = call bfloat @llvm.nearbyint.bf16(bfloat %a)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#mina-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>min(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.minnum.bf16(bfloat %a, bfloat %b)\n%tmp = call bfloat @llvm.minnum.bf16(bfloat %a, bfloat %b)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#maxa-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>max(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.maxnum.bf16(bfloat %a, bfloat %b)\n%tmp = call bfloat @llvm.maxnum.bf16(bfloat %a, bfloat %b)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#copysigna-bfloat16-b-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign(a: bfloat16, b: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.copysign.bf16(bfloat %a, bfloat %b)\n%tmp = call bfloat @llvm.copysign.bf16(bfloat %a, bfloat %b)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#fmaa-bfloat16-b-bfloat16-c-bfloat16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fma(a: bfloat16, b: bfloat16, c: bfloat16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare bfloat @llvm.fma.bf16(bfloat %a, bfloat %b, bfloat %c)\n%tmp = call bfloat @llvm.fma.bf16(bfloat %a, bfloat %b, bfloat %c)\nret bfloat %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#float128-extend-class-is-extended-to-add-given-methods","title":"<code>float128</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__new__self-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_3","title":"<code>__new__(self: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fpext double %self to fp128\nret fp128 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__new__what-float128-overload-function-is-overloaded","title":"<code>__new__(what: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__new__-overload-function-is-overloaded_3","title":"<code>__new__()</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__repr__self_4","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__format__self-format_spec-str_3","title":"<code>__format__(self, format_spec: str)</code>","text":""},{"location":"libraries/api/internal/types/float/#__copy__self_4","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__deepcopy__self_4","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_4","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptosi fp128 %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_3","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fptrunc fp128 %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_4","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fcmp une fp128 %self, 0xL00000000000000000000000000000000\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pos__self_4","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_4","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = fneg fp128 %self\nret fp128 %0\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__add__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fadd fp128 %a, %b\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__sub__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fsub fp128 %a, %b\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mul__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fmul fp128 %a, %b\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floordiv__self-other-float128","title":"<code>__floordiv__(self, other: float128)</code>","text":""},{"location":"libraries/api/internal/types/float/#__truediv__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fdiv fp128 %a, %b\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__mod__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = frem fp128 %a, %b\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__divmod__self-other-float128","title":"<code>__divmod__(self, other: float128)</code>","text":""},{"location":"libraries/api/internal/types/float/#__eq__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oeq fp128 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ne__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp une fp128 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__lt__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp olt fp128 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__gt__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ogt fp128 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__le__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp ole fp128 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ge__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = fcmp oge fp128 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__abs__a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.fabs.f128(fp128 %a)\n%tmp = call fp128 @llvm.fabs.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__floor__a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floor__(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.floor.f128(fp128 %a)\n%tmp = call fp128 @llvm.floor.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__ceil__a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ceil__(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.ceil.f128(fp128 %a)\n%tmp = call fp128 @llvm.ceil.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__trunc__a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__trunc__(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.trunc.f128(fp128 %a)\n%tmp = call fp128 @llvm.trunc.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__round__a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__round__(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.round.f128(fp128 %a)\n%tmp = call fp128 @llvm.round.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__pow__a-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__pow__(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.pow.f128(fp128 %a, fp128 %b)\n%tmp = call fp128 @llvm.pow.f128(fp128 %a, fp128 %b)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#__hash__self_4","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/float/#__match__self-obj-float128","title":"<code>__match__(self, obj: float128)</code>","text":""},{"location":"libraries/api/internal/types/float/#__add__self-float128-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self: float128, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-float128-b-int-overload-function-is-overloaded","title":"<code>__sub__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-float128-b-int-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self: float128, b: int)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-int-overload-function-is-overloaded_4","title":"<code>__floordiv__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-float128-b-int-overload-function-is-overloaded","title":"<code>__truediv__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-float128-b-int-overload-function-is-overloaded","title":"<code>__mod__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-int-overload-function-is-overloaded_4","title":"<code>__divmod__(self, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-float128-b-int-overload-function-is-overloaded","title":"<code>__eq__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-float128-b-int-overload-function-is-overloaded","title":"<code>__ne__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-float128-b-int-overload-function-is-overloaded","title":"<code>__lt__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-float128-b-int-overload-function-is-overloaded","title":"<code>__gt__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-float128-b-int-overload-function-is-overloaded","title":"<code>__le__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-float128-b-int-overload-function-is-overloaded","title":"<code>__ge__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-float128-b-int-overload-function-is-overloaded","title":"<code>__pow__(self: float128, b: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#methods_4","title":"Methods","text":""},{"location":"libraries/api/internal/types/float/#sqrta-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.sqrt.f128(fp128 %a)\n%tmp = call fp128 @llvm.sqrt.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#sina-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.sin.f128(fp128 %a)\n%tmp = call fp128 @llvm.sin.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#cosa-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.cos.f128(fp128 %a)\n%tmp = call fp128 @llvm.cos.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#expa-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.exp.f128(fp128 %a)\n%tmp = call fp128 @llvm.exp.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#exp2a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.exp2.f128(fp128 %a)\n%tmp = call fp128 @llvm.exp2.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#loga-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.log.f128(fp128 %a)\n%tmp = call fp128 @llvm.log.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log10a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.log10.f128(fp128 %a)\n%tmp = call fp128 @llvm.log10.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#log2a-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.log2.f128(fp128 %a)\n%tmp = call fp128 @llvm.log2.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#rinta-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.rint.f128(fp128 %a)\n%tmp = call fp128 @llvm.rint.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#nearbyinta-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nearbyint(a: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.nearbyint.f128(fp128 %a)\n%tmp = call fp128 @llvm.nearbyint.f128(fp128 %a)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#mina-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>min(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.minnum.f128(fp128 %a, fp128 %b)\n%tmp = call fp128 @llvm.minnum.f128(fp128 %a, fp128 %b)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#maxa-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>max(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.maxnum.f128(fp128 %a, fp128 %b)\n%tmp = call fp128 @llvm.maxnum.f128(fp128 %a, fp128 %b)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#copysigna-float128-b-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign(a: float128, b: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.copysign.f128(fp128 %a, fp128 %b)\n%tmp = call fp128 @llvm.copysign.f128(fp128 %a, fp128 %b)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#fmaa-float128-b-float128-c-float128-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fma(a: float128, b: float128, c: float128)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare fp128 @llvm.fma.f128(fp128 %a, fp128 %b, fp128 %c)\n%tmp = call fp128 @llvm.fma.f128(fp128 %a, fp128 %b, fp128 %c)\nret fp128 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/float/#float-extend-class-is-extended-to-add-given-methods_1","title":"<code>float</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__suffix_f32__double","title":"<code>__suffix_f32__(double)</code>","text":""},{"location":"libraries/api/internal/types/float/#__suffix_f16__double","title":"<code>__suffix_f16__(double)</code>","text":""},{"location":"libraries/api/internal/types/float/#__suffix_bf16__double","title":"<code>__suffix_bf16__(double)</code>","text":""},{"location":"libraries/api/internal/types/float/#__suffix_f128__double","title":"<code>__suffix_f128__(double)</code>","text":""},{"location":"libraries/api/internal/types/float/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/float/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/float/#__add__self-b-float32-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self, b: float32)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-b-float32-overload-function-is-overloaded","title":"<code>__sub__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-b-float32-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self, b: float32)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-float32-overload-function-is-overloaded","title":"<code>__floordiv__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-b-float32-overload-function-is-overloaded","title":"<code>__truediv__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-b-float32-overload-function-is-overloaded","title":"<code>__mod__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-float32-overload-function-is-overloaded","title":"<code>__divmod__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-b-float32-overload-function-is-overloaded","title":"<code>__pow__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-b-float32-overload-function-is-overloaded","title":"<code>__eq__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-b-float32-overload-function-is-overloaded","title":"<code>__ne__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-b-float32-overload-function-is-overloaded","title":"<code>__lt__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-b-float32-overload-function-is-overloaded","title":"<code>__gt__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-b-float32-overload-function-is-overloaded","title":"<code>__le__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-b-float32-overload-function-is-overloaded","title":"<code>__ge__(self, b: float32)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__add__self-b-float16-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self, b: float16)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-b-float16-overload-function-is-overloaded","title":"<code>__sub__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-b-float16-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self, b: float16)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-float16-overload-function-is-overloaded","title":"<code>__floordiv__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-b-float16-overload-function-is-overloaded","title":"<code>__truediv__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-b-float16-overload-function-is-overloaded","title":"<code>__mod__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-float16-overload-function-is-overloaded","title":"<code>__divmod__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-b-float16-overload-function-is-overloaded","title":"<code>__pow__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-b-float16-overload-function-is-overloaded","title":"<code>__eq__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-b-float16-overload-function-is-overloaded","title":"<code>__ne__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-b-float16-overload-function-is-overloaded","title":"<code>__lt__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-b-float16-overload-function-is-overloaded","title":"<code>__gt__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-b-float16-overload-function-is-overloaded","title":"<code>__le__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-b-float16-overload-function-is-overloaded","title":"<code>__ge__(self, b: float16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__add__self-b-bfloat16-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self, b: bfloat16)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__sub__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-b-bfloat16-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self, b: bfloat16)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__floordiv__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__truediv__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__mod__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__divmod__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__pow__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__eq__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__ne__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__lt__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__gt__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__le__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-b-bfloat16-overload-function-is-overloaded","title":"<code>__ge__(self, b: bfloat16)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__add__self-b-float128-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__add__(self, b: float128)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__sub__self-b-float128-overload-function-is-overloaded","title":"<code>__sub__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mul__self-b-float128-commutative-binary-operator-is-commutative-overload-function-is-overloaded","title":"<code>__mul__(self, b: float128)</code>  @commutative Binary operator is commutative   @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__floordiv__self-b-float128-overload-function-is-overloaded","title":"<code>__floordiv__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__truediv__self-b-float128-overload-function-is-overloaded","title":"<code>__truediv__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__mod__self-b-float128-overload-function-is-overloaded","title":"<code>__mod__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__divmod__self-b-float128-overload-function-is-overloaded","title":"<code>__divmod__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__pow__self-b-float128-overload-function-is-overloaded","title":"<code>__pow__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__eq__self-b-float128-overload-function-is-overloaded","title":"<code>__eq__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ne__self-b-float128-overload-function-is-overloaded","title":"<code>__ne__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__lt__self-b-float128-overload-function-is-overloaded","title":"<code>__lt__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__gt__self-b-float128-overload-function-is-overloaded","title":"<code>__gt__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__le__self-b-float128-overload-function-is-overloaded","title":"<code>__le__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#__ge__self-b-float128-overload-function-is-overloaded","title":"<code>__ge__(self, b: float128)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/float/#f16-float16","title":"<code>f16</code> = <code>float16</code>","text":""},{"location":"libraries/api/internal/types/float/#bf16-bfloat16","title":"<code>bf16</code> = <code>bfloat16</code>","text":""},{"location":"libraries/api/internal/types/float/#f32-float32","title":"<code>f32</code> = <code>float32</code>","text":""},{"location":"libraries/api/internal/types/float/#f64-float","title":"<code>f64</code> = <code>float</code>","text":""},{"location":"libraries/api/internal/types/float/#f128-float128","title":"<code>f128</code> = <code>float128</code>","text":""},{"location":"libraries/api/internal/types/generator/","title":"module <code>internal.types.generator</code>","text":"<p>Source: <code>stdlib/internal/types/generator.codon</code></p>"},{"location":"libraries/api/internal/types/generator/#generatort-extend-class-is-extended-to-add-given-methods","title":"<code>Generator[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/generator/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/generator/#__promise__self-internal-function-is-compiler-generated","title":"<code>__promise__(self)</code>  @internal Function is compiler-generated","text":""},{"location":"libraries/api/internal/types/generator/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/types/generator/#__raw__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__raw__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %self\n</code></pre>"},{"location":"libraries/api/internal/types/generator/#__new__ptr-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(ptr: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %ptr\n</code></pre>"},{"location":"libraries/api/internal/types/generator/#__new__-overload-function-is-overloaded","title":"<code>__new__()</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/generator/#__done__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__done__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i1 @llvm.coro.done(ptr nocapture readonly)\n%0 = call i1 @llvm.coro.done(ptr %self)\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/generator/#__resume__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__resume__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.coro.resume(ptr)\ncall void @llvm.coro.resume(ptr %self)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/generator/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/generator/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/generator/#doneself","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/internal/types/generator/#nextself-generatort","title":"<code>next(self: Generator[T])</code>","text":""},{"location":"libraries/api/internal/types/generator/#sendself-what-t","title":"<code>send(self, what: T)</code>","text":""},{"location":"libraries/api/internal/types/generator/#destroyself-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>destroy(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.coro.destroy(ptr)\ncall void @llvm.coro.destroy(ptr %self)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/generator/#generator-generator","title":"<code>generator</code> = <code>Generator</code>","text":""},{"location":"libraries/api/internal/types/int/","title":"module <code>internal.types.int</code>","text":"<p>Source: <code>stdlib/internal/types/int.codon</code></p>"},{"location":"libraries/api/internal/types/int/#int-extend-class-is-extended-to-add-given-methods","title":"<code>int</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/int/#properties","title":"Properties","text":""},{"location":"libraries/api/internal/types/int/#real-property-method-is-a-class-property","title":"<code>real</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/int/#imag-property-method-is-a-class-property","title":"<code>imag</code>  @property Method is a class property","text":""},{"location":"libraries/api/internal/types/int/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/int/#__new__-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret i64 0\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__new__s-str-base-int-overload-function-is-overloaded","title":"<code>__new__(s: str, base: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/int/#__new__what-overload-function-is-overloaded","title":"<code>__new__(what)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/int/#__int__self","title":"<code>__int__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = sitofp i64 %self to double\nret double %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__index__self","title":"<code>__index__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i64 %self, 0\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__neg__self","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/internal/types/int/#__abs__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i64 @llvm.abs.i64(i64, i1)\n%0 = call i64 @llvm.abs.i64(i64 %self, i1 false)\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__lshift__self-other-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lshift__(self, other: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = shl i64 %self, %other\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__rshift__self-other-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__rshift__(self, other: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = ashr i64 %self, %other\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__add__self-b-bool-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(self, b: bool)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sext {=bool} %b to i64\n%1 = add i64 %self, %0\nret i64 %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__add__self-other-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(self, other: float)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fadd double %0, %other\nret double %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__add__self-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(self, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = add i64 %self, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__sub__self-other-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(self, other: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fsub double %0, %other\nret double %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__sub__self-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(self, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = sub i64 %self, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__mul__self-other-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(self, other: float)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fmul double %0, %other\nret double %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__mul__self-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-distributive-binary-operator-is-distributive-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(self, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @distributive Binary operator is distributive   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = mul i64 %self, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__floordiv__self-other-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floordiv__(self, other: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.floor.f64(double)\n%0 = sitofp i64 %self to double\n%1 = fdiv double %0, %other\n%2 = call double @llvm.floor.f64(double %1)\nret double %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__floordiv__self-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__floordiv__(self, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = sdiv i64 %self, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__truediv__self-other-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self, other: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fdiv double %0, %other\nret double %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__truediv__self-other-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self, other: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = sitofp i64 %other to double\n%2 = fdiv double %0, %1\nret double %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__mod__self-other-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(self, other: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = frem double %0, %other\nret double %1\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__mod__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mod__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = srem i64 %a, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__divmod__self-other-float","title":"<code>__divmod__(self, other: float)</code>","text":""},{"location":"libraries/api/internal/types/int/#__divmod__self-other-int-overload-function-is-overloaded","title":"<code>__divmod__(self, other: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/int/#__invert__a-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__invert__(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = xor i64 %a, -1\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__and__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__and__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = and i64 %a, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__or__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__or__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = or i64 %a, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__xor__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__xor__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = xor i64 %a, %b\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__bitreverse__a-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bitreverse__(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i64 @llvm.bitreverse.i64(i64 %a)\n%tmp = call i64 @llvm.bitreverse.i64(i64 %a)\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__bswap__a-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bswap__(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i64 @llvm.bswap.i64(i64 %a)\n%tmp = call i64 @llvm.bswap.i64(i64 %a)\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__ctpop__a-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ctpop__(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i64 @llvm.ctpop.i64(i64 %a)\n%tmp = call i64 @llvm.ctpop.i64(i64 %a)\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__ctlz__a-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ctlz__(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i64 @llvm.ctlz.i64(i64 %a, i1 %is_zero_undef)\n%tmp = call i64 @llvm.ctlz.i64(i64 %a, i1 false)\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__cttz__a-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__cttz__(a: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i64 @llvm.cttz.i64(i64 %a, i1 %is_zero_undef)\n%tmp = call i64 @llvm.cttz.i64(i64 %a, i1 false)\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__eq__self-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(self, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fcmp oeq double %0, %b\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__eq__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = icmp eq i64 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__ne__self-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(self, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fcmp one double %0, %b\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__ne__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = icmp ne i64 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__lt__self-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(self, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fcmp olt double %0, %b\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__lt__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = icmp slt i64 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__gt__self-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(self, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fcmp ogt double %0, %b\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__gt__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = icmp sgt i64 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__le__self-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fcmp ole double %0, %b\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__le__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = icmp sle i64 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__ge__self-b-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self, b: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i64 %self to double\n%1 = fcmp oge double %0, %b\n%2 = zext i1 %1 to i8\nret i8 %2\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__ge__a-int-b-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(a: int, b: int)</code>  @pure Function has no side effects and returns same value for same inputs   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = icmp sge i64 %a, %b\n%res = zext i1 %tmp to i8\nret i8 %res\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__pow__self-exp-float","title":"<code>__pow__(self, exp: float)</code>","text":""},{"location":"libraries/api/internal/types/int/#__pow__self-exp-int-overload-function-is-overloaded","title":"<code>__pow__(self, exp: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/int/#__atomic_xchg__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_xchg__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw xchg ptr %d, i64 %b seq_cst\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_add__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_add__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw add ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_sub__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_sub__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw sub ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_and__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_and__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw and ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_nand__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_nand__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw nand ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_or__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_or__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw or ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_xor__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_xor__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw xor ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_min__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_min__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw min ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__atomic_max__d-ptrint-b-int-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__atomic_max__(d: Ptr[int], b: int)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%tmp = atomicrmw max ptr %d, i64 %b seq_cst\nret i64 %tmp\n</code></pre>"},{"location":"libraries/api/internal/types/int/#__match__self-obj-int","title":"<code>__match__(self, obj: int)</code>","text":""},{"location":"libraries/api/internal/types/int/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/int/#popcntself","title":"<code>popcnt(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/","title":"module <code>internal.types.intn</code>","text":"<p>Source: <code>stdlib/internal/types/intn.codon</code></p>"},{"location":"libraries/api/internal/types/intn/#intn-extend-class-is-extended-to-add-given-methods","title":"<code>Int[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/intn/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/intn/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-float-overload-function-is-overloaded","title":"<code>__new__(what: float)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-intm-m-literalint-overload-function-is-overloaded","title":"<code>__new__(what: Int[M], M: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-uintm-m-literalint-overload-function-is-overloaded","title":"<code>__new__(what: UInt[M], M: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-uintn-overload-function-is-overloaded","title":"<code>__new__(what: UInt[N])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-int-overload-function-is-overloaded","title":"<code>__new__(what: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-str-overload-function-is-overloaded","title":"<code>__new__(what: str)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__int__self","title":"<code>__int__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__index__self","title":"<code>__index__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i{=N} %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i{=N} %self, 0\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub i{=N} 0, %self\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__invert__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__invert__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = xor i{=N} %self, -1\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__abs__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__abs__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare i{=N} @llvm.abs.i{=N}(i{=N}, i1)\n%0 = call i{=N} @llvm.abs.i{=N}(i{=N} %self, i1 false)\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__add__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = add i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__sub__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__mul__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-distributive-binary-operator-is-distributive-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @distributive Binary operator is distributive   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = mul i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__floordiv__self-other-intn","title":"<code>__floordiv__(self, other: Int[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__truediv__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sitofp i{=N} %self to double\n%1 = sitofp i{=N} %other to double\n%2 = fdiv double %0, %1\nret double %2\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__mod__self-other-intn","title":"<code>__mod__(self, other: Int[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__divmod__self-other-intn","title":"<code>__divmod__(self, other: Int[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__lshift__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lshift__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = shl i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__rshift__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__rshift__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = ashr i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__eq__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp eq i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__ne__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__lt__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp slt i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__gt__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp sgt i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__le__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp sle i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__ge__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp sge i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__and__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__and__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = and i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__or__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__or__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = or i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__xor__self-other-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__xor__(self, other: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = xor i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__pow__self-exp-intn","title":"<code>__pow__(self, exp: Int[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/intn/#popcntself","title":"<code>popcnt(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#len","title":"<code>len()</code>","text":""},{"location":"libraries/api/internal/types/intn/#uintn-extend-class-is-extended-to-add-given-methods","title":"<code>UInt[N]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/intn/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/intn/#__new___1","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-uintn-overload-function-is-overloaded_1","title":"<code>__new__(what: UInt[N])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-float-overload-function-is-overloaded_1","title":"<code>__new__(what: float)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-uintm-m-literalint-overload-function-is-overloaded_1","title":"<code>__new__(what: UInt[M], M: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-intm-m-literalint-overload-function-is-overloaded_1","title":"<code>__new__(what: Int[M], M: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-intn-overload-function-is-overloaded","title":"<code>__new__(what: Int[N])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-intn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(what: Int[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret i{=N} %what\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__new__what-int","title":"<code>__new__(what: int)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__new__what-str","title":"<code>__new__(what: str)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__int__self_1","title":"<code>__int__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__index__self_1","title":"<code>__index__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__copy__self_1","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__deepcopy__self_1","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__hash__self_1","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__float__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__float__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp i{=N} %self to double\nret double %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i{=N} %self, 0\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__pos__self_1","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__neg__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__neg__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub i{=N} 0, %self\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__invert__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir_1","title":"<code>__invert__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = xor i{=N} %self, -1\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__abs__self","title":"<code>__abs__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#__add__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = add i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__sub__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__mul__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-distributive-binary-operator-is-distributive-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__mul__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @distributive Binary operator is distributive   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = mul i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__floordiv__self-other-uintn","title":"<code>__floordiv__(self, other: UInt[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__truediv__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__truediv__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = uitofp i{=N} %self to double\n%1 = uitofp i{=N} %other to double\n%2 = fdiv double %0, %1\nret double %2\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__mod__self-other-uintn","title":"<code>__mod__(self, other: UInt[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__divmod__self-other-uintn","title":"<code>__divmod__(self, other: UInt[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__lshift__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lshift__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = shl i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__rshift__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__rshift__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = lshr i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__eq__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp eq i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__ne__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__lt__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ult i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__gt__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ugt i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__le__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ule i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__ge__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp uge i{=N} %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__and__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__and__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = and i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__or__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__or__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = or i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__xor__self-other-uintn-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__xor__(self, other: UInt[N])</code>  @pure Function has no side effects and returns same value for same inputs   @commutative Binary operator is commutative   @associative Binary operator is associative   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = xor i{=N} %self, %other\nret i{=N} %0\n</code></pre>"},{"location":"libraries/api/internal/types/intn/#__pow__self-exp-uintn","title":"<code>__pow__(self, exp: UInt[N])</code>","text":""},{"location":"libraries/api/internal/types/intn/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#methods_1","title":"Methods","text":""},{"location":"libraries/api/internal/types/intn/#popcntself_1","title":"<code>popcnt(self)</code>","text":""},{"location":"libraries/api/internal/types/intn/#len_1","title":"<code>len()</code>","text":""},{"location":"libraries/api/internal/types/intn/#i1-int1","title":"<code>i1</code> = <code>Int[1]</code>","text":""},{"location":"libraries/api/internal/types/intn/#i8-int8","title":"<code>i8</code> = <code>Int[8]</code>","text":""},{"location":"libraries/api/internal/types/intn/#i16-int16","title":"<code>i16</code> = <code>Int[16]</code>","text":""},{"location":"libraries/api/internal/types/intn/#i32-int32","title":"<code>i32</code> = <code>Int[32]</code>","text":""},{"location":"libraries/api/internal/types/intn/#i64-int64","title":"<code>i64</code> = <code>Int[64]</code>","text":""},{"location":"libraries/api/internal/types/intn/#i128-int128","title":"<code>i128</code> = <code>Int[128]</code>","text":""},{"location":"libraries/api/internal/types/intn/#u1-uint1","title":"<code>u1</code> = <code>UInt[1]</code>","text":""},{"location":"libraries/api/internal/types/intn/#u8-uint8","title":"<code>u8</code> = <code>UInt[8]</code>","text":""},{"location":"libraries/api/internal/types/intn/#u16-uint16","title":"<code>u16</code> = <code>UInt[16]</code>","text":""},{"location":"libraries/api/internal/types/intn/#u32-uint32","title":"<code>u32</code> = <code>UInt[32]</code>","text":""},{"location":"libraries/api/internal/types/intn/#u64-uint64","title":"<code>u64</code> = <code>UInt[64]</code>","text":""},{"location":"libraries/api/internal/types/intn/#u128-uint128","title":"<code>u128</code> = <code>UInt[128]</code>","text":""},{"location":"libraries/api/internal/types/optional/","title":"module <code>internal.types.optional</code>","text":"<p>Source: <code>stdlib/internal/types/optional.codon</code></p>"},{"location":"libraries/api/internal/types/optional/#optionalt-extend-class-is-extended-to-add-given-methods","title":"<code>Optional[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/optional/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/optional/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/optional/#__new__what-t-overload-function-is-overloaded","title":"<code>__new__(what: T)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/optional/#__has__self","title":"<code>__has__(self)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__val__self","title":"<code>__val__(self)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__val_or__self-default-t","title":"<code>__val_or__(self, default: T)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__eq__self-other-t","title":"<code>__eq__(self, other: T)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__eq__self-other-optionalt-overload-function-is-overloaded","title":"<code>__eq__(self, other: Optional[T])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/optional/#__ne__self-other-t","title":"<code>__ne__(self, other: T)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__ne__self-other-optionalt-overload-function-is-overloaded","title":"<code>__ne__(self, other: Optional[T])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/optional/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/optional/#__is_optional__self-other-optionalt","title":"<code>__is_optional__(self, other: Optional[T])</code>","text":""},{"location":"libraries/api/internal/types/optional/#optional-optional","title":"<code>optional</code> = <code>Optional</code>","text":""},{"location":"libraries/api/internal/types/optional/#unwrapopt-optionalt-t-type","title":"<code>unwrap(opt: Optional[T], T: type)</code>","text":""},{"location":"libraries/api/internal/types/ptr/","title":"module <code>internal.types.ptr</code>","text":"<p>Source: <code>stdlib/internal/types/ptr.codon</code></p>"},{"location":"libraries/api/internal/types/ptr/#ptrt-extend-class-is-extended-to-add-given-methods","title":"<code>Ptr[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/ptr/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/ptr/#__new__-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr null\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__new__sz-int-overload-function-is-overloaded-internal-function-is-compiler-generated","title":"<code>__new__(sz: int)</code>  @overload Function is overloaded   @internal Function is compiler-generated","text":""},{"location":"libraries/api/internal/types/ptr/#__new__other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %other\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__new__other-ptr-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-overload-function-is-overloaded-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__new__(other: Ptr)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @overload Function is overloaded   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %other\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__int__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__int__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = ptrtoint ptr %self to i64\nret i64 %0\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__copy__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__copy__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %self\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__bool__self-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__bool__(self)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne ptr %self, null\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__getitem__self-index-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__getitem__(self, index: int)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = getelementptr {=T}, ptr %self, i64 %index\n%1 = load {=T}, ptr %0\nret {=T} %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__setitem__self-index-int-what-t-self_captures-methods-self-argument-captures-other-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__setitem__(self, index: int, what: T)</code>  @self_captures Method's 'self' argument captures other arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = getelementptr {=T}, ptr %self, i64 %index\nstore {=T} %what, ptr %0\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__add__self-other-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__add__(self, other: int)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = getelementptr {=T}, ptr %self, i64 %other\nret ptr %0\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__sub__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = ptrtoint ptr %self to i64\n%1 = ptrtoint ptr %other to i64\n%2 = sub i64 %0, %1\n%3 = sdiv exact i64 %2, ptrtoint (ptr getelementptr ({=T}, {=T}* null, i32 1) to i64)\nret i64 %3\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__sub__self-other-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__sub__(self, other: int)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = sub i64 0, %other\n%1 = getelementptr {=T}, {=T}* %self, i64 %0\nret {=T}* %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__eq__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__eq__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp eq ptr %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__ne__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ne__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp ne ptr %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__lt__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__lt__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp slt ptr %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__gt__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__gt__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp sgt ptr %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__le__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__le__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp sle ptr %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__ge__self-other-ptrt-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__ge__(self, other: Ptr[T])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%0 = icmp sge ptr %self, %other\n%1 = zext i1 %0 to i8\nret i8 %1\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_r0__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_r0__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 0, i32 0, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_r1__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_r1__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 0, i32 1, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_r2__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_r2__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 0, i32 2, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_r3__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_r3__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 0, i32 3, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_w0__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_w0__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 1, i32 0, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_w1__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_w1__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 1, i32 1, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_w2__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_w2__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 1, i32 2, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__prefetch_w3__self-nocapture-function-does-not-capture-arguments-return-value-might-capture-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>__prefetch_w3__(self)</code>  @nocapture Function does not capture arguments (return value might capture)   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.prefetch(ptr nocapture readonly, i32, i32, i32)\ncall void @llvm.prefetch(ptr %self, i32 1, i32 3, i32 1)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/ptr/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/ptr/#as_byteself-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-derives-function-return-value-captures-arguments-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>as_byte(self)</code>  @pure Function has no side effects and returns same value for same inputs   @derives Function return value captures arguments   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret ptr %self\n</code></pre>"},{"location":"libraries/api/internal/types/ptr/#ptr-ptr","title":"<code>ptr</code> = <code>Ptr</code>","text":""},{"location":"libraries/api/internal/types/ptr/#jar-ptrbyte","title":"<code>Jar</code> = <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/types/ptr/#nonetype-extend-class-is-extended-to-add-given-methods","title":"<code>NoneType</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/ptr/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/ptr/#__eq__self-other-nonetype","title":"<code>__eq__(self, other: NoneType)</code>","text":""},{"location":"libraries/api/internal/types/ptr/#__ne__self-other-nonetype","title":"<code>__ne__(self, other: NoneType)</code>","text":""},{"location":"libraries/api/internal/types/ptr/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/ptr/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/range/","title":"module <code>internal.types.range</code>","text":"<p>Source: <code>stdlib/internal/types/range.codon</code></p>"},{"location":"libraries/api/internal/types/range/#range-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>range</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/types/range/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/range/#start-int","title":"<code>start</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/range/#stop-int","title":"<code>stop</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/range/#step-int","title":"<code>step</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/range/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/range/#__new__start-int-stop-int-overload-function-is-overloaded","title":"<code>__new__(start: int, stop: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__new__stop-int-overload-function-is-overloaded","title":"<code>__new__(stop: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__new__start-int-stop-int-step-int-overload-function-is-overloaded","title":"<code>__new__(start: int, stop: int, step: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__getitem__self-idx-int-overload-function-is-overloaded","title":"<code>__getitem__(self, idx: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__getitem__self-s-slice-overload-function-is-overloaded","title":"<code>__getitem__(self, s: Slice)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__contains__self-idx-int","title":"<code>__contains__(self, idx: int)</code>","text":""},{"location":"libraries/api/internal/types/range/#__iter__self-overload-function-is-overloaded","title":"<code>__iter__(self)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__len__self-overload-function-is-overloaded","title":"<code>__len__(self)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/range/#__reversed__self","title":"<code>__reversed__(self)</code>","text":""},{"location":"libraries/api/internal/types/range/#__repr__self-overload-function-is-overloaded","title":"<code>__repr__(self)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/range/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/range/#indexself-n-int","title":"<code>index(self, n: int)</code>","text":""},{"location":"libraries/api/internal/types/range/#countself-n-int","title":"<code>count(self, n: int)</code>","text":""},{"location":"libraries/api/internal/types/slice/","title":"module <code>internal.types.slice</code>","text":"<p>Source: <code>stdlib/internal/types/slice.codon</code></p>"},{"location":"libraries/api/internal/types/slice/#slicetuv-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Slice[T,U,V]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/types/slice/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/slice/#start-optionalt","title":"<code>start</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/internal/types/slice/#stop-optionalu","title":"<code>stop</code>: <code>Optional[U]</code>","text":""},{"location":"libraries/api/internal/types/slice/#step-optionalv","title":"<code>step</code>: <code>Optional[V]</code>","text":""},{"location":"libraries/api/internal/types/slice/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/slice/#u-type","title":"<code>U</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/slice/#v-type","title":"<code>V</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/slice/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/slice/#__new__stop-optionalu-u-type-int","title":"<code>__new__(stop: Optional[U], U: type = int)</code>","text":""},{"location":"libraries/api/internal/types/slice/#__new__start-optionalt-stop-optionalu-t-type-int-u-type-int-overload-function-is-overloaded","title":"<code>__new__(start: Optional[T], stop: Optional[U], T: type = int, U: type = int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/slice/#__new__start-optionalt-stop-optionalu-step-optionalv-t-type-int-u-type-int-v-type-int-overload-function-is-overloaded","title":"<code>__new__(start: Optional[T], stop: Optional[U], step: Optional[V], T: type = int, U: type = int, V: type = int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/slice/#__repr__self-overload-function-is-overloaded","title":"<code>__repr__(self)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/slice/#__eq__self-other-slice-overload-function-is-overloaded","title":"<code>__eq__(self, other: Slice)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/slice/#__ne__self-other-slice-overload-function-is-overloaded","title":"<code>__ne__(self, other: Slice)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/slice/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/slice/#adjust_indicesself-length-int","title":"<code>adjust_indices(self, length: int)</code>","text":""},{"location":"libraries/api/internal/types/slice/#adjust_indices_helperlength-int-start-int-stop-int-step-int","title":"<code>adjust_indices_helper(length: int, start: int, stop: int, step: int)</code>","text":""},{"location":"libraries/api/internal/types/slice/#indicesself-length-int","title":"<code>indices(self, length: int)</code>","text":""},{"location":"libraries/api/internal/types/slice/#slice-slice","title":"<code>slice</code> = <code>Slice</code>","text":""},{"location":"libraries/api/internal/types/str/","title":"module <code>internal.types.str</code>","text":"<p>Source: <code>stdlib/internal/types/str.codon</code></p>"},{"location":"libraries/api/internal/types/str/#strlena-cobj-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-c-function-is-external-c-function","title":"<code>strlen(a: cobj)</code>  @pure Function has no side effects and returns same value for same inputs   @C Function is external C function","text":""},{"location":"libraries/api/internal/types/str/#str-extend-class-is-extended-to-add-given-methods","title":"<code>str</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/str/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/str/#__new__l-int-p-ptrbyte-internal-function-is-compiler-generated","title":"<code>__new__(l: int, p: Ptr[byte])</code>  @internal Function is compiler-generated","text":""},{"location":"libraries/api/internal/types/str/#__new__p-ptrbyte-l-int-overload-function-is-overloaded","title":"<code>__new__(p: Ptr[byte], l: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/str/#__new__-overload-function-is-overloaded","title":"<code>__new__()</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/str/#__new__what-overload-function-is-overloaded","title":"<code>__new__(what)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/internal/types/str/#__str__what-str","title":"<code>__str__(what: str)</code>","text":""},{"location":"libraries/api/internal/types/str/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/types/str/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/str/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/str/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/str/#__ptrcopy__self","title":"<code>__ptrcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/str/#__add__self-other-str","title":"<code>__add__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/types/str/#__eq__self-other-str","title":"<code>__eq__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/types/str/#__match__self-obj-str","title":"<code>__match__(self, obj: str)</code>","text":""},{"location":"libraries/api/internal/types/str/#__ne__self-other-str","title":"<code>__ne__(self, other: str)</code>","text":""},{"location":"libraries/api/internal/types/str/#__prefix_b__s-str-n-literalint","title":"<code>__prefix_b__(s: str, N: Literal[int])</code>","text":""},{"location":"libraries/api/internal/types/str/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/str/#memcpydest-ptrbyte-src-ptrbyte-len-int-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>memcpy(dest: Ptr[byte], src: Ptr[byte], len: int)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.memcpy.p0i8.p0i8.i64(ptr %dest, ptr %src, i64 %len, i32 %align, i1 %isvolatile)\ncall void @llvm.memcpy.p0i8.p0i8.i64(ptr %dest, ptr %src, i64 %len, i32 0, i1 false)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/str/#memmovedest-ptrbyte-src-ptrbyte-len-int-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>memmove(dest: Ptr[byte], src: Ptr[byte], len: int)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.memmove.p0i8.p0i8.i64(ptr %dest, ptr %src, i64 %len, i32 %align, i1 %isvolatile)\ncall void @llvm.memmove.p0i8.p0i8.i64(ptr %dest, ptr %src, i64 %len, i32 0, i1 false)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/str/#memsetdest-ptrbyte-val-byte-len-int-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>memset(dest: Ptr[byte], val: byte, len: int)</code>  @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare void @llvm.memset.p0i8.i64(ptr %dest, i8 %val, i64 %len, i32 %align, i1 %isvolatile)\ncall void @llvm.memset.p0i8.i64(ptr %dest, i8 %val, i64 %len, i32 0, i1 false)\nret {} {}\n</code></pre>"},{"location":"libraries/api/internal/types/str/#c_strself","title":"<code>c_str(self)</code>","text":""},{"location":"libraries/api/internal/types/str/#from_ptrt-cobj","title":"<code>from_ptr(t: cobj)</code>","text":""},{"location":"libraries/api/internal/types/str/#catargs","title":"<code>cat(*args)</code>","text":""},{"location":"libraries/api/internal/types/strbuf/","title":"module <code>internal.types.strbuf</code>","text":"<p>Source: <code>stdlib/internal/types/strbuf.codon</code></p>"},{"location":"libraries/api/internal/types/strbuf/#strbuf","title":"<code>strbuf</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/strbuf/#data-ptrbyte","title":"<code>data</code>: <code>Ptr[byte]</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#n-int","title":"<code>n</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#m-int","title":"<code>m</code>: <code>int</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/strbuf/#__init__self-capacity-int-16","title":"<code>__init__(self, capacity: int = 16)</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/strbuf/#appendself-s-str","title":"<code>append(self, s: str)</code>","text":""},{"location":"libraries/api/internal/types/strbuf/#reverseself","title":"<code>reverse(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/","title":"<code>internal.types.collections</code>","text":"<ul> <li><code>dict</code></li> <li><code>list</code></li> <li><code>set</code></li> <li><code>tuple</code></li> </ul>"},{"location":"libraries/api/internal/types/collections/dict/","title":"module <code>internal.types.collections.dict</code>","text":"<p>Source: <code>stdlib/internal/types/collections/dict.codon</code></p>"},{"location":"libraries/api/internal/types/collections/dict/#dictkv","title":"<code>Dict[K,V]</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/collections/dict/#k-type","title":"<code>K</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#v-type","title":"<code>V</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/collections/dict/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__init__self-g-generatortuplek-v","title":"<code>__init__(self, g: Generator[Tuple[K, V]])</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__init__self-other-dictk-v","title":"<code>__init__(self, other: Dict[K, V])</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__getitem__self-key-k","title":"<code>__getitem__(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__setitem__self-key-k-val-v","title":"<code>__setitem__(self, key: K, val: V)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__delitem__self-key-k","title":"<code>__delitem__(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__contains__self-key-k","title":"<code>__contains__(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__eq__self-other-dictk-v","title":"<code>__eq__(self, other: Dict[K, V])</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__ne__self-other-dictk-v","title":"<code>__ne__(self, other: Dict[K, V])</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__or__self-other","title":"<code>__or__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__ior__self-other","title":"<code>__ior__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__dict_do_op_throws__self-key-k-other-z-op-f-f-type-z-type","title":"<code>__dict_do_op_throws__(self, key: K, other: Z, op: F, F: type, Z: type)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#__dict_do_op__self-key-k-other-z-dflt-v-op-f-f-type-z-type","title":"<code>__dict_do_op__(self, key: K, other: Z, dflt: V, op: F, F: type, Z: type)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/collections/dict/#resizeself-new_n_buckets-int","title":"<code>resize(self, new_n_buckets: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#getself-key-k-s-v","title":"<code>get(self, key: K, s: V)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#setdefaultself-key-k-val-v","title":"<code>setdefault(self, key: K, val: V)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#incrementself-key-k-by-t-1-t-type","title":"<code>increment(self, key: K, by: T = 1, T: type)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#updateself-other","title":"<code>update(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#updateself-other-dictk-v","title":"<code>update(self, other: Dict[K, V])</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#popself-key-k","title":"<code>pop(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#popitemself","title":"<code>popitem(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#clearself","title":"<code>clear(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#itemsself","title":"<code>items(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#keysself","title":"<code>keys(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#valuesself","title":"<code>values(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#copyself","title":"<code>copy(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#fromkeysks-generatork-v-v-k-type-v-type","title":"<code>fromkeys(ks: Generator[K], v: V, K: type, V: type)</code>","text":""},{"location":"libraries/api/internal/types/collections/dict/#dict-dict","title":"<code>dict</code> = <code>Dict</code>","text":""},{"location":"libraries/api/internal/types/collections/list/","title":"module <code>internal.types.collections.list</code>","text":"<p>Source: <code>stdlib/internal/types/collections/list.codon</code></p>"},{"location":"libraries/api/internal/types/collections/list/#listt-extend-class-is-extended-to-add-given-methods","title":"<code>List[T]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/internal/types/collections/list/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/collections/list/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__init__self-capacity-int","title":"<code>__init__(self, capacity: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__init__self-other-listt","title":"<code>__init__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__init__self-it-generatort","title":"<code>__init__(self, it: Generator[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__init__self-arr-arrayt-len-int","title":"<code>__init__(self, arr: Array[T], len: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__getitem__self-idx-int","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__setitem__self-idx-int-val-t","title":"<code>__setitem__(self, idx: int, val: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__delitem__self-idx-int","title":"<code>__delitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__eq__self-other-listt","title":"<code>__eq__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__ne__self-other-listt","title":"<code>__ne__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__getitem__self-s-slice","title":"<code>__getitem__(self, s: Slice)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__setitem__self-s-slice-other-generatort","title":"<code>__setitem__(self, s: Slice, other: Generator[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__setitem__self-s-slice-other-listt","title":"<code>__setitem__(self, s: Slice, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__delitem__self-s-slice","title":"<code>__delitem__(self, s: Slice)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__contains__self-x-t","title":"<code>__contains__(self, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__reversed__self","title":"<code>__reversed__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__add__self-other-listt","title":"<code>__add__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__iadd__self-other-listt","title":"<code>__iadd__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__mul__self-n-int","title":"<code>__mul__(self, n: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__rmul__self-n-int","title":"<code>__rmul__(self, n: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__imul__self-n-int","title":"<code>__imul__(self, n: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__lt__self-other-listt","title":"<code>__lt__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__gt__self-other-listt","title":"<code>__gt__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__le__self-other-listt","title":"<code>__le__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#__ge__self-other-listt","title":"<code>__ge__(self, other: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/collections/list/#as_listx-staticmethod-method-is-static-does-not-take-self-argument","title":"<code>as_list(x)</code>  @staticmethod Method is static (does not take 'self' argument)","text":""},{"location":"libraries/api/internal/types/collections/list/#appendself-x-t","title":"<code>append(self, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#extendself-itr-generatort","title":"<code>extend(self, itr: Generator[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#insertself-idx-int-x-t","title":"<code>insert(self, idx: int, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#popself-idx-int-1","title":"<code>pop(self, idx: int = -1)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#removeself-x-t","title":"<code>remove(self, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#clearself","title":"<code>clear(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#indexself-x-t","title":"<code>index(self, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#findself-x-t","title":"<code>find(self, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#countself-x-t","title":"<code>count(self, x: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#reverseself","title":"<code>reverse(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#copyself","title":"<code>copy(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/list/#list-list","title":"<code>list</code> = <code>List</code>","text":""},{"location":"libraries/api/internal/types/collections/set/","title":"module <code>internal.types.collections.set</code>","text":"<p>Source: <code>stdlib/internal/types/collections/set.codon</code></p>"},{"location":"libraries/api/internal/types/collections/set/#setk","title":"<code>Set[K]</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/collections/set/#k-type","title":"<code>K</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/collections/set/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__init__self-g-generatork","title":"<code>__init__(self, g: Generator[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__sub__self-other-setk","title":"<code>__sub__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__isub__self-other-setk","title":"<code>__isub__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__and__self-other-setk-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative","title":"<code>__and__(self, other: Set[K])</code>  @commutative Binary operator is commutative   @associative Binary operator is associative","text":""},{"location":"libraries/api/internal/types/collections/set/#__iand__self-other-setk","title":"<code>__iand__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__or__self-other-setk-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative","title":"<code>__or__(self, other: Set[K])</code>  @commutative Binary operator is commutative   @associative Binary operator is associative","text":""},{"location":"libraries/api/internal/types/collections/set/#__ior__self-other-setk","title":"<code>__ior__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__xor__self-other-setk-commutative-binary-operator-is-commutative-associative-binary-operator-is-associative","title":"<code>__xor__(self, other: Set[K])</code>  @commutative Binary operator is commutative   @associative Binary operator is associative","text":""},{"location":"libraries/api/internal/types/collections/set/#__ixor__self-other-setk","title":"<code>__ixor__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__contains__self-key-k","title":"<code>__contains__(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__eq__self-other-setk","title":"<code>__eq__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__ne__self-other-setk","title":"<code>__ne__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__le__self-other-setk","title":"<code>__le__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__ge__self-other-setk","title":"<code>__ge__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__lt__self-other-setk","title":"<code>__lt__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__gt__self-other-setk","title":"<code>__gt__(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__deepcopy__self","title":"<code>__deepcopy__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#methods","title":"Methods","text":""},{"location":"libraries/api/internal/types/collections/set/#resizeself-new_n_buckets-int","title":"<code>resize(self, new_n_buckets: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#addself-key-k","title":"<code>add(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#updateself-other-generatork","title":"<code>update(self, other: Generator[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#removeself-key-k","title":"<code>remove(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#popself","title":"<code>pop(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#discardself-key-k","title":"<code>discard(self, key: K)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#differenceself-other-setk","title":"<code>difference(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#difference_updateself-other-setk","title":"<code>difference_update(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#intersectionself-other-setk","title":"<code>intersection(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#intersection_updateself-other-setk","title":"<code>intersection_update(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#symmetric_differenceself-other-setk","title":"<code>symmetric_difference(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#symmetric_difference_updateself-other-setk","title":"<code>symmetric_difference_update(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#unionself-other-setk","title":"<code>union(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#isdisjointself-other-setk","title":"<code>isdisjoint(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#issubsetself-other-setk","title":"<code>issubset(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#issupersetself-other-setk","title":"<code>issuperset(self, other: Set[K])</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#clearself","title":"<code>clear(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#copyself","title":"<code>copy(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/set/#set-set","title":"<code>set</code> = <code>Set</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/","title":"module <code>internal.types.collections.tuple</code>","text":"<p>Source: <code>stdlib/internal/types/collections/tuple.codon</code></p>"},{"location":"libraries/api/internal/types/collections/tuple/#dynamictuplet-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>DynamicTuple[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/internal/types/collections/tuple/#fields","title":"Fields","text":""},{"location":"libraries/api/internal/types/collections/tuple/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__new__x-listt","title":"<code>__new__(x: List[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__new__x-generatort","title":"<code>__new__(x: Generator[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__eq__self-other","title":"<code>__eq__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__eq__self-other-dynamictuplet","title":"<code>__eq__(self, other: DynamicTuple[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__ne__self-other","title":"<code>__ne__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__ne__self-other-dynamictuplet","title":"<code>__ne__(self, other: DynamicTuple[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__lt__self-other","title":"<code>__lt__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__gt__self-other","title":"<code>__gt__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__le__self-other","title":"<code>__le__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__ge__self-other","title":"<code>__ge__(self, other)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__lt__self-other-dynamictuplet","title":"<code>__lt__(self, other: DynamicTuple[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__gt__self-other-dynamictuplet","title":"<code>__gt__(self, other: DynamicTuple[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__le__self-other-dynamictuplet","title":"<code>__le__(self, other: DynamicTuple[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__ge__self-other-dynamictuplet","title":"<code>__ge__(self, other: DynamicTuple[T])</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__hash__self","title":"<code>__hash__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__contains__self-item-t","title":"<code>__contains__(self, item: T)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__getitem__self-idx-int","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__getitem__self-s-slice","title":"<code>__getitem__(self, s: Slice)</code>","text":""},{"location":"libraries/api/internal/types/collections/tuple/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/numpy/","title":"<code>numpy</code>","text":"<ul> <li><code>const</code></li> <li><code>dragon4</code></li> <li><code>dtype</code></li> <li><code>emath</code></li> <li><code>fft</code></li> <li><code>format</code></li> <li><code>functional</code></li> <li><code>fusion</code></li> <li><code>indexing</code></li> <li><code>interp</code></li> <li><code>lib</code></li> <li><code>linalg</code></li> <li><code>linalg_sym</code></li> <li><code>misc</code></li> <li><code>ndarray</code></li> <li><code>ndgpu</code></li> <li><code>ndmath</code></li> <li><code>npdatetime</code></li> <li><code>npio</code></li> <li><code>operators</code></li> <li><code>pybridge</code></li> <li><code>random</code></li> <li><code>reductions</code></li> <li><code>routines</code></li> <li><code>sorting</code></li> <li><code>statistics</code></li> <li><code>ufunc</code></li> <li><code>util</code></li> <li><code>window</code></li> <li><code>zmath</code></li> </ul> <p>Source: <code>stdlib/numpy/__init__.codon</code></p>"},{"location":"libraries/api/numpy/const/","title":"module <code>numpy.const</code>","text":"<p>Source: <code>stdlib/numpy/const.codon</code></p>"},{"location":"libraries/api/numpy/const/#inf-_inf","title":"<code>inf</code> = <code>_inf()</code>","text":""},{"location":"libraries/api/numpy/const/#infty-_inf","title":"<code>infty</code> = <code>_inf()</code>","text":""},{"location":"libraries/api/numpy/const/#inf-_inf_1","title":"<code>Inf</code> = <code>_inf()</code>","text":""},{"location":"libraries/api/numpy/const/#infinity-_inf","title":"<code>Infinity</code> = <code>_inf()</code>","text":""},{"location":"libraries/api/numpy/const/#pinf-_inf","title":"<code>PINF</code> = <code>_inf()</code>","text":""},{"location":"libraries/api/numpy/const/#ninf-_ninf","title":"<code>NINF</code> = <code>_ninf()</code>","text":""},{"location":"libraries/api/numpy/const/#pzero-_pzero","title":"<code>PZERO</code> = <code>_pzero()</code>","text":""},{"location":"libraries/api/numpy/const/#nzero-_nzero","title":"<code>NZERO</code> = <code>_nzero()</code>","text":""},{"location":"libraries/api/numpy/const/#nan-_nan","title":"<code>nan</code> = <code>_nan()</code>","text":""},{"location":"libraries/api/numpy/const/#nan-_nan_1","title":"<code>NaN</code> = <code>_nan()</code>","text":""},{"location":"libraries/api/numpy/const/#nan-_nan_2","title":"<code>NAN</code> = <code>_nan()</code>","text":""},{"location":"libraries/api/numpy/const/#pi-_pi","title":"<code>pi</code> = <code>_pi()</code>","text":""},{"location":"libraries/api/numpy/const/#e-_e","title":"<code>e</code> = <code>_e()</code>","text":""},{"location":"libraries/api/numpy/const/#euler_gamma-0577215664901532860606512090082402431","title":"<code>euler_gamma</code> = <code>0.577215664901532860606512090082402431</code>","text":""},{"location":"libraries/api/numpy/const/#newaxis-none","title":"<code>newaxis</code> = <code>None</code>","text":""},{"location":"libraries/api/numpy/dragon4/","title":"module <code>numpy.dragon4</code>","text":"<p>Source: <code>stdlib/numpy/dragon4.codon</code></p>"},{"location":"libraries/api/numpy/dragon4/#bigint","title":"<code>BigInt</code>","text":""},{"location":"libraries/api/numpy/dragon4/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/dragon4/#length-int","title":"<code>length</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/dragon4/#blocks-ptru32","title":"<code>blocks</code>: <code>Ptr[u32]</code>","text":""},{"location":"libraries/api/numpy/dragon4/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/dragon4/#even-property-method-is-a-class-property","title":"<code>even</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dragon4/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/dragon4/#__init__self-length-int-blocks-ptru32","title":"<code>__init__(self, length: int, blocks: Ptr[u32])</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__getitem__self-idx-int","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__setitem__self-idx-int-val-u32","title":"<code>__setitem__(self, idx: int, val: u32)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__setitem__self-idx-int-val-u64","title":"<code>__setitem__(self, idx: int, val: u64)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__eq__self-other-bigint","title":"<code>__eq__(self, other: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__ne__self-other-bigint","title":"<code>__ne__(self, other: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__lt__self-other-bigint","title":"<code>__lt__(self, other: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__le__self-other-bigint","title":"<code>__le__(self, other: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__gt__self-other-bigint","title":"<code>__gt__(self, other: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#__ge__self-other-bigint","title":"<code>__ge__(self, other: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/dragon4/#make_pow10i-u32","title":"<code>make_pow10(i: u32)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#copyself-dst-bigint","title":"<code>copy(self, dst: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#setself-val-u64","title":"<code>set(self, val: u64)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#setself-hi-u64-lo-u64","title":"<code>set(self, hi: u64, lo: u64)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#setself-val-u32","title":"<code>set(self, val: u32)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#compareself-rhs-bigint","title":"<code>compare(self, rhs: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#addself-lhs-bigint-rhs-bigint","title":"<code>add(self, lhs: BigInt, rhs: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#mulself-lhs-bigint-rhs-bigint","title":"<code>mul(self, lhs: BigInt, rhs: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#mulself-lhs-bigint-rhs-u32","title":"<code>mul(self, lhs: BigInt, rhs: u32)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#mul2self-in_-bigint","title":"<code>mul2(self, in_: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#mul2self","title":"<code>mul2(self)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#mul10self","title":"<code>mul10(self)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#pow10self-exponent-u32-temp-bigint","title":"<code>pow10(self, exponent: u32, temp: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#mul_pow10self-exponent-u32-temp-bigint","title":"<code>mul_pow10(self, exponent: u32, temp: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#pow2self-exponent-u32","title":"<code>pow2(self, exponent: u32)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#div_with_rem_maxq9self-divisor-bigint","title":"<code>div_with_rem_maxq9(self, divisor: BigInt)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#lshiftself-shift-u32","title":"<code>lshift(self, shift: u32)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#dragon4bigints-exponent-i32-mantissa_bit-u32-has_unequal_margins-bool-digit_mode-int-cutoff_mode-int-cutoff_max-int-cutoff_min-int-out_buffer-cobj-buffer_size-int-out_exponent-ptri32","title":"<code>dragon4(bigints, exponent: i32, mantissa_bit: u32, has_unequal_margins: bool, digit_mode: int, cutoff_mode: int, cutoff_max: int, cutoff_min: int, out_buffer: cobj, buffer_size: int, out_exponent: Ptr[i32])</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_positionalbuffer-cobj-buffer_size-int-mantissa-exponent-i32-signbit-byte-mantissa_bit-u32-has_unequal_margins-bool-digit_mode-int-cutoff_mode-int-precision-i32-min_digits-i32-trim_mode-int-digits_left-int-digits_right-int","title":"<code>format_positional(buffer: cobj, buffer_size: int, mantissa, exponent: i32, signbit: byte, mantissa_bit: u32, has_unequal_margins: bool, digit_mode: int, cutoff_mode: int, precision: i32, min_digits: i32, trim_mode: int, digits_left: int, digits_right: int)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_scientificbuffer-cobj-buffer_size-int-mantissa-exponent-i32-signbit-byte-mantissa_bit-u32-has_unequal_margins-bool-digit_mode-int-precision-i32-min_digits-i32-trim_mode-int-digits_left-int-exp_digits-int","title":"<code>format_scientific(buffer: cobj, buffer_size: int, mantissa, exponent: i32, signbit: byte, mantissa_bit: u32, has_unequal_margins: bool, digit_mode: int, precision: i32, min_digits: i32, trim_mode: int, digits_left: int, exp_digits: int)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#print_inf_nanbuffer-cobj-buffer_size-int-mantissa-u64-mantissa_hex_width-int-signbit-byte","title":"<code>print_inf_nan(buffer: cobj, buffer_size: int, mantissa: u64, mantissa_hex_width: int, signbit: byte)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_float_bitsbuffer-cobj-buffer_size-int-mantissa-exponent-i32-signbit-byte-mantissa_bit-u32-has_unequal_margins-bool-scientific-bool-digit_mode-int-cutoff_mode-int-precision-i32-min_digits-i32-sign-bool-trim_mode-int-digits_left-int-digits_right-int-exp_digits-int","title":"<code>format_float_bits(buffer: cobj, buffer_size: int, mantissa, exponent: i32, signbit: byte, mantissa_bit: u32, has_unequal_margins: bool, scientific: bool, digit_mode: int, cutoff_mode: int, precision: i32, min_digits: i32, sign: bool, trim_mode: int, digits_left: int, digits_right: int, exp_digits: int)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_ieee16value-float16-scientific-bool-false-unique-bool-true-fractional-bool-true-precision-int-1-min_digits-int-1-sign-bool-false-trim_mode-str-k-digits_left-int-1-digits_right-int-1-exp_digits-int-1","title":"<code>format_ieee16(value: float16, scientific: bool = False, unique: bool = True, fractional: bool = True, precision: int = -1, min_digits: int = -1, sign: bool = False, trim_mode: str = \"k\", digits_left: int = -1, digits_right: int = -1, exp_digits: int = -1)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_ieee32value-float32-scientific-bool-false-unique-bool-true-fractional-bool-true-precision-int-1-min_digits-int-1-sign-bool-false-trim_mode-str-k-digits_left-int-1-digits_right-int-1-exp_digits-int-1","title":"<code>format_ieee32(value: float32, scientific: bool = False, unique: bool = True, fractional: bool = True, precision: int = -1, min_digits: int = -1, sign: bool = False, trim_mode: str = \"k\", digits_left: int = -1, digits_right: int = -1, exp_digits: int = -1)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_ieee64value-float-scientific-bool-false-unique-bool-true-fractional-bool-true-precision-int-1-min_digits-int-1-sign-bool-false-trim_mode-str-k-digits_left-int-1-digits_right-int-1-exp_digits-int-1","title":"<code>format_ieee64(value: float, scientific: bool = False, unique: bool = True, fractional: bool = True, precision: int = -1, min_digits: int = -1, sign: bool = False, trim_mode: str = \"k\", digits_left: int = -1, digits_right: int = -1, exp_digits: int = -1)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_ieee128value-float128-scientific-bool-false-unique-bool-true-fractional-bool-true-precision-int-1-min_digits-int-1-sign-bool-false-trim_mode-str-k-digits_left-int-1-digits_right-int-1-exp_digits-int-1","title":"<code>format_ieee128(value: float128, scientific: bool = False, unique: bool = True, fractional: bool = True, precision: int = -1, min_digits: int = -1, sign: bool = False, trim_mode: str = \"k\", digits_left: int = -1, digits_right: int = -1, exp_digits: int = -1)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_floatvalue-scientific-bool-false-unique-bool-true-fractional-bool-true-precision-int-1-min_digits-int-1-sign-bool-false-trim_mode-str-k-digits_left-int-1-digits_right-int-1-exp_digits-int-1","title":"<code>format_float(value, scientific: bool = False, unique: bool = True, fractional: bool = True, precision: int = -1, min_digits: int = -1, sign: bool = False, trim_mode: str = \"k\", digits_left: int = -1, digits_right: int = -1, exp_digits: int = -1)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_float_positionalx-precision-optionalint-none-unique-bool-true-fractional-bool-true-trim-str-k-sign-bool-false-pad_left-optionalint-none-pad_right-optionalint-none-min_digits-optionalint-none","title":"<code>format_float_positional(x, precision: Optional[int] = None, unique: bool = True, fractional: bool = True, trim: str = \"k\", sign: bool = False, pad_left: Optional[int] = None, pad_right: Optional[int] = None, min_digits: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/dragon4/#format_float_scientificx-precision-optionalint-none-unique-bool-true-trim-str-k-sign-bool-false-pad_left-optionalint-none-exp_digits-optionalint-none-min_digits-optionalint-none","title":"<code>format_float_scientific(x, precision: Optional[int] = None, unique: bool = True, trim: str = \"k\", sign: bool = False, pad_left: Optional[int] = None, exp_digits: Optional[int] = None, min_digits: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/dtype/","title":"module <code>numpy.dtype</code>","text":"<p>Source: <code>stdlib/numpy/dtype.codon</code></p>"},{"location":"libraries/api/numpy/dtype/#int8-int8","title":"<code>int8</code> = <code>Int[8]</code>","text":""},{"location":"libraries/api/numpy/dtype/#int16-int16","title":"<code>int16</code> = <code>Int[16]</code>","text":""},{"location":"libraries/api/numpy/dtype/#int32-int32","title":"<code>int32</code> = <code>Int[32]</code>","text":""},{"location":"libraries/api/numpy/dtype/#int64-int","title":"<code>int64</code> = <code>int</code>","text":""},{"location":"libraries/api/numpy/dtype/#uint8-uint8","title":"<code>uint8</code> = <code>UInt[8]</code>","text":""},{"location":"libraries/api/numpy/dtype/#uint16-uint16","title":"<code>uint16</code> = <code>UInt[16]</code>","text":""},{"location":"libraries/api/numpy/dtype/#uint32-uint32","title":"<code>uint32</code> = <code>UInt[32]</code>","text":""},{"location":"libraries/api/numpy/dtype/#uint64-uint64","title":"<code>uint64</code> = <code>UInt[64]</code>","text":""},{"location":"libraries/api/numpy/dtype/#intp-int64","title":"<code>intp</code> = <code>int64</code>","text":""},{"location":"libraries/api/numpy/dtype/#uintp-uint64","title":"<code>uintp</code> = <code>uint64</code>","text":""},{"location":"libraries/api/numpy/dtype/#float64-float","title":"<code>float64</code> = <code>float</code>","text":""},{"location":"libraries/api/numpy/dtype/#complex128-complex","title":"<code>complex128</code> = <code>complex</code>","text":""},{"location":"libraries/api/numpy/dtype/#bool_-bool","title":"<code>bool_</code> = <code>bool</code>","text":""},{"location":"libraries/api/numpy/dtype/#ubyte-uint8","title":"<code>ubyte</code> = <code>uint8</code>","text":""},{"location":"libraries/api/numpy/dtype/#short-int16","title":"<code>short</code> = <code>int16</code>","text":""},{"location":"libraries/api/numpy/dtype/#ushort-uint16","title":"<code>ushort</code> = <code>uint16</code>","text":""},{"location":"libraries/api/numpy/dtype/#intc-int32","title":"<code>intc</code> = <code>int32</code>","text":""},{"location":"libraries/api/numpy/dtype/#uintc-uint32","title":"<code>uintc</code> = <code>uint32</code>","text":""},{"location":"libraries/api/numpy/dtype/#int_-int64","title":"<code>int_</code> = <code>int64</code>","text":""},{"location":"libraries/api/numpy/dtype/#uint-uint64","title":"<code>uint</code> = <code>uint64</code>","text":""},{"location":"libraries/api/numpy/dtype/#longlong-int64","title":"<code>longlong</code> = <code>int64</code>","text":""},{"location":"libraries/api/numpy/dtype/#ulonglong-uint64","title":"<code>ulonglong</code> = <code>uint64</code>","text":""},{"location":"libraries/api/numpy/dtype/#single-float32","title":"<code>single</code> = <code>float32</code>","text":""},{"location":"libraries/api/numpy/dtype/#double-float","title":"<code>double</code> = <code>float</code>","text":""},{"location":"libraries/api/numpy/dtype/#longdouble-float","title":"<code>longdouble</code> = <code>float</code>","text":""},{"location":"libraries/api/numpy/dtype/#csingle-complex64","title":"<code>csingle</code> = <code>complex64</code>","text":""},{"location":"libraries/api/numpy/dtype/#cdouble-complex","title":"<code>cdouble</code> = <code>complex</code>","text":""},{"location":"libraries/api/numpy/dtype/#clongdouble-complex","title":"<code>clongdouble</code> = <code>complex</code>","text":""},{"location":"libraries/api/numpy/dtype/#float_-double","title":"<code>float_</code> = <code>double</code>","text":""},{"location":"libraries/api/numpy/dtype/#complex_-cdouble","title":"<code>complex_</code> = <code>cdouble</code>","text":""},{"location":"libraries/api/numpy/dtype/#longfloat-longdouble","title":"<code>longfloat</code> = <code>longdouble</code>","text":""},{"location":"libraries/api/numpy/dtype/#singlecomplex-csingle","title":"<code>singlecomplex</code> = <code>csingle</code>","text":""},{"location":"libraries/api/numpy/dtype/#cfloat-cdouble","title":"<code>cfloat</code> = <code>cdouble</code>","text":""},{"location":"libraries/api/numpy/dtype/#longcomplex-clongdouble","title":"<code>longcomplex</code> = <code>clongdouble</code>","text":""},{"location":"libraries/api/numpy/dtype/#clongfloat-clongdouble","title":"<code>clongfloat</code> = <code>clongdouble</code>","text":""},{"location":"libraries/api/numpy/dtype/#finfodtype-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>finfo[dtype]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/dtype/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/dtype/#dtype-type","title":"<code>dtype</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/dtype/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/dtype/#bits-property-method-is-a-class-property","title":"<code>bits</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#iexp-property-method-is-a-class-property","title":"<code>iexp</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#machep-property-method-is-a-class-property","title":"<code>machep</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#maxexp-property-method-is-a-class-property","title":"<code>maxexp</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#minexp-property-method-is-a-class-property","title":"<code>minexp</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#negep-property-method-is-a-class-property","title":"<code>negep</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#nexp-property-method-is-a-class-property","title":"<code>nexp</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#nmant-property-method-is-a-class-property","title":"<code>nmant</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#precision-property-method-is-a-class-property","title":"<code>precision</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#eps-property-method-is-a-class-property","title":"<code>eps</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#epsneg-property-method-is-a-class-property","title":"<code>epsneg</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#max-property-method-is-a-class-property","title":"<code>max</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#min-property-method-is-a-class-property","title":"<code>min</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#resolution-property-method-is-a-class-property","title":"<code>resolution</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#smallest_normal-property-method-is-a-class-property","title":"<code>smallest_normal</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#smallest_subnormal-property-method-is-a-class-property","title":"<code>smallest_subnormal</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#tiny-property-method-is-a-class-property","title":"<code>tiny</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/dtype/#__new__x","title":"<code>__new__(x)</code>","text":""},{"location":"libraries/api/numpy/dtype/#__new__dtype-type","title":"<code>__new__(dtype: type)</code>","text":""},{"location":"libraries/api/numpy/dtype/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/numpy/dtype/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/dtype/#iinfodtype-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>iinfo[dtype]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/dtype/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/dtype/#dtype-type_1","title":"<code>dtype</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/dtype/#properties_1","title":"Properties","text":""},{"location":"libraries/api/numpy/dtype/#bits-property-method-is-a-class-property_1","title":"<code>bits</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#min-property-method-is-a-class-property_1","title":"<code>min</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#max-property-method-is-a-class-property_1","title":"<code>max</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/dtype/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/dtype/#__new__x_1","title":"<code>__new__(x)</code>","text":""},{"location":"libraries/api/numpy/dtype/#__new__int_type-type","title":"<code>__new__(int_type: type)</code>","text":""},{"location":"libraries/api/numpy/dtype/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/numpy/dtype/#__str__self_1","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/emath/","title":"module <code>numpy.emath</code>","text":"<p>Source: <code>stdlib/numpy/emath.codon</code></p>"},{"location":"libraries/api/numpy/emath/#sqrtx","title":"<code>sqrt(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#logx","title":"<code>log(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#log10x","title":"<code>log10(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#log2x","title":"<code>log2(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#arccosx","title":"<code>arccos(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#arcsinx","title":"<code>arcsin(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#arctanhx","title":"<code>arctanh(x)</code>","text":""},{"location":"libraries/api/numpy/emath/#lognn-x","title":"<code>logn(n, x)</code>","text":""},{"location":"libraries/api/numpy/format/","title":"module <code>numpy.format</code>","text":"<p>Source: <code>stdlib/numpy/format.codon</code></p>"},{"location":"libraries/api/numpy/format/#max_float_prec-4","title":"<code>MAX_FLOAT_PREC</code> = <code>4</code>","text":""},{"location":"libraries/api/numpy/format/#defaultformat","title":"<code>DefaultFormat</code>","text":""},{"location":"libraries/api/numpy/format/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/format/#__call__self-x","title":"<code>__call__(self, x)</code>","text":""},{"location":"libraries/api/numpy/format/#timedeltaformat","title":"<code>TimeDeltaFormat</code>","text":""},{"location":"libraries/api/numpy/format/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/format/#__call__self-x_1","title":"<code>__call__(self, x)</code>","text":""},{"location":"libraries/api/numpy/format/#floatingformat","title":"<code>FloatingFormat</code>","text":""},{"location":"libraries/api/numpy/format/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/format/#scientific-property-method-is-a-class-property","title":"<code>scientific</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#sign-property-method-is-a-class-property","title":"<code>sign</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#unique-property-method-is-a-class-property","title":"<code>unique</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#trim-property-method-is-a-class-property","title":"<code>trim</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#precision-property-method-is-a-class-property","title":"<code>precision</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#min_digits-property-method-is-a-class-property","title":"<code>min_digits</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#pad_left-property-method-is-a-class-property","title":"<code>pad_left</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#pad_right-property-method-is-a-class-property","title":"<code>pad_right</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#exp_size-property-method-is-a-class-property","title":"<code>exp_size</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/format/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/format/#__init__self-scientific-bool-false-sign-bool-false-unique-bool-true-trim-str-precision-int-1-min_digits-int-1-pad_left-int-1-pad_right-int-1-exp_size-int-1","title":"<code>__init__(self, scientific: bool = False, sign: bool = False, unique: bool = True, trim: str = \".\", precision: int = -1, min_digits: int = -1, pad_left: int = -1, pad_right: int = -1, exp_size: int = -1)</code>","text":""},{"location":"libraries/api/numpy/format/#__init__self-a-ndarray-sign-bool-false","title":"<code>__init__(self, a: ndarray, sign: bool = False)</code>","text":""},{"location":"libraries/api/numpy/format/#__call__self-x_2","title":"<code>__call__(self, x)</code>","text":""},{"location":"libraries/api/numpy/format/#complexformat","title":"<code>ComplexFormat</code>","text":""},{"location":"libraries/api/numpy/format/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/format/#__init__self-a-ndarray","title":"<code>__init__(self, a: ndarray)</code>","text":""},{"location":"libraries/api/numpy/format/#__call__self-x_3","title":"<code>__call__(self, x)</code>","text":""},{"location":"libraries/api/numpy/format/#get_formattera-ndarray","title":"<code>get_formatter(a: ndarray)</code>","text":""},{"location":"libraries/api/numpy/format/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/format/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/format/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/numpy/format/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/functional/","title":"module <code>numpy.functional</code>","text":"<p>Source: <code>stdlib/numpy/functional.codon</code></p>"},{"location":"libraries/api/numpy/functional/#apply_along_axisfunc1d-axis-int-arr-args-kwargs","title":"<code>apply_along_axis(func1d, axis: int, arr, *args, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/functional/#apply_over_axesfunc-a-axes","title":"<code>apply_over_axes(func, a, axes)</code>","text":""},{"location":"libraries/api/numpy/functional/#frompyfuncfunc-nin-literalint-nout-literalint-identity","title":"<code>frompyfunc(func, nin: Literal[int], nout: Literal[int], identity)</code>","text":""},{"location":"libraries/api/numpy/functional/#vectorizepyfunc","title":"<code>vectorize(pyfunc)</code>","text":""},{"location":"libraries/api/numpy/functional/#piecewisex-condlist-list-funclist-list-args-kw","title":"<code>piecewise(x, condlist: List, funclist: List, *args, **kw)</code>","text":""},{"location":"libraries/api/numpy/fusion/","title":"module <code>numpy.fusion</code>","text":"<p>Source: <code>stdlib/numpy/fusion.codon</code></p>"},{"location":"libraries/api/numpy/indexing/","title":"module <code>numpy.indexing</code>","text":"<p>Source: <code>stdlib/numpy/indexing.codon</code></p>"},{"location":"libraries/api/numpy/indexing/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/indexing/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/indexing/#__getitem__self-indexes","title":"<code>__getitem__(self, indexes)</code>","text":""},{"location":"libraries/api/numpy/indexing/#__setitem__self-indexes-item","title":"<code>__setitem__(self, indexes, item)</code>","text":""},{"location":"libraries/api/numpy/interp/","title":"module <code>numpy.interp</code>","text":"<p>Source: <code>stdlib/numpy/interp.codon</code></p>"},{"location":"libraries/api/numpy/interp/#interpx-xp-fp-left-none-right-none-period-none","title":"<code>interp(x, xp, fp, left = None, right = None, period = None)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/","title":"module <code>numpy.linalg_sym</code>","text":"<p>Source: <code>stdlib/numpy/linalg_sym.codon</code></p>"},{"location":"libraries/api/numpy/linalg_sym/#matmulx1-x2-out-none-dtype-type-nonetype","title":"<code>matmul(x1, x2, out = None, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#dota-b-out-none","title":"<code>dot(a, b, out = None)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#vdota-b","title":"<code>vdot(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#tensordota-b-axes","title":"<code>tensordot(a, b, axes)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#tensordota-b-axes-literalint-2-overload-function-is-overloaded","title":"<code>tensordot(a, b, axes: Literal[int] = 2)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/linalg_sym/#innera-b","title":"<code>inner(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#outera-b-out-none","title":"<code>outer(a, b, out = None)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#krona-b","title":"<code>kron(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#tracea-offset-int-0-axis1-int-0-axis2-int-1-dtype-type-nonetype-out-none","title":"<code>trace(a, offset: int = 0, axis1: int = 0, axis2: int = 1, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/linalg_sym/#matrix_transposex","title":"<code>matrix_transpose(x)</code>","text":""},{"location":"libraries/api/numpy/misc/","title":"module <code>numpy.misc</code>","text":"<p>Source: <code>stdlib/numpy/misc.codon</code></p>"},{"location":"libraries/api/numpy/misc/#maxdims-literalint-32","title":"<code>MAXDIMS</code>: <code>Literal[int]</code> = <code>32</code>","text":""},{"location":"libraries/api/numpy/misc/#may_share_bounds-literalint-0","title":"<code>MAY_SHARE_BOUNDS</code>: <code>Literal[int]</code> = <code>0</code>","text":""},{"location":"libraries/api/numpy/misc/#may_share_exact-literalint-1","title":"<code>MAY_SHARE_EXACT</code>: <code>Literal[int]</code> = <code>-1</code>","text":""},{"location":"libraries/api/numpy/misc/#i128-int128","title":"<code>i128</code> = <code>Int[128]</code>","text":""},{"location":"libraries/api/numpy/misc/#diophantineterm-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>DiophantineTerm</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/misc/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/misc/#a-int","title":"<code>a</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/misc/#ub-int","title":"<code>ub</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/misc/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/misc/#__lt__self-other-diophantineterm","title":"<code>__lt__(self, other: DiophantineTerm)</code>","text":""},{"location":"libraries/api/numpy/misc/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/misc/#with_aself-a-int","title":"<code>with_a(self, a: int)</code>","text":""},{"location":"libraries/api/numpy/misc/#with_ubself-ub-int","title":"<code>with_ub(self, ub: int)</code>","text":""},{"location":"libraries/api/numpy/misc/#shares_memorya-ndarray-b-ndarray-max_work-optionalint-none","title":"<code>shares_memory(a: ndarray, b: ndarray, max_work: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/misc/#may_share_memorya-ndarray-b-ndarray-max_work-optionalint-none","title":"<code>may_share_memory(a: ndarray, b: ndarray, max_work: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/misc/#setbufsizesize-int","title":"<code>setbufsize(size: int)</code>","text":""},{"location":"libraries/api/numpy/misc/#getbufsize","title":"<code>getbufsize()</code>","text":""},{"location":"libraries/api/numpy/misc/#byte_boundsa-ndarray","title":"<code>byte_bounds(a: ndarray)</code>","text":""},{"location":"libraries/api/numpy/ndarray/","title":"module <code>numpy.ndarray</code>","text":"<p>Source: <code>stdlib/numpy/ndarray.codon</code></p>"},{"location":"libraries/api/numpy/ndarray/#newaxis-none","title":"<code>newaxis</code> = <code>None</code>","text":""},{"location":"libraries/api/numpy/ndarray/#flagsobj-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>flagsobj</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/ndarray/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/ndarray/#num-property-method-is-a-class-property","title":"<code>num</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#c_contiguous-property-method-is-a-class-property","title":"<code>c_contiguous</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#f_contiguous-property-method-is-a-class-property","title":"<code>f_contiguous</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#contiguous-property-method-is-a-class-property","title":"<code>contiguous</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#owndata-property-method-is-a-class-property","title":"<code>owndata</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#writeable-property-method-is-a-class-property","title":"<code>writeable</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#aligned-property-method-is-a-class-property","title":"<code>aligned</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#writebackifcopy-property-method-is-a-class-property","title":"<code>writebackifcopy</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ndarray/#__new__f-int","title":"<code>__new__(f: int)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__new__ccontig-bool-fcontig-bool","title":"<code>__new__(ccontig: bool, fcontig: bool)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#flatitera","title":"<code>flatiter[A]</code>","text":""},{"location":"libraries/api/numpy/ndarray/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/ndarray/#base-a","title":"<code>base</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/ndarray/#index-int","title":"<code>index</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/ndarray/#a-type","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/ndarray/#properties_1","title":"Properties","text":""},{"location":"libraries/api/numpy/ndarray/#coords-property-method-is-a-class-property","title":"<code>coords</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ndarray/#__init__self-base-a","title":"<code>__init__(self, base: A)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__getitem__self-index-int","title":"<code>__getitem__(self, index: int)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__getitem__self-s-slice","title":"<code>__getitem__(self, s: slice)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__setitem__self-index-int-value","title":"<code>__setitem__(self, index: int, value)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__setitem__self-s-slice-value","title":"<code>__setitem__(self, s: slice, value)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/ndarray/#copyself","title":"<code>copy(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#ndarraydtypendim-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>ndarray[dtype,ndim]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/ndarray/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/ndarray/#dtype-type","title":"<code>dtype</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/ndarray/#ndim-literalint","title":"<code>ndim</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/numpy/ndarray/#properties_2","title":"Properties","text":""},{"location":"libraries/api/numpy/ndarray/#_contig-property-method-is-a-class-property","title":"<code>_contig</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#_is_contig-property-method-is-a-class-property","title":"<code>_is_contig</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#shape-property-method-is-a-class-property","title":"<code>shape</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#strides-property-method-is-a-class-property","title":"<code>strides</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#flags-property-method-is-a-class-property","title":"<code>flags</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#data-property-method-is-a-class-property","title":"<code>data</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#size-property-method-is-a-class-property","title":"<code>size</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#itemsize-property-method-is-a-class-property","title":"<code>itemsize</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#nbytes-property-method-is-a-class-property","title":"<code>nbytes</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#t-property-method-is-a-class-property","title":"<code>T</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#flat-property-method-is-a-class-property","title":"<code>flat</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ndarray/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ndarray/#__new__shape-tuplendim-int-strides-tuplendim-int-data-ptrdtype","title":"<code>__new__(shape: Tuple[ndim, int], strides: Tuple[ndim, int], data: Ptr[dtype])</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__new__shape-tuplendim-int-data-ptrdtype-fcontig-bool-false","title":"<code>__new__(shape: Tuple[ndim, int], data: Ptr[dtype], fcontig: bool = False)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__len__self","title":"<code>__len__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__iter__self_1","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__copy__self","title":"<code>__copy__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__int__self","title":"<code>__int__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__float__self","title":"<code>__float__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__complex__self","title":"<code>__complex__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/ndarray/#itemself-args","title":"<code>item(self, *args)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#transposeself-axes","title":"<code>transpose(self, *axes)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#transposeself-axes-listint","title":"<code>transpose(self, axes: List[int])</code>","text":""},{"location":"libraries/api/numpy/ndarray/#swapaxesself-axis1-int-axis2-int","title":"<code>swapaxes(self, axis1: int, axis2: int)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#reshapeself-shape-order-str-c","title":"<code>reshape(self, *shape, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/ndarray/#tobytesself-order-str-c","title":"<code>tobytes(self, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/ndarray/#ravelself-order-str-c","title":"<code>ravel(self, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/ndarray/#flattenself-order-str-c","title":"<code>flatten(self, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/ndarray/#flatself-value","title":"<code>flat(self, value)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#tolistself","title":"<code>tolist(self)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#astypeself-dtype-type-order-str-k-copy-bool-true","title":"<code>astype(self, dtype: type, order: str = \"K\", copy: bool = True)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#copyself-order-str-c","title":"<code>copy(self, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/ndarray/#mapself-fn-inplace-literalbool-false","title":"<code>map(self, fn, inplace: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#fillself-value","title":"<code>fill(self, value)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#viewself-dtype-type","title":"<code>view(self, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/ndarray/#byteswapself-inplace-bool-false","title":"<code>byteswap(self, inplace: bool = False)</code>","text":""},{"location":"libraries/api/numpy/ndgpu/","title":"module <code>numpy.ndgpu</code>","text":"<p>Source: <code>stdlib/numpy/ndgpu.codon</code></p>"},{"location":"libraries/api/numpy/ndgpu/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/ndgpu/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ndgpu/#__to_gpu__self-cache-gpualloccache","title":"<code>__to_gpu__(self, cache: gpu.AllocCache)</code>","text":""},{"location":"libraries/api/numpy/ndgpu/#__from_gpu__self-other-ndarraydtype-ndim","title":"<code>__from_gpu__(self, other: ndarray[dtype, ndim])</code>","text":""},{"location":"libraries/api/numpy/ndgpu/#__from_gpu_new__other-ndarraydtype-ndim","title":"<code>__from_gpu_new__(other: ndarray[dtype, ndim])</code>","text":""},{"location":"libraries/api/numpy/ndmath/","title":"module <code>numpy.ndmath</code>","text":"<p>Source: <code>stdlib/numpy/ndmath.codon</code></p>"},{"location":"libraries/api/numpy/ndmath/#cumproda-axis-none-dtype-type-nonetype-out-none","title":"<code>cumprod(a, axis = None, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#cumsuma-axis-none-dtype-type-nonetype-out-none","title":"<code>cumsum(a, axis = None, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#diffa-axis-int-1-n-int-1-append-none-prepend-none","title":"<code>diff(a, axis: int = -1, n: int = 1, append = None, prepend = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#gradientf-varargs-axis-none-edge_order-int-1","title":"<code>gradient(f, *varargs, axis = None, edge_order: int = 1)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#ediff1dary-to_begin-none-to_end-none","title":"<code>ediff1d(ary, to_begin = None, to_end = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#crossa-b-axisa-int-1-axisb-int-1-axisc-int-1-axis-none","title":"<code>cross(a, b, axisa: int = -1, axisb: int = -1, axisc: int = -1, axis = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#trapzy-x-none-dx-10-axis-int-1","title":"<code>trapz(y, x = None, dx = 1.0, axis: int = -1)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#convolvev-a-mode-str-full","title":"<code>convolve(v, a, mode: str = \"full\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#add-binaryufuncoperatoradd-add-0","title":"<code>add</code> = <code>BinaryUFunc(operator.add, \"add\", 0)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#subtract-binaryufuncoperatorsub-subtract","title":"<code>subtract</code> = <code>BinaryUFunc(operator.sub, \"subtract\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#multiply-binaryufuncoperatormul-multiply-1","title":"<code>multiply</code> = <code>BinaryUFunc(operator.mul, \"multiply\", 1)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#divide-binaryufuncoperatortruediv-divide","title":"<code>divide</code> = <code>BinaryUFunc(operator.truediv, \"divide\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#true_divide-divide","title":"<code>true_divide</code> = <code>divide</code>","text":""},{"location":"libraries/api/numpy/ndmath/#logaddexp-binaryufunc_logaddexp-logaddexp","title":"<code>logaddexp</code> = <code>BinaryUFunc(_logaddexp, \"logaddexp\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#logaddexp2-binaryufunc_logaddexp2-logaddexp2","title":"<code>logaddexp2</code> = <code>BinaryUFunc(_logaddexp2, \"logaddexp2\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#floor_divide-binaryufunc_floor_divide-floor_divide","title":"<code>floor_divide</code> = <code>BinaryUFunc(_floor_divide, \"floor_divide\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#negative-unaryufuncoperatorneg-negative","title":"<code>negative</code> = <code>UnaryUFunc(operator.neg, \"negative\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#positive-unaryufuncoperatorpos-positive","title":"<code>positive</code> = <code>UnaryUFunc(operator.pos, \"positive\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#power-binaryufuncoperatorpow-power","title":"<code>power</code> = <code>BinaryUFunc(operator.pow, \"power\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#remainder-binaryufunc_remainder-remainder","title":"<code>remainder</code> = <code>BinaryUFunc(_remainder, \"remainder\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#mod-remainder","title":"<code>mod</code> = <code>remainder</code>","text":""},{"location":"libraries/api/numpy/ndmath/#fmod-binaryufunc_fmod-fmod","title":"<code>fmod</code> = <code>BinaryUFunc(_fmod, \"fmod\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#absolute-unaryufuncoperatorabs-absolute","title":"<code>absolute</code> = <code>UnaryUFunc(operator.abs, \"absolute\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#abs-absolute","title":"<code>abs</code> = <code>absolute</code>","text":""},{"location":"libraries/api/numpy/ndmath/#fabs-unaryufunc_fabs-fabs","title":"<code>fabs</code> = <code>UnaryUFunc(_fabs, \"fabs\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#rint-unaryufunc_rint-rint","title":"<code>rint</code> = <code>UnaryUFunc(_rint, \"rint\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#sign-unaryufunc_sign-sign","title":"<code>sign</code> = <code>UnaryUFunc(_sign, \"sign\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#heaviside-binaryufunc_heaviside-heaviside","title":"<code>heaviside</code> = <code>BinaryUFunc(_heaviside, \"heaviside\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#conjugate-unaryufunc_conj-conjugate","title":"<code>conjugate</code> = <code>UnaryUFunc(_conj, \"conjugate\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#conj-conjugate","title":"<code>conj</code> = <code>conjugate</code>","text":""},{"location":"libraries/api/numpy/ndmath/#exp-unaryufunc_exp-exp","title":"<code>exp</code> = <code>UnaryUFunc(_exp, \"exp\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#exp2-unaryufunc_exp2-exp2","title":"<code>exp2</code> = <code>UnaryUFunc(_exp2, \"exp2\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#log-unaryufunc_log-log","title":"<code>log</code> = <code>UnaryUFunc(_log, \"log\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#log2-unaryufunc_log2-log2","title":"<code>log2</code> = <code>UnaryUFunc(_log2, \"log2\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#log10-unaryufunc_log10-log10","title":"<code>log10</code> = <code>UnaryUFunc(_log10, \"log10\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#expm1-unaryufunc_expm1-expm1","title":"<code>expm1</code> = <code>UnaryUFunc(_expm1, \"expm1\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#log1p-unaryufunc_log1p-log1p","title":"<code>log1p</code> = <code>UnaryUFunc(_log1p, \"log1p\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#sqrt-unaryufunc_sqrt-sqrt","title":"<code>sqrt</code> = <code>UnaryUFunc(_sqrt, \"sqrt\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#square-unaryufunc_square-square","title":"<code>square</code> = <code>UnaryUFunc(_square, \"square\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#cbrt-unaryufunc_cbrt-cbrt","title":"<code>cbrt</code> = <code>UnaryUFunc(_cbrt, \"cbrt\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#reciprocal-unaryufunc_reciprocal-reciprocal","title":"<code>reciprocal</code> = <code>UnaryUFunc(_reciprocal, \"reciprocal\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#gcd-binaryufunc_gcd-gcd-0","title":"<code>gcd</code> = <code>BinaryUFunc(_gcd, \"gcd\", 0)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#lcm-binaryufunc_lcm-lcm","title":"<code>lcm</code> = <code>BinaryUFunc(_lcm, \"lcm\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#sin-unaryufunc_sin-sin","title":"<code>sin</code> = <code>UnaryUFunc(_sin, \"sin\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#cos-unaryufunc_cos-cos","title":"<code>cos</code> = <code>UnaryUFunc(_cos, \"cos\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#tan-unaryufunc_tan-tan","title":"<code>tan</code> = <code>UnaryUFunc(_tan, \"tan\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arcsin-unaryufunc_arcsin-arcsin","title":"<code>arcsin</code> = <code>UnaryUFunc(_arcsin, \"arcsin\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arccos-unaryufunc_arccos-arccos","title":"<code>arccos</code> = <code>UnaryUFunc(_arccos, \"arccos\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arctan-unaryufunc_arctan-arctan","title":"<code>arctan</code> = <code>UnaryUFunc(_arctan, \"arctan\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arctan2-binaryufunc_arctan2-arctan2","title":"<code>arctan2</code> = <code>BinaryUFunc(_arctan2, \"arctan2\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#hypot-binaryufunc_hypot-hypot","title":"<code>hypot</code> = <code>BinaryUFunc(_hypot, \"hypot\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#sinh-unaryufunc_sinh-sinh","title":"<code>sinh</code> = <code>UnaryUFunc(_sinh, \"sinh\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#cosh-unaryufunc_cosh-cosh","title":"<code>cosh</code> = <code>UnaryUFunc(_cosh, \"cosh\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#tanh-unaryufunc_tanh-tanh","title":"<code>tanh</code> = <code>UnaryUFunc(_tanh, \"tanh\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arcsinh-unaryufunc_arcsinh-arcsinh","title":"<code>arcsinh</code> = <code>UnaryUFunc(_arcsinh, \"arcsinh\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arccosh-unaryufunc_arccosh-arccosh","title":"<code>arccosh</code> = <code>UnaryUFunc(_arccosh, \"arccosh\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#arctanh-unaryufunc_arctanh-arctanh","title":"<code>arctanh</code> = <code>UnaryUFunc(_arctanh, \"arctanh\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#deg2rad-unaryufunc_deg2rad-deg2rad","title":"<code>deg2rad</code> = <code>UnaryUFunc(_deg2rad, \"deg2rad\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#radians-unaryufunc_deg2rad-radians","title":"<code>radians</code> = <code>UnaryUFunc(_deg2rad, \"radians\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#rad2deg-unaryufunc_rad2deg-rad2deg","title":"<code>rad2deg</code> = <code>UnaryUFunc(_rad2deg, \"rad2deg\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#degrees-unaryufunc_rad2deg-degrees","title":"<code>degrees</code> = <code>UnaryUFunc(_rad2deg, \"degrees\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#bitwise_and-binaryufuncoperatorand_-bitwise_and","title":"<code>bitwise_and</code> = <code>BinaryUFunc(operator.and_, \"bitwise_and\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#bitwise_or-binaryufuncoperatoror_-bitwise_or","title":"<code>bitwise_or</code> = <code>BinaryUFunc(operator.or_, \"bitwise_or\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#bitwise_xor-binaryufuncoperatorxor-bitwise_xor","title":"<code>bitwise_xor</code> = <code>BinaryUFunc(operator.xor, \"bitwise_xor\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#invert-unaryufuncoperatorinvert-invert","title":"<code>invert</code> = <code>UnaryUFunc(operator.invert, \"invert\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#left_shift-binaryufuncoperatorlshift-left_shift","title":"<code>left_shift</code> = <code>BinaryUFunc(operator.lshift, \"left_shift\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#right_shift-binaryufuncoperatorrshift-right_shift","title":"<code>right_shift</code> = <code>BinaryUFunc(operator.rshift, \"right_shift\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#greater-binaryufuncoperatorgt-greater","title":"<code>greater</code> = <code>BinaryUFunc(operator.gt, \"greater\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#greater_equal-binaryufuncoperatorge-greater_equal","title":"<code>greater_equal</code> = <code>BinaryUFunc(operator.ge, \"greater_equal\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#less-binaryufuncoperatorlt-less","title":"<code>less</code> = <code>BinaryUFunc(operator.lt, \"less\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#less_equal-binaryufuncoperatorle-less_equal","title":"<code>less_equal</code> = <code>BinaryUFunc(operator.le, \"less_equal\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#not_equal-binaryufuncoperatorne-not_equal","title":"<code>not_equal</code> = <code>BinaryUFunc(operator.ne, \"not_equal\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#equal-binaryufuncoperatoreq-equal","title":"<code>equal</code> = <code>BinaryUFunc(operator.eq, \"equal\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#logical_and-binaryufunc_logical_and-logical_and","title":"<code>logical_and</code> = <code>BinaryUFunc(_logical_and, \"logical_and\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#logical_or-binaryufunc_logical_or-logical_or","title":"<code>logical_or</code> = <code>BinaryUFunc(_logical_or, \"logical_or\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#logical_xor-binaryufunc_logical_xor-logical_xor","title":"<code>logical_xor</code> = <code>BinaryUFunc(_logical_xor, \"logical_xor\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#logical_not-unaryufunc_logical_not-logical_not","title":"<code>logical_not</code> = <code>UnaryUFunc(_logical_not, \"logical_not\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#maximum-binaryufunc_maximum-maximum","title":"<code>maximum</code> = <code>BinaryUFunc(_maximum, \"maximum\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#minimum-binaryufunc_minimum-minimum","title":"<code>minimum</code> = <code>BinaryUFunc(_minimum, \"minimum\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#fmax-binaryufunc_fmax-fmax","title":"<code>fmax</code> = <code>BinaryUFunc(_fmax, \"fmax\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#fmin-binaryufunc_fmin-fmin","title":"<code>fmin</code> = <code>BinaryUFunc(_fmin, \"fmin\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#isfinite-unaryufunc_isfinite-isfinite","title":"<code>isfinite</code> = <code>UnaryUFunc(_isfinite, \"isfinite\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#isinf-unaryufunc_isinf-isinf","title":"<code>isinf</code> = <code>UnaryUFunc(_isinf, \"isinf\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#isnan-unaryufunc_isnan-isnan","title":"<code>isnan</code> = <code>UnaryUFunc(_isnan, \"isnan\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#isnat-unaryufunc_isnat-isnat","title":"<code>isnat</code> = <code>UnaryUFunc(_isnat, \"isnat\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#signbit-unaryufunc_signbit-signbit","title":"<code>signbit</code> = <code>UnaryUFunc(_signbit, \"signbit\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#copysign-binaryufunc_copysign-copysign","title":"<code>copysign</code> = <code>BinaryUFunc(_copysign, \"copysign\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#nextafter-binaryufunc_nextafter-nextafter","title":"<code>nextafter</code> = <code>BinaryUFunc(_nextafter, \"nextafter\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#spacing-unaryufunc_spacing-spacing","title":"<code>spacing</code> = <code>UnaryUFunc(_spacing, \"spacing\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#modf-unaryufunc2_modf-modf","title":"<code>modf</code> = <code>UnaryUFunc2(_modf, \"modf\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#ldexp-binaryufunc_ldexp-ldexp","title":"<code>ldexp</code> = <code>BinaryUFunc(_ldexp, \"ldexp\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#frexp-unaryufunc2_frexp-frexp","title":"<code>frexp</code> = <code>UnaryUFunc2(_frexp, \"frexp\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#floor-unaryufunc_floor-floor","title":"<code>floor</code> = <code>UnaryUFunc(_floor, \"floor\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#ceil-unaryufunc_ceil-ceil","title":"<code>ceil</code> = <code>UnaryUFunc(_ceil, \"ceil\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#trunc-unaryufunc_trunc-trunc","title":"<code>trunc</code> = <code>UnaryUFunc(_trunc, \"trunc\")</code>","text":""},{"location":"libraries/api/numpy/ndmath/#i0x","title":"<code>i0(x)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#sincx","title":"<code>sinc(x)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#nancumproda-axis-none-dtype-type-nonetype-out-none","title":"<code>nancumprod(a, axis = None, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#nancumsuma-axis-none-dtype-type-nonetype-out-none","title":"<code>nancumsum(a, axis = None, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/ndmath/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/ndmath/#cumprodself-axis-none-dtype-type-nonetype-out-none","title":"<code>cumprod(self, axis = None, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/ndmath/#cumsumself-axis-none-dtype-type-nonetype-out-none","title":"<code>cumsum(self, axis = None, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/","title":"module <code>numpy.npdatetime</code>","text":"<p>Source: <code>stdlib/numpy/npdatetime.codon</code></p>"},{"location":"libraries/api/numpy/npdatetime/#datetimemetadata-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>DatetimeMetaData</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/npdatetime/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/npdatetime/#base-i32","title":"<code>base</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#num-i32","title":"<code>num</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#timedelta64basenum-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>timedelta64[base,num]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/npdatetime/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/npdatetime/#value-int","title":"<code>value</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#base-literalstr","title":"<code>base</code>: <code>Literal[str]</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#num-literalint","title":"<code>num</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#datetime64basenum-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>datetime64[base,num]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/npdatetime/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/npdatetime/#value-int_1","title":"<code>value</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#base-literalstr_1","title":"<code>base</code>: <code>Literal[str]</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#num-literalint_1","title":"<code>num</code>: <code>Literal[int]</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#datetimestruct","title":"<code>datetimestruct</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#fields_3","title":"Fields","text":""},{"location":"libraries/api/numpy/npdatetime/#year-int","title":"<code>year</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#month-i32","title":"<code>month</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#day-i32","title":"<code>day</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#hour-i32","title":"<code>hour</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#min-i32","title":"<code>min</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#sec-i32","title":"<code>sec</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#us-i32","title":"<code>us</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#ps-i32","title":"<code>ps</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#as_-i32","title":"<code>as_</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#datetimemetadata-extend-class-is-extended-to-add-given-methods","title":"<code>DatetimeMetaData</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/npdatetime/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__base-int-num-int-1","title":"<code>__new__(base: int, num: int = 1)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__base-literalstr-num-int-1","title":"<code>__new__(base: Literal[str], num: int = 1)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__dt-datetime64","title":"<code>__new__(dt: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__td-timedelta64","title":"<code>__new__(td: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/npdatetime/#divisor_to_multipleself-den-int-metastr-str","title":"<code>divisor_to_multiple(self, den: int, metastr: str)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#conversion_factorself-dst-datetimemetadata","title":"<code>conversion_factor(self, dst: DatetimeMetaData)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#timedelta64basenum-extend-class-is-extended-to-add-given-methods","title":"<code>timedelta64[base,num]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/npdatetime/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/npdatetime/#_nat-property-method-is-a-class-property","title":"<code>_nat</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npdatetime/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__value-int-base-literalstr-num-literalint","title":"<code>__new__(value: int, base: Literal[str], num: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__td-timedelta64-base-literalstr-num-literalint","title":"<code>__new__(td: timedelta64, base: Literal[str], num: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__s-str-base-literalstr-num-literalint","title":"<code>__new__(s: str, base: Literal[str], num: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__value-int-unit-literalstr","title":"<code>__new__(value: int, unit: Literal[str])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__td-timedelta64-unit-literalstr-generic","title":"<code>__new__(td: timedelta64, unit: Literal[str] = \"generic\")</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__s-str-unit-literalstr-generic","title":"<code>__new__(s: str, unit: Literal[str] = \"generic\")</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__td-datetimetimedelta-unit-literalstr-us","title":"<code>__new__(td: datetime.timedelta, unit: Literal[str] = \"us\")</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__eq__self-other-timedelta64","title":"<code>__eq__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__ne__self-other-timedelta64","title":"<code>__ne__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__lt__self-other-timedelta64","title":"<code>__lt__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__gt__self-other-timedelta64","title":"<code>__gt__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__le__self-other-timedelta64","title":"<code>__le__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__ge__self-other-timedelta64","title":"<code>__ge__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__bool__self","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__pos__self","title":"<code>__pos__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__neg__self","title":"<code>__neg__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__abs__self","title":"<code>__abs__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other","title":"<code>__add__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__radd__self-other","title":"<code>__radd__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other-timedelta64","title":"<code>__add__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other-datetime64","title":"<code>__add__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other-int","title":"<code>__add__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__radd__self-other-int","title":"<code>__radd__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other","title":"<code>__sub__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__rsub__self-other","title":"<code>__rsub__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other-timedelta64","title":"<code>__sub__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other-int","title":"<code>__sub__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__rsub__self-other-int","title":"<code>__rsub__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__mul__self-other","title":"<code>__mul__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__rmul__self-other","title":"<code>__rmul__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__mul__self-other-float","title":"<code>__mul__(self, other: float)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__rmul__self-other-float","title":"<code>__rmul__(self, other: float)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__mul__self-other-int","title":"<code>__mul__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__rmul__self-other-int","title":"<code>__rmul__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__floordiv__self-other","title":"<code>__floordiv__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__floordiv__self-other-timedelta64","title":"<code>__floordiv__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__floordiv__self-other-float","title":"<code>__floordiv__(self, other: float)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__floordiv__self-other-int","title":"<code>__floordiv__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__truediv__self-other","title":"<code>__truediv__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__truediv__self-other-timedelta64","title":"<code>__truediv__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__truediv__self-other-float","title":"<code>__truediv__(self, other: float)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__truediv__self-other-int","title":"<code>__truediv__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__mod__self-other-timedelta64","title":"<code>__mod__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__divmod__self-other-timedelta64","title":"<code>__divmod__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/npdatetime/#tolistself","title":"<code>tolist(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#datetime64basenum-extend-class-is-extended-to-add-given-methods","title":"<code>datetime64[base,num]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/npdatetime/#properties_1","title":"Properties","text":""},{"location":"libraries/api/numpy/npdatetime/#_nat-property-method-is-a-class-property_1","title":"<code>_nat</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npdatetime/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npdatetime/#__new___1","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__value-int-base-literalstr-num-literalint_1","title":"<code>__new__(value: int, base: Literal[str], num: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__value-datetime64-base-literalstr-num-literalint","title":"<code>__new__(value: datetime64, base: Literal[str], num: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__s-str-base-literalstr-num-literalint_1","title":"<code>__new__(s: str, base: Literal[str], num: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__value-int-unit-literalstr_1","title":"<code>__new__(value: int, unit: Literal[str])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__dt-datetime64-unit-literalstr","title":"<code>__new__(dt: datetime64, unit: Literal[str])</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__s-str-unit-literalstr-us","title":"<code>__new__(s: str, unit: Literal[str] = \"us\")</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__dt-datetimedatetime-unit-literalstr-us","title":"<code>__new__(dt: datetime.datetime, unit: Literal[str] = \"us\")</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__new__dt-datetimedate-unit-literalstr-d","title":"<code>__new__(dt: datetime.date, unit: Literal[str] = \"D\")</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__eq__self-other-datetime64","title":"<code>__eq__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__ne__self-other-datetime64","title":"<code>__ne__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__lt__self-other-datetime64","title":"<code>__lt__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__gt__self-other-datetime64","title":"<code>__gt__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__le__self-other-datetime64","title":"<code>__le__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__ge__self-other-datetime64","title":"<code>__ge__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__bool__self_1","title":"<code>__bool__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other_1","title":"<code>__add__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__radd__self-other_1","title":"<code>__radd__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other-timedelta64_1","title":"<code>__add__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__add__self-other-int_1","title":"<code>__add__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__radd__self-other-int_1","title":"<code>__radd__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other_1","title":"<code>__sub__(self, other)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other-timedelta64_1","title":"<code>__sub__(self, other: timedelta64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other-datetime64","title":"<code>__sub__(self, other: datetime64)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__sub__self-other-int_1","title":"<code>__sub__(self, other: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__repr__self_1","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__str__self_1","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#methods_2","title":"Methods","text":""},{"location":"libraries/api/numpy/npdatetime/#tolistself_1","title":"<code>tolist(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#datetimestruct-extend-class-is-extended-to-add-given-methods","title":"<code>datetimestruct</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/npdatetime/#properties_2","title":"Properties","text":""},{"location":"libraries/api/numpy/npdatetime/#datetime-property-method-is-a-class-property","title":"<code>datetime</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npdatetime/#days-property-method-is-a-class-property","title":"<code>days</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npdatetime/#minutes-property-method-is-a-class-property","title":"<code>minutes</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npdatetime/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npdatetime/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__init__self-s-str","title":"<code>__init__(self, s: str)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__init__self-dt-datetimedatetime","title":"<code>__init__(self, dt: datetime.datetime)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#__str__self_2","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#methods_3","title":"Methods","text":""},{"location":"libraries/api/numpy/npdatetime/#resetself","title":"<code>reset(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#copy_toself-other-datetimestruct","title":"<code>copy_to(self, other: datetimestruct)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#set_daysself-days-int","title":"<code>set_days(self, days: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#add_minutesself-minutes-i32","title":"<code>add_minutes(self, minutes: i32)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#to_datetime64self-meta-datetimemetadata","title":"<code>to_datetime64(self, meta: DatetimeMetaData)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#from_datetime64self-meta-datetimemetadata-dt-int","title":"<code>from_datetime64(self, meta: DatetimeMetaData, dt: int)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#utc_to_localself-out-datetimestruct","title":"<code>utc_to_local(self, out: datetimestruct)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#lossless_unitself","title":"<code>lossless_unit(self)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#parse_iso8601self-s-str","title":"<code>parse_iso8601(self, s: str)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#to_strself-unit-int-local-bool-false-utc-bool-false-tzoffset-int-1","title":"<code>to_str(self, unit: int, local: bool = False, utc: bool = False, tzoffset: int = -1)</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#busdaycalendar","title":"<code>busdaycalendar</code>","text":""},{"location":"libraries/api/numpy/npdatetime/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npdatetime/#__init__self-weekmask-1111100-holidays-none","title":"<code>__init__(self, weekmask = \"1111100\", holidays = None)</code>","text":""},{"location":"libraries/api/numpy/npio/","title":"module <code>numpy.npio</code>","text":"<p>Source: <code>stdlib/numpy/npio.codon</code></p>"},{"location":"libraries/api/numpy/npio/#memmapfilename-dtype-type-u8-mode-str-r-offset-int-0-shape-none-order-str-c","title":"<code>memmap(filename, dtype: type = u8, mode: str = \"r+\", offset: int = 0, shape = None, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/npio/#parse_headerheader-str","title":"<code>parse_header(header: str)</code>","text":""},{"location":"libraries/api/numpy/npio/#loadfile-mmap_mode-optionalstr-none-ndim-literalint-1-dtype-type-float","title":"<code>load(file, mmap_mode: Optional[str] = None, ndim: Literal[int] = 1, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/npio/#savefile-arr","title":"<code>save(file, arr)</code>","text":""},{"location":"libraries/api/numpy/npio/#savetxtfname-x-delimiter-str-newline-str-n-header-str-footer-str-comments-str","title":"<code>savetxt(fname, X, delimiter: str = \" \", newline: str = \"\\n\", header: str = \"\", footer: str = \"\", comments: str = \"# \")</code>","text":""},{"location":"libraries/api/numpy/npio/#fromfilefile-dtype-type-float-count-int-1-sep-str-offset-int-0","title":"<code>fromfile(file, dtype: type = float, count: int = -1, sep: str = \"\", offset: int = 0)</code>","text":""},{"location":"libraries/api/numpy/npio/#fromstringstring-str-dtype-type-float-count-int-1-sep-str","title":"<code>fromstring(string: str, dtype: type = float, count: int = -1, sep: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/npio/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/npio/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/npio/#tofileself-file-sep-str","title":"<code>tofile(self, file, sep: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/npio/#convertersdtypefmu-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Converters[dtype,F,M,U]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/npio/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/npio/#funcs-f","title":"<code>funcs</code>: <code>F</code>","text":""},{"location":"libraries/api/numpy/npio/#mask-m","title":"<code>mask</code>: <code>M</code>","text":""},{"location":"libraries/api/numpy/npio/#usecols-u","title":"<code>usecols</code>: <code>U</code>","text":""},{"location":"libraries/api/numpy/npio/#dtype-type","title":"<code>dtype</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#f-type","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#m-type","title":"<code>M</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#u-type","title":"<code>U</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npio/#__new__funcs-mask-usecols-dtype-type","title":"<code>__new__(funcs, mask, usecols, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#__call__self-field-str-idx-int","title":"<code>__call__(self, field: str, idx: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#normalize_colcol-int-num_fields-int","title":"<code>normalize_col(col: int, num_fields: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#default_filldtype-type","title":"<code>default_fill(dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#malformedrow-int-num_fields-int","title":"<code>malformed(row: int, num_fields: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#min_dimarr-ndarray-ndmin-literalint","title":"<code>min_dim(arr: ndarray, ndmin: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/npio/#make_convconverters-num_fields-int-usecols-dtype-type","title":"<code>make_conv(converters, num_fields: int, usecols, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#csvreader","title":"<code>CSVReader</code>","text":""},{"location":"libraries/api/numpy/npio/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npio/#__init__self-path-str-delimiter-str-quotechar-str-comments-str","title":"<code>__init__(self, path: str, delimiter: str = \",\", quotechar: str = \"\"\", comments: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/npio/#__enter__self","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/numpy/npio/#__exit__self","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/numpy/npio/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/npio/#is_delimiterself-c-byte","title":"<code>is_delimiter(self, c: byte)</code>","text":""},{"location":"libraries/api/numpy/npio/#is_commentself-c-byte","title":"<code>is_comment(self, c: byte)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_delimiterself-i-int","title":"<code>skip_delimiter(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_commentsself-i-int","title":"<code>skip_comments(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_linesself-i-int-skip-int","title":"<code>skip_lines(self, i: int, skip: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#get_num_fieldsself-i0-int","title":"<code>get_num_fields(self, i0: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#parseself-row_callback-num_fields-int-maxrows-int-i0-int","title":"<code>parse(self, row_callback, num_fields: int, maxrows: int, i0: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#arrayupdateacf","title":"<code>ArrayUpdate[A,C,F]</code>","text":""},{"location":"libraries/api/numpy/npio/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/npio/#arr-a","title":"<code>arr</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/npio/#cols-c","title":"<code>cols</code>: <code>C</code>","text":""},{"location":"libraries/api/numpy/npio/#conv-f","title":"<code>conv</code>: <code>F</code>","text":""},{"location":"libraries/api/numpy/npio/#last_row-int","title":"<code>last_row</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/npio/#a-type","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#c-type","title":"<code>C</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#f-type_1","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/npio/#cap-property-method-is-a-class-property","title":"<code>cap</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npio/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npio/#__init__self-arr-a-cols-c-conv-f","title":"<code>__init__(self, arr: A, cols: C, conv: F)</code>","text":""},{"location":"libraries/api/numpy/npio/#__call__self-fields-ptrstr-num_fields-int-row-int","title":"<code>__call__(self, fields: Ptr[str], num_fields: int, row: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#methods_2","title":"Methods","text":""},{"location":"libraries/api/numpy/npio/#resize_arraysself-new_cap-int","title":"<code>resize_arrays(self, new_cap: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#trim_arraysself","title":"<code>trim_arrays(self)</code>","text":""},{"location":"libraries/api/numpy/npio/#convertself-field-str-idx-int-dtype-type","title":"<code>convert(self, field: str, idx: int, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#convert_staticself-field-str-idx-literalint-dtype-type","title":"<code>convert_static(self, field: str, idx: Literal[int], dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#loadtxtfname-str-dtype-type-float-comments-optionalstr-delimiter-optionalstr-none-converters-none-skiprows-int-0-usecols-none-unpack-literalbool-false-ndmin-literalint-0-max_rows-optionalint-none-quotechar-optionalstr-none","title":"<code>loadtxt(fname: str, dtype: type = float, comments: Optional[str] = \"#\", delimiter: Optional[str] = None, converters = None, skiprows: int = 0, usecols = None, unpack: Literal[bool] = False, ndmin: Literal[int] = 0, max_rows: Optional[int] = None, quotechar: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/npio/#csvreadergen","title":"<code>CSVReaderGen</code>","text":""},{"location":"libraries/api/numpy/npio/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npio/#__init__self-path-str-delimiter-str-comments-str","title":"<code>__init__(self, path: str, delimiter: str = \",\", comments: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/npio/#__enter__self_1","title":"<code>__enter__(self)</code>","text":""},{"location":"libraries/api/numpy/npio/#__exit__self_1","title":"<code>__exit__(self)</code>","text":""},{"location":"libraries/api/numpy/npio/#methods_3","title":"Methods","text":""},{"location":"libraries/api/numpy/npio/#fix_namesself-excludelist-liststr-deletechars-str-replace_space-str-upper-bool-lower-bool","title":"<code>fix_names(self, excludelist: List[str], deletechars: str, replace_space: str, upper: bool, lower: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#is_delimiterself-c-byte_1","title":"<code>is_delimiter(self, c: byte)</code>","text":""},{"location":"libraries/api/numpy/npio/#is_commentself-c-byte_1","title":"<code>is_comment(self, c: byte)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_linesself-i-int-skip-int_1","title":"<code>skip_lines(self, i: int, skip: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#find_lengthself-skip_footer-int","title":"<code>find_length(self, skip_footer: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_delimiterself-i-int_1","title":"<code>skip_delimiter(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_delimiterself-i-int-line-str","title":"<code>skip_delimiter(self, i: int, line: str)</code>","text":""},{"location":"libraries/api/numpy/npio/#skip_commentsself-i-int_1","title":"<code>skip_comments(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#get_num_fieldsself-i-int-get_names-bool","title":"<code>get_num_fields(self, i: int, get_names: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#partition_lineself-line-str-delimiter-num_fields-int-row-int-invalid_raise-bool","title":"<code>partition_line(self, line: str, delimiter, num_fields: int, row: int, invalid_raise: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#get_num_fields_spacedself-i-int-get_names-bool-delimiter","title":"<code>get_num_fields_spaced(self, i: int, get_names: bool, delimiter)</code>","text":""},{"location":"libraries/api/numpy/npio/#get_num_fields_singleself-line-str-get_names-bool","title":"<code>get_num_fields_single(self, line: str, get_names: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#get_num_fields_single_spacedself-line-str-get_names-bool-delimiter","title":"<code>get_num_fields_single_spaced(self, line: str, get_names: bool, delimiter)</code>","text":""},{"location":"libraries/api/numpy/npio/#translate_colsself-usecols-num_fields-int","title":"<code>translate_cols(self, usecols, num_fields: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#parseself-i-int-row_callback-num_fields-int-maxrows-int-invalid_raise-bool","title":"<code>parse(self, i: int, row_callback, num_fields: int, maxrows: int, invalid_raise: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#parse_spacedself-i-int-row_callback-num_fields-int-maxrows-int-invalid_raise-bool-delimiter","title":"<code>parse_spaced(self, i: int, row_callback, num_fields: int, maxrows: int, invalid_raise: bool, delimiter)</code>","text":""},{"location":"libraries/api/numpy/npio/#parse_singleself-line-str-row_callback-row-int-fields-ptrstr-num_fields-int-invalid_raise-bool","title":"<code>parse_single(self, line: str, row_callback, row: int, fields: Ptr[str], num_fields: int, invalid_raise: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#parse_single_spacedself-line-str-row_callback-row-int-fields-ptrstr-num_fields-int-invalid_raise-bool-delimiter","title":"<code>parse_single_spaced(self, line: str, row_callback, row: int, fields: Ptr[str], num_fields: int, invalid_raise: bool, delimiter)</code>","text":""},{"location":"libraries/api/numpy/npio/#arrayupdategenacfm","title":"<code>ArrayUpdateGen[A,C,F,M]</code>","text":""},{"location":"libraries/api/numpy/npio/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/npio/#arr-a_1","title":"<code>arr</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/npio/#cols-c_1","title":"<code>cols</code>: <code>C</code>","text":""},{"location":"libraries/api/numpy/npio/#conv-f_1","title":"<code>conv</code>: <code>F</code>","text":""},{"location":"libraries/api/numpy/npio/#filling_values-m","title":"<code>filling_values</code>: <code>M</code>","text":""},{"location":"libraries/api/numpy/npio/#autostrip-bool","title":"<code>autostrip</code>: <code>bool</code>","text":""},{"location":"libraries/api/numpy/npio/#loose-bool","title":"<code>loose</code>: <code>bool</code>","text":""},{"location":"libraries/api/numpy/npio/#last_row-int_1","title":"<code>last_row</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/npio/#a-type_1","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#c-type_1","title":"<code>C</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#f-type_2","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#m-type_1","title":"<code>M</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/npio/#properties_1","title":"Properties","text":""},{"location":"libraries/api/numpy/npio/#cap-property-method-is-a-class-property_1","title":"<code>cap</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/npio/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npio/#__init__self-arr-a-cols-c-conv-f-filling_values-m-autostrip-bool-loose-bool","title":"<code>__init__(self, arr: A, cols: C, conv: F, filling_values: M, autostrip: bool, loose: bool)</code>","text":""},{"location":"libraries/api/numpy/npio/#__call__self-fields-ptrstr-num_fields-int-row-int_1","title":"<code>__call__(self, fields: Ptr[str], num_fields: int, row: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#methods_4","title":"Methods","text":""},{"location":"libraries/api/numpy/npio/#resize_arraysself-new_cap-int_1","title":"<code>resize_arrays(self, new_cap: int)</code>","text":""},{"location":"libraries/api/numpy/npio/#trim_arraysself_1","title":"<code>trim_arrays(self)</code>","text":""},{"location":"libraries/api/numpy/npio/#fill_valueself-idx-int-dtype-type","title":"<code>fill_value(self, idx: int, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#fill_value_staticself-idx-literalint-dtype-type","title":"<code>fill_value_static(self, idx: Literal[int], dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#convertself-field-str-idx-int-dtype-type_1","title":"<code>convert(self, field: str, idx: int, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#convert_staticself-field-str-idx-literalint-dtype-type_1","title":"<code>convert_static(self, field: str, idx: Literal[int], dtype: type)</code>","text":""},{"location":"libraries/api/numpy/npio/#genfromtxtfname-dtype-type-float-comments-optionalstr-delimiter-none-skip_header-int-0-skip_footer-int-0-converters-none-filling_values-none-usecols-none-names-none-excludelist-none-deletechars-str-replace_space-str-_-autostrip-bool-false-case_sensitive-true-unpack-literalbool-false-loose-bool-true-invalid_raise-bool-true-max_rows-optionalint-none-ndmin-literalint-0","title":"<code>genfromtxt(fname, dtype: type = float, comments: Optional[str] = \"#\", delimiter = None, skip_header: int = 0, skip_footer: int = 0, converters = None, filling_values = None, usecols = None, names = None, excludelist = None, deletechars: str = \" !#$%&amp;\\'()*+, -./:;&lt;=&gt;?@[\\\\]^{|}~\", replace_space: str = \"_\", autostrip: bool = False, case_sensitive = True, unpack: Literal[bool] = False, loose: bool = True, invalid_raise: bool = True, max_rows: Optional[int] = None, ndmin: Literal[int] = 0)</code>","text":""},{"location":"libraries/api/numpy/npio/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods_1","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/npio/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/numpy/npio/#__pickle__self-jar-jar","title":"<code>__pickle__(self, jar: Jar)</code>","text":""},{"location":"libraries/api/numpy/npio/#__unpickle__jar-jar","title":"<code>__unpickle__(jar: Jar)</code>","text":""},{"location":"libraries/api/numpy/operators/","title":"module <code>numpy.operators</code>","text":"<p>Source: <code>stdlib/numpy/operators.codon</code></p>"},{"location":"libraries/api/numpy/operators/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/operators/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/operators/#__add__self-other-inline-function-always-inlined","title":"<code>__add__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__radd__self-other-inline-function-always-inlined","title":"<code>__radd__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__iadd__self-other-inline-function-always-inlined","title":"<code>__iadd__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__sub__self-other-inline-function-always-inlined","title":"<code>__sub__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rsub__self-other-inline-function-always-inlined","title":"<code>__rsub__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__isub__self-other-inline-function-always-inlined","title":"<code>__isub__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__mul__self-other-inline-function-always-inlined","title":"<code>__mul__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rmul__self-other-inline-function-always-inlined","title":"<code>__rmul__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__imul__self-other-inline-function-always-inlined","title":"<code>__imul__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__mod__self-other-inline-function-always-inlined","title":"<code>__mod__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rmod__self-other-inline-function-always-inlined","title":"<code>__rmod__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__imod__self-other-inline-function-always-inlined","title":"<code>__imod__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__pow__self-other-inline-function-always-inlined","title":"<code>__pow__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rpow__self-other-inline-function-always-inlined","title":"<code>__rpow__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ipow__self-other-inline-function-always-inlined","title":"<code>__ipow__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__truediv__self-other-inline-function-always-inlined","title":"<code>__truediv__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rtruediv__self-other-inline-function-always-inlined","title":"<code>__rtruediv__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__itruediv__self-other-inline-function-always-inlined","title":"<code>__itruediv__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__floordiv__self-other-inline-function-always-inlined","title":"<code>__floordiv__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rfloordiv__self-other-inline-function-always-inlined","title":"<code>__rfloordiv__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ifloordiv__self-other-inline-function-always-inlined","title":"<code>__ifloordiv__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__lshift__self-other-inline-function-always-inlined","title":"<code>__lshift__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rlshift__self-other-inline-function-always-inlined","title":"<code>__rlshift__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ilshift__self-other-inline-function-always-inlined","title":"<code>__ilshift__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rshift__self-other-inline-function-always-inlined","title":"<code>__rshift__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rrshift__self-other-inline-function-always-inlined","title":"<code>__rrshift__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__irshift__self-other-inline-function-always-inlined","title":"<code>__irshift__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__and__self-other-inline-function-always-inlined","title":"<code>__and__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rand__self-other-inline-function-always-inlined","title":"<code>__rand__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__iand__self-other-inline-function-always-inlined","title":"<code>__iand__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__or__self-other-inline-function-always-inlined","title":"<code>__or__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ror__self-other-inline-function-always-inlined","title":"<code>__ror__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ior__self-other-inline-function-always-inlined","title":"<code>__ior__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__xor__self-other-inline-function-always-inlined","title":"<code>__xor__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__rxor__self-other-inline-function-always-inlined","title":"<code>__rxor__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ixor__self-other-inline-function-always-inlined","title":"<code>__ixor__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__pos__self-inline-function-always-inlined","title":"<code>__pos__(self)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__neg__self-inline-function-always-inlined","title":"<code>__neg__(self)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__invert__self-inline-function-always-inlined","title":"<code>__invert__(self)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__abs__self-inline-function-always-inlined","title":"<code>__abs__(self)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__eq__self-other-inline-function-always-inlined","title":"<code>__eq__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ne__self-other-inline-function-always-inlined","title":"<code>__ne__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__lt__self-other-inline-function-always-inlined","title":"<code>__lt__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__le__self-other-inline-function-always-inlined","title":"<code>__le__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__gt__self-other-inline-function-always-inlined","title":"<code>__gt__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/operators/#__ge__self-other-inline-function-always-inlined","title":"<code>__ge__(self, other)</code>  @inline Function always inlined","text":""},{"location":"libraries/api/numpy/pybridge/","title":"module <code>numpy.pybridge</code>","text":"<p>Source: <code>stdlib/numpy/pybridge.codon</code></p>"},{"location":"libraries/api/numpy/pybridge/#npy_bool-literalint-0","title":"<code>NPY_BOOL</code>: <code>Literal[int]</code> = <code>0</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_byte-literalint-1","title":"<code>NPY_BYTE</code>: <code>Literal[int]</code> = <code>1</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_ubyte-literalint-2","title":"<code>NPY_UBYTE</code>: <code>Literal[int]</code> = <code>2</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_short-literalint-3","title":"<code>NPY_SHORT</code>: <code>Literal[int]</code> = <code>3</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_ushort-literalint-4","title":"<code>NPY_USHORT</code>: <code>Literal[int]</code> = <code>4</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_int-literalint-5","title":"<code>NPY_INT</code>: <code>Literal[int]</code> = <code>5</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_uint-literalint-6","title":"<code>NPY_UINT</code>: <code>Literal[int]</code> = <code>6</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_long-literalint-7","title":"<code>NPY_LONG</code>: <code>Literal[int]</code> = <code>7</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_ulong-literalint-8","title":"<code>NPY_ULONG</code>: <code>Literal[int]</code> = <code>8</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_longlong-literalint-9","title":"<code>NPY_LONGLONG</code>: <code>Literal[int]</code> = <code>9</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_ulonglong-literalint-10","title":"<code>NPY_ULONGLONG</code>: <code>Literal[int]</code> = <code>10</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_float-literalint-11","title":"<code>NPY_FLOAT</code>: <code>Literal[int]</code> = <code>11</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_double-literalint-12","title":"<code>NPY_DOUBLE</code>: <code>Literal[int]</code> = <code>12</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_longdouble-literalint-13","title":"<code>NPY_LONGDOUBLE</code>: <code>Literal[int]</code> = <code>13</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_cfloat-literalint-14","title":"<code>NPY_CFLOAT</code>: <code>Literal[int]</code> = <code>14</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_cdouble-literalint-15","title":"<code>NPY_CDOUBLE</code>: <code>Literal[int]</code> = <code>15</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_clongdouble-literalint-16","title":"<code>NPY_CLONGDOUBLE</code>: <code>Literal[int]</code> = <code>16</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_object-literalint-17","title":"<code>NPY_OBJECT</code>: <code>Literal[int]</code> = <code>17</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_string-literalint-18","title":"<code>NPY_STRING</code>: <code>Literal[int]</code> = <code>18</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_unicode-literalint-19","title":"<code>NPY_UNICODE</code>: <code>Literal[int]</code> = <code>19</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_void-literalint-20","title":"<code>NPY_VOID</code>: <code>Literal[int]</code> = <code>20</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_datetime-literalint-21","title":"<code>NPY_DATETIME</code>: <code>Literal[int]</code> = <code>21</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_timedelta-literalint-22","title":"<code>NPY_TIMEDELTA</code>: <code>Literal[int]</code> = <code>22</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_half-literalint-23","title":"<code>NPY_HALF</code>: <code>Literal[int]</code> = <code>23</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_ntypes-literalint-24","title":"<code>NPY_NTYPES</code>: <code>Literal[int]</code> = <code>24</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_notype-literalint-25","title":"<code>NPY_NOTYPE</code>: <code>Literal[int]</code> = <code>25</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_char-literalint-26","title":"<code>NPY_CHAR</code>: <code>Literal[int]</code> = <code>26</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_string-literalint-18_1","title":"<code>NPY_STRING</code>: <code>Literal[int]</code> = <code>18</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_userdef-literalint-256","title":"<code>NPY_USERDEF</code>: <code>Literal[int]</code> = <code>256</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_ntypes_abi_compatible-literalint-21","title":"<code>NPY_NTYPES_ABI_COMPATIBLE</code>: <code>Literal[int]</code> = <code>21</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyobject-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyObject</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/pybridge/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/pybridge/#refcnt-int","title":"<code>refcnt</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/pybridge/#typptr-cobj","title":"<code>typptr</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npyauxdata-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>NpyAuxData</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/pybridge/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/pybridge/#free_func-cobj","title":"<code>free_func</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#clone_func-cobj","title":"<code>clone_func</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#data1-cobj","title":"<code>data1</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#data2-cobj","title":"<code>data2</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarray_datetimemetadata-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyArray_DatetimeMetaData</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/pybridge/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/pybridge/#base-i32","title":"<code>base</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/pybridge/#num-i32","title":"<code>num</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarray_datetimedtypemetadata-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyArray_DatetimeDTypeMetaData</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/pybridge/#fields_3","title":"Fields","text":""},{"location":"libraries/api/numpy/pybridge/#base-npyauxdata","title":"<code>base</code>: <code>NpyAuxData</code>","text":""},{"location":"libraries/api/numpy/pybridge/#meta-pyarray_datetimemetadata","title":"<code>meta</code>: <code>PyArray_DatetimeMetaData</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarraydescr-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyArrayDescr</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/pybridge/#fields_4","title":"Fields","text":""},{"location":"libraries/api/numpy/pybridge/#head-pyobject","title":"<code>head</code>: <code>PyObject</code>","text":""},{"location":"libraries/api/numpy/pybridge/#typeobj-cobj","title":"<code>typeobj</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#kind-u8","title":"<code>kind</code>: <code>u8</code>","text":""},{"location":"libraries/api/numpy/pybridge/#type-u8","title":"<code>type</code>: <code>u8</code>","text":""},{"location":"libraries/api/numpy/pybridge/#byteorder-u8","title":"<code>byteorder</code>: <code>u8</code>","text":""},{"location":"libraries/api/numpy/pybridge/#former_flags-u8","title":"<code>former_flags</code>: <code>u8</code>","text":""},{"location":"libraries/api/numpy/pybridge/#type_num-i32","title":"<code>type_num</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/pybridge/#flags-u64","title":"<code>flags</code>: <code>u64</code>","text":""},{"location":"libraries/api/numpy/pybridge/#elsize-int","title":"<code>elsize</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/pybridge/#alignment-int","title":"<code>alignment</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/pybridge/#metadata-cobj","title":"<code>metadata</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#hash-int","title":"<code>hash</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/pybridge/#reserved0-cobj","title":"<code>reserved0</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#reserved1-cobj","title":"<code>reserved1</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#subarray-cobj","title":"<code>subarray</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#fields-cobj","title":"<code>fields</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#names-cobj","title":"<code>names</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#c_metadata-cobj","title":"<code>c_metadata</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarrayobject-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>PyArrayObject</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/pybridge/#fields_5","title":"Fields","text":""},{"location":"libraries/api/numpy/pybridge/#head-pyobject_1","title":"<code>head</code>: <code>PyObject</code>","text":""},{"location":"libraries/api/numpy/pybridge/#data-cobj","title":"<code>data</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#nd-i32","title":"<code>nd</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/pybridge/#dimensions-ptrint","title":"<code>dimensions</code>: <code>Ptr[int]</code>","text":""},{"location":"libraries/api/numpy/pybridge/#strides-ptrint","title":"<code>strides</code>: <code>Ptr[int]</code>","text":""},{"location":"libraries/api/numpy/pybridge/#base-cobj","title":"<code>base</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#descr-ptrpyarraydescr","title":"<code>descr</code>: <code>Ptr[PyArrayDescr]</code>","text":""},{"location":"libraries/api/numpy/pybridge/#flags-i32","title":"<code>flags</code>: <code>i32</code>","text":""},{"location":"libraries/api/numpy/pybridge/#weakreflist-cobj","title":"<code>weakreflist</code>: <code>cobj</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_array_c_contiguous-literalint-1","title":"<code>NPY_ARRAY_C_CONTIGUOUS</code>: <code>Literal[int]</code> = <code>1</code>","text":""},{"location":"libraries/api/numpy/pybridge/#npy_array_f_contiguous-literalint-2","title":"<code>NPY_ARRAY_F_CONTIGUOUS</code>: <code>Literal[int]</code> = <code>2</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarray_type-cobj","title":"<code>PyArray_Type</code> = <code>cobj()</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarray_new-functioncobj-i32-cobj-i32-cobj-cobj-i32-i32-cobj-cobjcobj","title":"<code>PyArray_New</code> = <code>Function[([cobj, i32, cobj, i32, cobj, cobj, i32, i32, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarray_newfromdescr-functioncobj-cobj-i32-cobj-cobj-cobj-i32-cobj-cobjcobj","title":"<code>PyArray_NewFromDescr</code> = <code>Function[([cobj, cobj, i32, cobj, cobj, cobj, i32, cobj], cobj)](cobj())</code>","text":""},{"location":"libraries/api/numpy/pybridge/#pyarray_descrnewfromtype-functioni32-cobjcobj","title":"<code>PyArray_DescrNewFromType</code> = <code>Function[([i32], cobj)](cobj())</code>","text":""},{"location":"libraries/api/numpy/pybridge/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/pybridge/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/pybridge/#__to_py__self","title":"<code>__to_py__(self)</code>","text":""},{"location":"libraries/api/numpy/pybridge/#__from_py__a-cobj","title":"<code>__from_py__(a: cobj)</code>","text":""},{"location":"libraries/api/numpy/reductions/","title":"module <code>numpy.reductions</code>","text":"<p>Source: <code>stdlib/numpy/reductions.codon</code></p>"},{"location":"libraries/api/numpy/reductions/#newaxis-none","title":"<code>newaxis</code> = <code>None</code>","text":""},{"location":"libraries/api/numpy/reductions/#sumreduxt","title":"<code>SumRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#total-t","title":"<code>total</code>: <code>T</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-index-int","title":"<code>accept(self, item, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nansumreduxt","title":"<code>NanSumRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#total-t_1","title":"<code>total</code>: <code>T</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_1","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_1","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-index-int_1","title":"<code>accept(self, item, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_1","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_1","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_1","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_1","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_1","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_1","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#prodreduxt","title":"<code>ProdRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#total-t_2","title":"<code>total</code>: <code>T</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_2","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_2","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_2","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_2","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-index-int_2","title":"<code>accept(self, item, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_2","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_2","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_2","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_2","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_2","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_2","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanprodreduxt","title":"<code>NanProdRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_3","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#total-t_3","title":"<code>total</code>: <code>T</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_3","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_3","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_3","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_3","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-index-int_3","title":"<code>accept(self, item, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_3","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_3","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_3","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_3","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_3","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_3","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#meanreduxt","title":"<code>MeanRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_4","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#total-t_4","title":"<code>total</code>: <code>T</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_4","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_4","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_4","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_4","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_4","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_4","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_4","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_4","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_4","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_resultself-curr-count-int","title":"<code>gradual_result(self, curr, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_4","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanmeanreduxt","title":"<code>NanMeanRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_5","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#total-t_5","title":"<code>total</code>: <code>T</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_5","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#nan_count-int","title":"<code>nan_count</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_5","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_5","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_5","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_1","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_5","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_5","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_5","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_5","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#minreduxt","title":"<code>MinRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_6","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#m-optionalt","title":"<code>m</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_6","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_6","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_6","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_6","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_2","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_6","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_6","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_6","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_5","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_5","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_6","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#maxreduxt","title":"<code>MaxRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_7","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#m-optionalt_1","title":"<code>m</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_7","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_7","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_7","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_7","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_3","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_7","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_7","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_7","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_6","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_6","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_7","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#ptpreduxt","title":"<code>PTPRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_8","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#hi-optionalt","title":"<code>hi</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#lo-optionalt","title":"<code>lo</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_8","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_8","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_8","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_8","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_4","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_8","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_8","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_8","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#loopself-a-ptrs-n-int-stride-int-partial-literalbool-s-type_8","title":"<code>loop(self, a: Ptr[S], n: int, stride: int, partial: Literal[bool], S: type)</code>","text":""},{"location":"libraries/api/numpy/reductions/#argminreduxt","title":"<code>ArgMinRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_9","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#m-optionalt_2","title":"<code>m</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#i-int","title":"<code>i</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_9","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_9","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_9","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_9","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_9","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_5","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_9","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_9","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_9","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#argmaxreduxt","title":"<code>ArgMaxRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_10","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#m-optionalt_3","title":"<code>m</code>: <code>Optional[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#i-int_1","title":"<code>i</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_10","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_10","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_10","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_10","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_10","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_6","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_10","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_10","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_10","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#anyreduxt","title":"<code>AnyRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_11","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#a-bool","title":"<code>a</code>: <code>bool</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_11","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_11","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_11","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_11","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_11","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_7","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_11","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_11","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_11","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#allreduxt","title":"<code>AllRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_12","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#a-bool_1","title":"<code>a</code>: <code>bool</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_12","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_12","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_12","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_12","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_12","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_8","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_12","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_12","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_12","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nonzeroreduxt","title":"<code>NonZeroRedux[T]</code>","text":""},{"location":"libraries/api/numpy/reductions/#fields_13","title":"Fields","text":""},{"location":"libraries/api/numpy/reductions/#nonzero-int","title":"<code>nonzero</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/reductions/#t-type_13","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/reductions/#magic-methods_13","title":"Magic methods","text":""},{"location":"libraries/api/numpy/reductions/#__init__self-kwargs_13","title":"<code>__init__(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#methods_13","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#createt-type-kwargs_13","title":"<code>create(T: type, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#acceptself-item-t-index-int_9","title":"<code>accept(self, item: T, index: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#resultself-count-int_13","title":"<code>result(self, count: int)</code>","text":""},{"location":"libraries/api/numpy/reductions/#emptykwargs_13","title":"<code>empty(**kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#doneself_13","title":"<code>done(self)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_initself-kwargs_7","title":"<code>gradual_init(self, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#gradual_acceptself-curr-item-index-int-kwargs_7","title":"<code>gradual_accept(self, curr, item, index: int, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/reductions/#suma-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-0-where-util_novalue","title":"<code>sum(a, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = 0, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nansuma-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-0-where-util_novalue","title":"<code>nansum(a, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = 0, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#proda-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-1-where-util_novalue","title":"<code>prod(a, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = 1, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanproda-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-1-where-util_novalue","title":"<code>nanprod(a, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = 1, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#meana-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>mean(a, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanmeana-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>nanmean(a, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#vara-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>var(a, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanvara-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>nanvar(a, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#stda-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>std(a, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanstda-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>nanstd(a, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#mina-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-initial-util_novalue-where-util_novalue","title":"<code>min(a, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, initial = util._NoValue(), where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#maxa-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-initial-util_novalue-where-util_novalue","title":"<code>max(a, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, initial = util._NoValue(), where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#ptpa-axis-none-out-none-keepdims-literalbool-false","title":"<code>ptp(a, axis = None, out = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#argmina-axis-none-out-none-keepdims-literalbool-false","title":"<code>argmin(a, axis = None, out = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#argmaxa-axis-none-out-none-keepdims-literalbool-false","title":"<code>argmax(a, axis = None, out = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#anya-axis-none-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>any(a, axis = None, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#alla-axis-none-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>all(a, axis = None, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#count_nonzeroa-axis-none-keepdims-literalbool-false","title":"<code>count_nonzero(a, axis = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#mediana-axis-none-out-none-overwrite_input-bool-false-keepdims-literalbool-false","title":"<code>median(a, axis = None, out = None, overwrite_input: bool = False, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanmediana-axis-none-out-none-overwrite_input-bool-false-keepdims-literalbool-false","title":"<code>nanmedian(a, axis = None, out = None, overwrite_input: bool = False, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#quantilea-q-axis-none-out-none-overwrite_input-bool-false-method-str-linear-keepdims-literalbool-false-interpolation-none","title":"<code>quantile(a, q, axis = None, out = None, overwrite_input: bool = False, method: str = \"linear\", keepdims: Literal[bool] = False, interpolation = None)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanquantilea-q-axis-none-out-none-overwrite_input-bool-false-method-str-linear-keepdims-literalbool-false-interpolation-none","title":"<code>nanquantile(a, q, axis = None, out = None, overwrite_input: bool = False, method: str = \"linear\", keepdims: Literal[bool] = False, interpolation = None)</code>","text":""},{"location":"libraries/api/numpy/reductions/#percentilea-q-axis-none-out-none-overwrite_input-bool-false-method-str-linear-keepdims-literalbool-false-interpolation-none","title":"<code>percentile(a, q, axis = None, out = None, overwrite_input: bool = False, method: str = \"linear\", keepdims: Literal[bool] = False, interpolation = None)</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanpercentilea-q-axis-none-out-none-overwrite_input-bool-false-method-str-linear-keepdims-literalbool-false-interpolation-none","title":"<code>nanpercentile(a, q, axis = None, out = None, overwrite_input: bool = False, method: str = \"linear\", keepdims: Literal[bool] = False, interpolation = None)</code>","text":""},{"location":"libraries/api/numpy/reductions/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/reductions/#methods_14","title":"Methods","text":""},{"location":"libraries/api/numpy/reductions/#sumself-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-0-where-util_novalue","title":"<code>sum(self, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = 0, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#prodself-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-1-where-util_novalue","title":"<code>prod(self, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = 1, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#meanself-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>mean(self, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanmeanself-axis-none-dtype-type-nonetype-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>nanmean(self, axis = None, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#varself-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>var(self, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanvarself-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>nanvar(self, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#stdself-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>std(self, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#nanstdself-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-where-util_novalue","title":"<code>nanstd(self, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#minself-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-initial-util_novalue-where-util_novalue","title":"<code>min(self, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, initial = util._NoValue(), where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#ptpself-axis-none-out-none-keepdims-literalbool-false","title":"<code>ptp(self, axis = None, out = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#maxself-axis-none-dtype-type-nonetype-out-none-ddof-int-0-keepdims-literalbool-false-initial-util_novalue-where-util_novalue","title":"<code>max(self, axis = None, dtype: type = NoneType, out = None, ddof: int = 0, keepdims: Literal[bool] = False, initial = util._NoValue(), where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#argminself-axis-none-out-none-keepdims-literalbool-false","title":"<code>argmin(self, axis = None, out = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#argmaxself-axis-none-out-none-keepdims-literalbool-false","title":"<code>argmax(self, axis = None, out = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/reductions/#anyself-axis-none-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>any(self, axis = None, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/reductions/#allself-axis-none-out-none-keepdims-literalbool-false-where-util_novalue","title":"<code>all(self, axis = None, out = None, keepdims: Literal[bool] = False, where = util._NoValue())</code>","text":""},{"location":"libraries/api/numpy/routines/","title":"module <code>numpy.routines</code>","text":"<p>Source: <code>stdlib/numpy/routines.codon</code></p>"},{"location":"libraries/api/numpy/routines/#arraya-dtype-type-nonetype-copy-bool-true-order-str-k-ndmin-literalint-0","title":"<code>array(a, dtype: type = NoneType, copy: bool = True, order: str = \"K\", ndmin: Literal[int] = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#asarraya-dtype-type-nonetype-order-str-k","title":"<code>asarray(a, dtype: type = NoneType, order: str = \"K\")</code>","text":""},{"location":"libraries/api/numpy/routines/#asanyarraya-dtype-type-nonetype-order-str-k","title":"<code>asanyarray(a, dtype: type = NoneType, order: str = \"K\")</code>","text":""},{"location":"libraries/api/numpy/routines/#asarray_chkfinitea-dtype-type-nonetype-order-str-k","title":"<code>asarray_chkfinite(a, dtype: type = NoneType, order: str = \"K\")</code>","text":""},{"location":"libraries/api/numpy/routines/#emptyshape-dtype-type-float-order-str-c","title":"<code>empty(shape, dtype: type = float, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#empty_likeprototype-dtype-type-nonetype-order-str-k-shape-none","title":"<code>empty_like(prototype, dtype: type = NoneType, order: str = \"K\", shape = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#zerosshape-dtype-type-float-order-str-c","title":"<code>zeros(shape, dtype: type = float, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#zeros_likeprototype-dtype-type-nonetype-order-str-k","title":"<code>zeros_like(prototype, dtype: type = NoneType, order: str = \"K\")</code>","text":""},{"location":"libraries/api/numpy/routines/#onesshape-dtype-type-float-order-str-c","title":"<code>ones(shape, dtype: type = float, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#ones_likeprototype-dtype-type-nonetype-order-str-k","title":"<code>ones_like(prototype, dtype: type = NoneType, order: str = \"K\")</code>","text":""},{"location":"libraries/api/numpy/routines/#identityn-int-dtype-type-float","title":"<code>identity(n: int, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#eyen-int-m-optionalint-none-k-int-0-dtype-type-float-order-str-c","title":"<code>eye(N: int, M: Optional[int] = None, k: int = 0, dtype: type = float, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#diagv-k-int-0","title":"<code>diag(v, k: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#diagflatv-k-int-0","title":"<code>diagflat(v, k: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#trin-int-m-optionalint-none-k-int-0-dtype-type-float","title":"<code>tri(N: int, M: Optional[int] = None, k: int = 0, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#triux-k-int-0","title":"<code>triu(x, k: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#trilx-k-int-0","title":"<code>tril(x, k: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#vanderx-n-optionalint-none-increasing-bool-false","title":"<code>vander(x, N: Optional[int] = None, increasing: bool = False)</code>","text":""},{"location":"libraries/api/numpy/routines/#arangestart-float-stop-float-step-float-dtype-type-float","title":"<code>arange(start: float, stop: float, step: float, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#arangestop-float-step-float-dtype-type-float-overload-function-is-overloaded","title":"<code>arange(stop: float, step: float, dtype: type = float)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-float-stop-float-dtype-type-float-overload-function-is-overloaded","title":"<code>arange(start: float, stop: float, dtype: type = float)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestop-float-dtype-type-float-overload-function-is-overloaded","title":"<code>arange(stop: float, dtype: type = float)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-int-stop-int-step-int-dtype-type-int-overload-function-is-overloaded","title":"<code>arange(start: int, stop: int, step: int, dtype: type = int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestop-int-step-int-dtype-type-int-overload-function-is-overloaded","title":"<code>arange(stop: int, step: int, dtype: type = int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-int-stop-int-dtype-type-int-overload-function-is-overloaded","title":"<code>arange(start: int, stop: int, dtype: type = int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestop-int-dtype-type-int-overload-function-is-overloaded","title":"<code>arange(stop: int, dtype: type = int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-datetime64-stop-step-none-dtype-type-nonetype-overload-function-is-overloaded","title":"<code>arange(start: datetime64, stop, step = None, dtype: type = NoneType)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-timedelta64-stop-step-dtype-type-nonetype-overload-function-is-overloaded","title":"<code>arange(start: timedelta64, stop, step, dtype: type = NoneType)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-timedelta64-stop-dtype-type-nonetype-overload-function-is-overloaded","title":"<code>arange(start: timedelta64, stop, dtype: type = NoneType)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestop-timedelta64-dtype-type-nonetype-overload-function-is-overloaded","title":"<code>arange(stop: timedelta64, dtype: type = NoneType)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#arangestart-str-stop-step-none-dtype-type-datetime64d-1-overload-function-is-overloaded","title":"<code>arange(start: str, stop, step = None, dtype: type = datetime64[(\"D\", 1)])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#linspacestart-float-stop-float-num-int-50-endpoint-bool-true-retstep-literalbool-false-dtype-type-float","title":"<code>linspace(start: float, stop: float, num: int = 50, endpoint: bool = True, retstep: Literal[bool] = False, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#linspacestart-float-stop-float-num-int-50-endpoint-bool-true-retstep-literalbool-false-dtype-type-float_1","title":"<code>linspace(start: float, stop: float, num: int = 50, endpoint: bool = True, retstep: Literal[bool] = False, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#logspacestart-float-stop-float-num-int-50-endpoint-bool-true-base-float-100-retstep-literalbool-false-dtype-type-float","title":"<code>logspace(start: float, stop: float, num: int = 50, endpoint: bool = True, base: float = 10.0, retstep: Literal[bool] = False, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#geomspacestart-float-stop-float-num-int-50-endpoint-bool-true-dtype-type-float","title":"<code>geomspace(start: float, stop: float, num: int = 50, endpoint: bool = True, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#fromfunctionfunction-shape-dtype-type-float-kwargs","title":"<code>fromfunction(function, shape, dtype: type = float, **kwargs)</code>","text":""},{"location":"libraries/api/numpy/routines/#fromiteriterable-dtype-type-count-int-1","title":"<code>fromiter(iterable, dtype: type, count: int = -1)</code>","text":""},{"location":"libraries/api/numpy/routines/#frombufferbuffer-str-dtype-type-float-count-int-1-offset-int-0","title":"<code>frombuffer(buffer: str, dtype: type = float, count: int = -1, offset: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#broadcast_shapesargs","title":"<code>broadcast_shapes(*args)</code>","text":""},{"location":"libraries/api/numpy/routines/#broadcast_tox-shape","title":"<code>broadcast_to(x, shape)</code>","text":""},{"location":"libraries/api/numpy/routines/#broadcast_arraysargs","title":"<code>broadcast_arrays(*args)</code>","text":""},{"location":"libraries/api/numpy/routines/#meshgridxi-copy-bool-true-sparse-literalbool-false-indexing-literalstr-xy","title":"<code>meshgrid(*xi, copy: bool = True, sparse: Literal[bool] = False, indexing: Literal[str] = \"xy\")</code>","text":""},{"location":"libraries/api/numpy/routines/#broadcastargs","title":"<code>broadcast(*args)</code>","text":""},{"location":"libraries/api/numpy/routines/#fullshape-fill_value-dtype-type-nonetype-order-str-c","title":"<code>full(shape, fill_value, dtype: type = NoneType, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#full_likeprototype-fill_value-dtype-type-nonetype-order-str-k","title":"<code>full_like(prototype, fill_value, dtype: type = NoneType, order: str = \"K\")</code>","text":""},{"location":"libraries/api/numpy/routines/#copytodst-ndarray-src-where-true","title":"<code>copyto(dst: ndarray, src, where = True)</code>","text":""},{"location":"libraries/api/numpy/routines/#ndima","title":"<code>ndim(a)</code>","text":""},{"location":"libraries/api/numpy/routines/#sizea-axis-optionalint-none","title":"<code>size(a, axis: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#shapea","title":"<code>shape(a)</code>","text":""},{"location":"libraries/api/numpy/routines/#reshapea-newshape-order-str-c","title":"<code>reshape(a, newshape, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#transposea-axes-none","title":"<code>transpose(a, axes = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#ravela-order-str-c","title":"<code>ravel(a, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#ascontiguousarraya-dtype-type-nonetype","title":"<code>ascontiguousarray(a, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/routines/#asfortranarraya-dtype-type-nonetype","title":"<code>asfortranarray(a, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/routines/#asfarraya-dtype-type-float","title":"<code>asfarray(a, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/routines/#moveaxisa-source-destination","title":"<code>moveaxis(a, source, destination)</code>","text":""},{"location":"libraries/api/numpy/routines/#swapaxesa-axis1-int-axis2-int","title":"<code>swapaxes(a, axis1: int, axis2: int)</code>","text":""},{"location":"libraries/api/numpy/routines/#atleast_1darys","title":"<code>atleast_1d(*arys)</code>","text":""},{"location":"libraries/api/numpy/routines/#atleast_2darys","title":"<code>atleast_2d(*arys)</code>","text":""},{"location":"libraries/api/numpy/routines/#atleast_3darys","title":"<code>atleast_3d(*arys)</code>","text":""},{"location":"libraries/api/numpy/routines/#requirea-dtype-type-nonetype-requirements-none","title":"<code>require(a, dtype: type = NoneType, requirements = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#concatenatearrays-axis-0-out-none-dtype-type-nonetype","title":"<code>concatenate(arrays, axis = 0, out = None, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/routines/#expand_dimsa-axis","title":"<code>expand_dims(a, axis)</code>","text":""},{"location":"libraries/api/numpy/routines/#stackarrays-axis-int-0-out-none-dtype-type-nonetype","title":"<code>stack(arrays, axis: int = 0, out = None, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/routines/#vstacktup-dtype-type-nonetype","title":"<code>vstack(tup, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/routines/#hstacktup-dtype-type-nonetype","title":"<code>hstack(tup, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/routines/#dstacktup","title":"<code>dstack(tup)</code>","text":""},{"location":"libraries/api/numpy/routines/#row_stack-vstack","title":"<code>row_stack</code> = <code>vstack</code>","text":""},{"location":"libraries/api/numpy/routines/#column_stacktup","title":"<code>column_stack(tup)</code>","text":""},{"location":"libraries/api/numpy/routines/#repeata-repeats-axis-none","title":"<code>repeat(a, repeats, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#deletearr-obj-axis-none","title":"<code>delete(arr, obj, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#appendarr-values-axis-none","title":"<code>append(arr, values, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#insertarr-obj-values-axis-none","title":"<code>insert(arr, obj, values, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#array_splitary-indices_or_sections-axis-int-0","title":"<code>array_split(ary, indices_or_sections, axis: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#splitary-indices_or_sections-axis-int-0","title":"<code>split(ary, indices_or_sections, axis: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#vsplitary-indices_or_sections","title":"<code>vsplit(ary, indices_or_sections)</code>","text":""},{"location":"libraries/api/numpy/routines/#hsplitary-indices_or_sections","title":"<code>hsplit(ary, indices_or_sections)</code>","text":""},{"location":"libraries/api/numpy/routines/#dsplitary-indices_or_sections","title":"<code>dsplit(ary, indices_or_sections)</code>","text":""},{"location":"libraries/api/numpy/routines/#trim_zerosfilt-trim-str-fb","title":"<code>trim_zeros(filt, trim: str = \"fb\")</code>","text":""},{"location":"libraries/api/numpy/routines/#flipm-axis-none","title":"<code>flip(m, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#fliplrm","title":"<code>fliplr(m)</code>","text":""},{"location":"libraries/api/numpy/routines/#flipudm","title":"<code>flipud(m)</code>","text":""},{"location":"libraries/api/numpy/routines/#rot90m-k-int-1-axes-tupleint-int-0-1","title":"<code>rot90(m, k: int = 1, axes: Tuple[int, int] = (0, 1))</code>","text":""},{"location":"libraries/api/numpy/routines/#resizea-new_shape","title":"<code>resize(a, new_shape)</code>","text":""},{"location":"libraries/api/numpy/routines/#tilea-reps","title":"<code>tile(A, reps)</code>","text":""},{"location":"libraries/api/numpy/routines/#rolla-shift-axis-none","title":"<code>roll(a, shift, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#blockarrays","title":"<code>block(arrays)</code>","text":""},{"location":"libraries/api/numpy/routines/#isclosea-b-rtol-float-1e-05-atol-float-1e-08-equal_nan-bool-false","title":"<code>isclose(a, b, rtol: float = 1e-05, atol: float = 1e-08, equal_nan: bool = False)</code>","text":""},{"location":"libraries/api/numpy/routines/#allclosea-b-rtol-float-1e-05-atol-float-1e-08-equal_nan-bool-false","title":"<code>allclose(a, b, rtol: float = 1e-05, atol: float = 1e-08, equal_nan: bool = False)</code>","text":""},{"location":"libraries/api/numpy/routines/#array_equala1-a2-equal_nan-bool-false","title":"<code>array_equal(a1, a2, equal_nan: bool = False)</code>","text":""},{"location":"libraries/api/numpy/routines/#array_equiva1-a2","title":"<code>array_equiv(a1, a2)</code>","text":""},{"location":"libraries/api/numpy/routines/#squeezea-axis-none","title":"<code>squeeze(a, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#padarray-pad_width-mode-constant-kwargs","title":"<code>pad(array, pad_width, mode = \"constant\", **kwargs)</code>","text":""},{"location":"libraries/api/numpy/routines/#nonzeroa","title":"<code>nonzero(a)</code>","text":""},{"location":"libraries/api/numpy/routines/#flatnonzeroa","title":"<code>flatnonzero(a)</code>","text":""},{"location":"libraries/api/numpy/routines/#argwherea","title":"<code>argwhere(a)</code>","text":""},{"location":"libraries/api/numpy/routines/#wherecondition-x-y","title":"<code>where(condition, x, y)</code>","text":""},{"location":"libraries/api/numpy/routines/#wherecondition-overload-function-is-overloaded","title":"<code>where(condition)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#extractcondition-arr","title":"<code>extract(condition, arr)</code>","text":""},{"location":"libraries/api/numpy/routines/#searchsorteda-v-side-str-left-sorter-none","title":"<code>searchsorted(a, v, side: str = \"left\", sorter = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#takea-indices-axis-none-out-none-mode-str-raise","title":"<code>take(a, indices, axis = None, out = None, mode: str = \"raise\")</code>","text":""},{"location":"libraries/api/numpy/routines/#indicesdimensions-dtype-type-int-sparse-literalbool-false","title":"<code>indices(dimensions, dtype: type = int, sparse: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/routines/#ix_args","title":"<code>ix_(*args)</code>","text":""},{"location":"libraries/api/numpy/routines/#ravel_multi_indexmulti_index-dims-mode-str-raise-order-str-c","title":"<code>ravel_multi_index(multi_index, dims, mode: str = \"raise\", order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#unravel_indexindices-shape-order-str-c","title":"<code>unravel_index(indices, shape, order: str = \"C\")</code>","text":""},{"location":"libraries/api/numpy/routines/#diag_indicesn-int-ndim-int","title":"<code>diag_indices(n: int, ndim: int)</code>","text":""},{"location":"libraries/api/numpy/routines/#diag_indicesn-int-ndim-literalint-2-overload-function-is-overloaded","title":"<code>diag_indices(n: int, ndim: Literal[int] = 2)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/routines/#diag_indices_fromarr","title":"<code>diag_indices_from(arr)</code>","text":""},{"location":"libraries/api/numpy/routines/#mask_indicesn-int-mask_func-k-0","title":"<code>mask_indices(n: int, mask_func, k = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#tril_indicesn-int-k-int-0-m-optionalint-none","title":"<code>tril_indices(n: int, k: int = 0, m: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#tril_indices_fromarr-k-int-0","title":"<code>tril_indices_from(arr, k: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#triu_indicesn-int-k-int-0-m-optionalint-none","title":"<code>triu_indices(n: int, k: int = 0, m: Optional[int] = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#triu_indices_fromarr-k-int-0","title":"<code>triu_indices_from(arr, k: int = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#take_along_axisarr-indices-axis","title":"<code>take_along_axis(arr, indices, axis)</code>","text":""},{"location":"libraries/api/numpy/routines/#choosea-choices-out-none-mode-str-raise","title":"<code>choose(a, choices, out = None, mode: str = \"raise\")</code>","text":""},{"location":"libraries/api/numpy/routines/#compresscondition-a-axis-none-out-none","title":"<code>compress(condition, a, axis = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#diagonala-offset-int-0-axis1-int-0-axis2-int-1","title":"<code>diagonal(a, offset: int = 0, axis1: int = 0, axis2: int = 1)</code>","text":""},{"location":"libraries/api/numpy/routines/#selectcondlist-list-choicelist-list-default-0","title":"<code>select(condlist: List, choicelist: List, default = 0)</code>","text":""},{"location":"libraries/api/numpy/routines/#placearr-ndarray-mask-vals","title":"<code>place(arr: ndarray, mask, vals)</code>","text":""},{"location":"libraries/api/numpy/routines/#puta-ndarray-ind-v-mode-str-raise","title":"<code>put(a: ndarray, ind, v, mode: str = \"raise\")</code>","text":""},{"location":"libraries/api/numpy/routines/#put_along_axisarr-ndarray-indices-values-axis","title":"<code>put_along_axis(arr: ndarray, indices, values, axis)</code>","text":""},{"location":"libraries/api/numpy/routines/#putmaska-ndarray-mask-values","title":"<code>putmask(a: ndarray, mask, values)</code>","text":""},{"location":"libraries/api/numpy/routines/#fill_diagonala-ndarray-val-wrap-bool-false","title":"<code>fill_diagonal(a: ndarray, val, wrap: bool = False)</code>","text":""},{"location":"libraries/api/numpy/routines/#rounda-decimals-int-0-out-none","title":"<code>round(a, decimals: int = 0, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#around-round","title":"<code>around</code> = <code>round</code>","text":""},{"location":"libraries/api/numpy/routines/#clipa-a_min-a_max-out-none","title":"<code>clip(a, a_min, a_max, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#ndenumeratearr","title":"<code>ndenumerate(arr)</code>","text":""},{"location":"libraries/api/numpy/routines/#ndindexshape","title":"<code>ndindex(*shape)</code>","text":""},{"location":"libraries/api/numpy/routines/#iterabley","title":"<code>iterable(y)</code>","text":""},{"location":"libraries/api/numpy/routines/#packbitsa-axis-none-bitorder-str-big","title":"<code>packbits(a, axis = None, bitorder: str = \"big\")</code>","text":""},{"location":"libraries/api/numpy/routines/#unpackbitsa-axis-none-count-none-bitorder-str-big","title":"<code>unpackbits(a, axis = None, count = None, bitorder: str = \"big\")</code>","text":""},{"location":"libraries/api/numpy/routines/#isposinfx-out-none","title":"<code>isposinf(x, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#isneginfx-out-none","title":"<code>isneginf(x, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#iscomplexx","title":"<code>iscomplex(x)</code>","text":""},{"location":"libraries/api/numpy/routines/#iscomplexobjx","title":"<code>iscomplexobj(x)</code>","text":""},{"location":"libraries/api/numpy/routines/#isrealx","title":"<code>isreal(x)</code>","text":""},{"location":"libraries/api/numpy/routines/#isrealobjx","title":"<code>isrealobj(x)</code>","text":""},{"location":"libraries/api/numpy/routines/#isfortrana-ndarray","title":"<code>isfortran(a: ndarray)</code>","text":""},{"location":"libraries/api/numpy/routines/#isscalarelement","title":"<code>isscalar(element)</code>","text":""},{"location":"libraries/api/numpy/routines/#realval","title":"<code>real(val)</code>","text":""},{"location":"libraries/api/numpy/routines/#imagval","title":"<code>imag(val)</code>","text":""},{"location":"libraries/api/numpy/routines/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/routines/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/routines/#real-property-method-is-a-class-property","title":"<code>real</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/routines/#imag-property-method-is-a-class-property","title":"<code>imag</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/routines/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/routines/#takeself-indices-axis-none-out-none-mode-str-raise","title":"<code>take(self, indices, axis = None, out = None, mode: str = \"raise\")</code>","text":""},{"location":"libraries/api/numpy/routines/#squeezeself-axis-none","title":"<code>squeeze(self, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#nonzeroself","title":"<code>nonzero(self)</code>","text":""},{"location":"libraries/api/numpy/routines/#searchsortedself-v-side-str-left-sorter-none","title":"<code>searchsorted(self, v, side: str = \"left\", sorter = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#repeatself-repeats-axis-none","title":"<code>repeat(self, repeats, axis = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#compressself-condition-axis-none-out-none","title":"<code>compress(self, condition, axis = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#chooseself-choices-out-none-mode-str-raise","title":"<code>choose(self, choices, out = None, mode: str = \"raise\")</code>","text":""},{"location":"libraries/api/numpy/routines/#diagonalself-offset-int-0-axis1-int-0-axis2-int-1","title":"<code>diagonal(self, offset: int = 0, axis1: int = 0, axis2: int = 1)</code>","text":""},{"location":"libraries/api/numpy/routines/#putself-ind-v-mode-str-raise","title":"<code>put(self, ind, v, mode: str = \"raise\")</code>","text":""},{"location":"libraries/api/numpy/routines/#roundself-decimals-int-0-out-none","title":"<code>round(self, decimals: int = 0, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#clipself-min-none-max-none-out-none","title":"<code>clip(self, min = None, max = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#realself-val","title":"<code>real(self, val)</code>","text":""},{"location":"libraries/api/numpy/routines/#imagself-val","title":"<code>imag(self, val)</code>","text":""},{"location":"libraries/api/numpy/routines/#conjself","title":"<code>conj(self)</code>","text":""},{"location":"libraries/api/numpy/routines/#conjugateself","title":"<code>conjugate(self)</code>","text":""},{"location":"libraries/api/numpy/routines/#flatself-val","title":"<code>flat(self, val)</code>","text":""},{"location":"libraries/api/numpy/routines/#busdaycalendar-extend-class-is-extended-to-add-given-methods","title":"<code>busdaycalendar</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/routines/#properties_1","title":"Properties","text":""},{"location":"libraries/api/numpy/routines/#weekmask-property-method-is-a-class-property","title":"<code>weekmask</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/routines/#holidays-property-method-is-a-class-property","title":"<code>holidays</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/routines/#busday_offsetdates-offsets-roll-str-raise-weekmask-none-holidays-none-busdaycal-none-out-none","title":"<code>busday_offset(dates, offsets, roll: str = \"raise\", weekmask = None, holidays = None, busdaycal = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#busday_countbegindates-enddates-weekmask-none-holidays-none-busdaycal-none-out-none","title":"<code>busday_count(begindates, enddates, weekmask = None, holidays = None, busdaycal = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#is_busdaydates-weekmask-none-holidays-none-busdaycal-none-out-none","title":"<code>is_busday(dates, weekmask = None, holidays = None, busdaycal = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/routines/#datetime_datadtype-type","title":"<code>datetime_data(dtype: type)</code>","text":""},{"location":"libraries/api/numpy/routines/#datetime_as_stringarr-unit-none-timezone-str-naive","title":"<code>datetime_as_string(arr, unit = None, timezone: str = \"naive\")</code>","text":""},{"location":"libraries/api/numpy/sorting/","title":"module <code>numpy.sorting</code>","text":"<p>Source: <code>stdlib/numpy/sorting.codon</code></p>"},{"location":"libraries/api/numpy/sorting/#insertionsortstart-ptrt-n-int-t-type","title":"<code>insertionsort(start: Ptr[T], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#ainsertionsortv-ptrt-tosort-ptrint-n-int-t-type","title":"<code>ainsertionsort(v: Ptr[T], tosort: Ptr[int], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#heapsortstart-ptrt-n-int-t-type","title":"<code>heapsort(start: Ptr[T], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#aheapsortvv-ptrt-tosort-ptrint-n-int-t-type","title":"<code>aheapsort(vv: Ptr[T], tosort: Ptr[int], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#pya_qs_stack-literalint-100","title":"<code>PYA_QS_STACK</code>: <code>Literal[int]</code> = <code>100</code>","text":""},{"location":"libraries/api/numpy/sorting/#small_quicksort-literalint-15","title":"<code>SMALL_QUICKSORT</code>: <code>Literal[int]</code> = <code>15</code>","text":""},{"location":"libraries/api/numpy/sorting/#small_mergesort-literalint-20","title":"<code>SMALL_MERGESORT</code>: <code>Literal[int]</code> = <code>20</code>","text":""},{"location":"libraries/api/numpy/sorting/#small_string-literalint-16","title":"<code>SMALL_STRING</code>: <code>Literal[int]</code> = <code>16</code>","text":""},{"location":"libraries/api/numpy/sorting/#mergesortstart-ptrt-num-int-t-type","title":"<code>mergesort(start: Ptr[T], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#amergesortv-ptrt-tosort-ptrint-num-int-t-type","title":"<code>amergesort(v: Ptr[T], tosort: Ptr[int], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#insertion_sort_threshold-literalint-24","title":"<code>INSERTION_SORT_THRESHOLD</code>: <code>Literal[int]</code> = <code>24</code>","text":""},{"location":"libraries/api/numpy/sorting/#ninther_threshold-literalint-128","title":"<code>NINTHER_THRESHOLD</code>: <code>Literal[int]</code> = <code>128</code>","text":""},{"location":"libraries/api/numpy/sorting/#partial_insertion_sort_limit-literalint-8","title":"<code>PARTIAL_INSERTION_SORT_LIMIT</code>: <code>Literal[int]</code> = <code>8</code>","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_int16_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_int16(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_uint16_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_uint16(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_int32_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_int32(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_uint32_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_uint32(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_int64_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_int64(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_uint64_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_uint64(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_uint128_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_uint128(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_float32_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_float32(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#cnp_sort_float64_-cobj-_-int-c-function-is-external-c-function","title":"<code>cnp_sort_float64(_: cobj, _: int)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/sorting/#quicksortstart-ptrt-n-int-t-type","title":"<code>quicksort(start: Ptr[T], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#aquicksortstart-ptrt-tosort-ptrint-n-int-t-type","title":"<code>aquicksort(start: Ptr[T], tosort: Ptr[int], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#key_ofx-ut-t-type-ut-type","title":"<code>key_of(x: UT, T: type, UT: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#nth_bytekey-t-l-int-t-type","title":"<code>nth_byte(key: T, l: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#radixsortstart-ptrt-num-int-t-type","title":"<code>radixsort(start: Ptr[T], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#aradixsortstart-ptrt-tosort-ptrint-num-int-t-type","title":"<code>aradixsort(start: Ptr[T], tosort: Ptr[int], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#timsort_stack_size-literalint-128","title":"<code>TIMSORT_STACK_SIZE</code>: <code>Literal[int]</code> = <code>128</code>","text":""},{"location":"libraries/api/numpy/sorting/#buffert","title":"<code>Buffer[T]</code>","text":""},{"location":"libraries/api/numpy/sorting/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/sorting/#pw-ptrt","title":"<code>pw</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/sorting/#size-int","title":"<code>size</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/sorting/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/sorting/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/sorting/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/numpy/sorting/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/sorting/#resizeself-new_size-int","title":"<code>resize(self, new_size: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#freeself","title":"<code>free(self)</code>","text":""},{"location":"libraries/api/numpy/sorting/#timsortstart-ptrt-num-int-t-type","title":"<code>timsort(start: Ptr[T], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#atimsortstart-ptrt-tosort-ptrint-num-int-t-type","title":"<code>atimsort(start: Ptr[T], tosort: Ptr[int], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#stablesortstart-ptrt-num-int-t-type","title":"<code>stablesort(start: Ptr[T], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#astablesortstart-ptrt-tosort-ptrint-num-int-t-type","title":"<code>astablesort(start: Ptr[T], tosort: Ptr[int], num: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/sorting/#max_pivot_stack-literalint-50","title":"<code>MAX_PIVOT_STACK</code>: <code>Literal[int]</code> = <code>50</code>","text":""},{"location":"libraries/api/numpy/sorting/#sorteet-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Sortee[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/sorting/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/sorting/#v-ptrt","title":"<code>v</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/sorting/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/sorting/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/sorting/#__call__self-i-int","title":"<code>__call__(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/sorting/#swapself-i-int-j-int","title":"<code>swap(self, i: int, j: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#idx-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Idx</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/sorting/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/sorting/#__call__self-i-int_1","title":"<code>__call__(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#argsortee-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>ArgSortee</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/sorting/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/sorting/#tosort-ptrint","title":"<code>tosort</code>: <code>Ptr[int]</code>","text":""},{"location":"libraries/api/numpy/sorting/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/sorting/#__call__self-i-int_2","title":"<code>__call__(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#methods_2","title":"Methods","text":""},{"location":"libraries/api/numpy/sorting/#swapself-i-int-j-int_1","title":"<code>swap(self, i: int, j: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#argidx-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>ArgIdx</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/sorting/#fields_3","title":"Fields","text":""},{"location":"libraries/api/numpy/sorting/#tosort-ptrint_1","title":"<code>tosort</code>: <code>Ptr[int]</code>","text":""},{"location":"libraries/api/numpy/sorting/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/sorting/#__call__self-i-int_3","title":"<code>__call__(self, i: int)</code>","text":""},{"location":"libraries/api/numpy/sorting/#partitiona-kth-axis-1-kind-str-introselect","title":"<code>partition(a, kth, axis = -1, kind: str = \"introselect\")</code>","text":""},{"location":"libraries/api/numpy/sorting/#argpartitiona-ndarray-kth-axis-1-kind-str-introselect","title":"<code>argpartition(a: ndarray, kth, axis = -1, kind: str = \"introselect\")</code>","text":""},{"location":"libraries/api/numpy/sorting/#lexsortkeys-axis-int-1","title":"<code>lexsort(keys, axis: int = -1)</code>","text":""},{"location":"libraries/api/numpy/sorting/#sorta-axis-1-kind-optionalstr-none","title":"<code>sort(a, axis = -1, kind: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/sorting/#argsorta-axis-1-kind-optionalstr-none","title":"<code>argsort(a, axis = -1, kind: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/sorting/#sort_complexa","title":"<code>sort_complex(a)</code>","text":""},{"location":"libraries/api/numpy/sorting/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/sorting/#methods_3","title":"Methods","text":""},{"location":"libraries/api/numpy/sorting/#sortself-axis-int-1-kind-optionalstr-none","title":"<code>sort(self, axis: int = -1, kind: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/sorting/#argsortself-axis-int-1-kind-optionalstr-none","title":"<code>argsort(self, axis: int = -1, kind: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/sorting/#partitionself-kth-axis-int-1-kind-str-introselect","title":"<code>partition(self, kth, axis: int = -1, kind: str = \"introselect\")</code>","text":""},{"location":"libraries/api/numpy/sorting/#argpartitionself-kth-axis-int-1-kind-str-introselect","title":"<code>argpartition(self, kth, axis: int = -1, kind: str = \"introselect\")</code>","text":""},{"location":"libraries/api/numpy/statistics/","title":"module <code>numpy.statistics</code>","text":"<p>Source: <code>stdlib/numpy/statistics.codon</code></p>"},{"location":"libraries/api/numpy/statistics/#averagea-axis-none-weights-none-returned-literalbool-false-keepdims-literalbool-false","title":"<code>average(a, axis = None, weights = None, returned: Literal[bool] = False, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/statistics/#covm-y-none-rowvar-bool-true-bias-bool-false-ddof-optionalint-none-fweights-none-aweights-none-dtype-type-nonetype","title":"<code>cov(m, y = None, rowvar: bool = True, bias: bool = False, ddof: Optional[int] = None, fweights = None, aweights = None, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/statistics/#corrcoefx-y-none-rowvar-true-dtype-type-nonetype","title":"<code>corrcoef(x, y = None, rowvar = True, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/statistics/#correlatea-b-mode-str-valid","title":"<code>correlate(a, b, mode: str = \"valid\")</code>","text":""},{"location":"libraries/api/numpy/statistics/#bincountx-weights-none-minlength-int-0","title":"<code>bincount(x, weights = None, minlength: int = 0)</code>","text":""},{"location":"libraries/api/numpy/statistics/#digitizex-bins-right-bool-false","title":"<code>digitize(x, bins, right: bool = False)</code>","text":""},{"location":"libraries/api/numpy/statistics/#histograma-bins-10-range-none-density-literalbool-false-weights-none","title":"<code>histogram(a, bins = 10, range = None, density: Literal[bool] = False, weights = None)</code>","text":""},{"location":"libraries/api/numpy/statistics/#histogram_bin_edgesa-bins-10-range-none-weights-none","title":"<code>histogram_bin_edges(a, bins = 10, range = None, weights = None)</code>","text":""},{"location":"libraries/api/numpy/ufunc/","title":"module <code>numpy.ufunc</code>","text":"<p>Source: <code>stdlib/numpy/ufunc.codon</code></p>"},{"location":"libraries/api/numpy/ufunc/#decide_typesx-y-dtype-type","title":"<code>decide_types(x, y, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#decide_types_copysignx-y-dtype-type","title":"<code>decide_types_copysign(x, y, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#decide_types_ldexpx-y-dtype-type","title":"<code>decide_types_ldexp(x, y, dtype: type)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#unaryufunc__name__f-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>UnaryUFunc[__name__,F]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/ufunc/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/ufunc/#f-type","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/ufunc/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/ufunc/#nin-property-method-is-a-class-property","title":"<code>nin</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ufunc/#nout-property-method-is-a-class-property","title":"<code>nout</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ufunc/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ufunc/#__new__op-f-name-literalstr-f-type","title":"<code>__new__(op: F, name: Literal[str], F: type)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#__call__self-x-out-none-where-true-dtype-type-nonetype","title":"<code>__call__(self, x, out = None, where = True, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/ufunc/#atself-a-indices","title":"<code>at(self, a, indices)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#unaryufunc2__name__f-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>UnaryUFunc2[__name__,F]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/ufunc/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/ufunc/#f-type_1","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/ufunc/#properties_1","title":"Properties","text":""},{"location":"libraries/api/numpy/ufunc/#nin-property-method-is-a-class-property_1","title":"<code>nin</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ufunc/#nout-property-method-is-a-class-property_1","title":"<code>nout</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ufunc/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ufunc/#__new__op-f-name-literalstr-f-type_1","title":"<code>__new__(op: F, name: Literal[str], F: type)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#__call__self-x-out1-none-out2-none-out-none-where-true","title":"<code>__call__(self, x, out1 = None, out2 = None, out = None, where = True)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#binaryufunc__name__fi-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>BinaryUFunc[__name__,F,I]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/ufunc/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/ufunc/#identity-i","title":"<code>identity</code>: <code>I</code>","text":""},{"location":"libraries/api/numpy/ufunc/#f-type_2","title":"<code>F</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/ufunc/#i-type","title":"<code>I</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/ufunc/#properties_2","title":"Properties","text":""},{"location":"libraries/api/numpy/ufunc/#nin-property-method-is-a-class-property_2","title":"<code>nin</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ufunc/#nout-property-method-is-a-class-property_2","title":"<code>nout</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/ufunc/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/ufunc/#__new__op-f-name-literalstr-identity-i-none-f-type-i-type","title":"<code>__new__(op: F, name: Literal[str], identity: I = None, F: type, I: type)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#__call__self-x-y-out-none-where-true-dtype-type-nonetype","title":"<code>__call__(self, x, y, out = None, where = True, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/ufunc/#reduceself-array-axis-0-dtype-type-nonetype-out-none-keepdims-literalbool-false-initial-util_novalue-where-true","title":"<code>reduce(self, array, axis = 0, dtype: type = NoneType, out = None, keepdims: Literal[bool] = False, initial = util._NoValue(), where = True)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#accumulateself-array-axis-int-0-dtype-type-nonetype-out-none","title":"<code>accumulate(self, array, axis: int = 0, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#atself-a-indices-b","title":"<code>at(self, a, indices, b)</code>","text":""},{"location":"libraries/api/numpy/ufunc/#outerself-a-b-dtype-type-nonetype","title":"<code>outer(self, A, B, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/util/","title":"module <code>numpy.util</code>","text":"<p>Source: <code>stdlib/numpy/util.codon</code></p>"},{"location":"libraries/api/numpy/util/#axiserror","title":"<code>AxisError</code>","text":""},{"location":"libraries/api/numpy/util/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/util/#__init__self-message-str","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/util/#tooharderror","title":"<code>TooHardError</code>","text":""},{"location":"libraries/api/numpy/util/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/util/#__init__self-message-str_1","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_gettup-idx","title":"<code>tuple_get(tup, idx)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_settup-idx-elm-init-0","title":"<code>tuple_set(tup, idx, elm, init = 0)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_addtup-idx-inc-init-0","title":"<code>tuple_add(tup, idx, inc, init = 0)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_deletetup-idx-init-0","title":"<code>tuple_delete(tup, idx, init = 0)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_inserttup-idx-elm-init-0","title":"<code>tuple_insert(tup, idx, elm, init = 0)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_swaptup-idx1-idx2-init-0","title":"<code>tuple_swap(tup, idx1, idx2, init = 0)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_permtup-perm","title":"<code>tuple_perm(tup, perm)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_perm_invperm","title":"<code>tuple_perm_inv(perm)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_applyfn-tup1-tup2","title":"<code>tuple_apply(fn, tup1, tup2)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_insert_tupletup-idx-ins-init-0","title":"<code>tuple_insert_tuple(tup, idx, ins, init = 0)</code>","text":""},{"location":"libraries/api/numpy/util/#countshape","title":"<code>count(shape)</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_rangen-literalint","title":"<code>tuple_range(n: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/util/#tuple_equalt1-t2","title":"<code>tuple_equal(t1, t2)</code>","text":""},{"location":"libraries/api/numpy/util/#broadcastshape1-shape2","title":"<code>broadcast(shape1, shape2)</code>","text":""},{"location":"libraries/api/numpy/util/#normalize_indexidx-int-axis-int-n-int","title":"<code>normalize_index(idx: int, axis: int, n: int)</code>","text":""},{"location":"libraries/api/numpy/util/#normalize_axis_indexaxis-int-ndim-int-prefix-str","title":"<code>normalize_axis_index(axis: int, ndim: int, prefix: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/util/#has_duplicatet","title":"<code>has_duplicate(t)</code>","text":""},{"location":"libraries/api/numpy/util/#normalize_axis_tupleaxis-ndim-int-argname-str-allow_duplicates-bool-false","title":"<code>normalize_axis_tuple(axis, ndim: int, argname: str = \"\", allow_duplicates: bool = False)</code>","text":""},{"location":"libraries/api/numpy/util/#reconstruct_indext1-t2-mask","title":"<code>reconstruct_index(t1, t2, mask)</code>","text":""},{"location":"libraries/api/numpy/util/#index_to_coordsindex-int-limits","title":"<code>index_to_coords(index: int, limits)</code>","text":""},{"location":"libraries/api/numpy/util/#index_to_fcoordsindex-int-limits","title":"<code>index_to_fcoords(index: int, limits)</code>","text":""},{"location":"libraries/api/numpy/util/#coords_to_indexcoords-s-limits-s-s-type","title":"<code>coords_to_index(coords: S, limits: S, S: type)</code>","text":""},{"location":"libraries/api/numpy/util/#coords_to_findexcoords-s-limits-s-s-type","title":"<code>coords_to_findex(coords: S, limits: S, S: type)</code>","text":""},{"location":"libraries/api/numpy/util/#sortp-ptrt-n-int-key-t-type","title":"<code>sort(p: Ptr[T], n: int, key, T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#sort_by_strideshape-strides","title":"<code>sort_by_stride(shape, strides)</code>","text":""},{"location":"libraries/api/numpy/util/#medianarr-n-int","title":"<code>median(arr, n: int)</code>","text":""},{"location":"libraries/api/numpy/util/#multirangelimits","title":"<code>multirange(limits)</code>","text":""},{"location":"libraries/api/numpy/util/#fmultirangelimits","title":"<code>fmultirange(limits)</code>","text":""},{"location":"libraries/api/numpy/util/#noopx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>noop(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret {=D} %x\n</code></pre>"},{"location":"libraries/api/numpy/util/#zerot-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>zero(T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret {=T} zeroinitializer\n</code></pre>"},{"location":"libraries/api/numpy/util/#inf64-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>inf64()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret double 0x7FF0000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#inf32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>inf32()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret float 0x7FF0000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#inf16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>inf16()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret half 0x7FF0000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#inft-type","title":"<code>inf(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#nan64-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nan64()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret double 0x7FF8000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#nan32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nan32()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret float 0x7FF8000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#nan16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>nan16()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret half 0x7FF8000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#nant-type","title":"<code>nan(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#minnum64-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>minnum64()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret double 0x10000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#minnum32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>minnum32()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret float 0x3810000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#minnum16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>minnum16()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret half 0xHFBFF\n</code></pre>"},{"location":"libraries/api/numpy/util/#minnumt-type","title":"<code>minnum(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#maxnum64-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>maxnum64()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret double 0x7FEFFFFFFFFFFFFF\n</code></pre>"},{"location":"libraries/api/numpy/util/#maxnum32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>maxnum32()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret float 0x47EFFFFFE0000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#maxnum16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>maxnum16()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret half 0xH7BFF\n</code></pre>"},{"location":"libraries/api/numpy/util/#maxnumt-type","title":"<code>maxnum(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#eps64-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>eps64()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret double 0x3CB0000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#eps32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>eps32()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret float 0x3E80000000000000\n</code></pre>"},{"location":"libraries/api/numpy/util/#eps16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>eps16()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>ret half 0xH1400\n</code></pre>"},{"location":"libraries/api/numpy/util/#epst-type","title":"<code>eps(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#mantdig64","title":"<code>mantdig64()</code>","text":""},{"location":"libraries/api/numpy/util/#mantdig32","title":"<code>mantdig32()</code>","text":""},{"location":"libraries/api/numpy/util/#mantdig16","title":"<code>mantdig16()</code>","text":""},{"location":"libraries/api/numpy/util/#mantdigt-type","title":"<code>mantdig(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#maxexp64","title":"<code>maxexp64()</code>","text":""},{"location":"libraries/api/numpy/util/#maxexp32","title":"<code>maxexp32()</code>","text":""},{"location":"libraries/api/numpy/util/#maxexp16","title":"<code>maxexp16()</code>","text":""},{"location":"libraries/api/numpy/util/#maxexpt-type","title":"<code>maxexp(T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#bitcastx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>bitcast(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = bitcast {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#uitofpx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>uitofp(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = uitofp {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sitofpx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sitofp(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = sitofp {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fptouix-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fptoui(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fptoui {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fptosix-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fptosi(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fptosi {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#zextx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>zext(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = zext {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sextx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sext(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = sext {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#itruncx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>itrunc(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = trunc {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fpextx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fpext(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fpext {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fptruncx-t-d-type-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fptrunc(x: T, D: type, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fptrunc {=T} %x to {=D}\nret {=D} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmin64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmin64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.minimum.f64(double, double)\n%z = call double @llvm.minimum.f64(double %x, double %y)\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmin32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmin32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.minimum.f32(float, float)\n%z = call float @llvm.minimum.f32(float %x, float %y)\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmin16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmin16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.minimum.f16(half, half)\n%z = call half @llvm.minimum.f16(half %x, half %y)\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fminx-y","title":"<code>fmin(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#fmax64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmax64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.maximum.f64(double, double)\n%z = call double @llvm.maximum.f64(double %x, double %y)\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmax32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmax32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.maximum.f32(float, float)\n%z = call float @llvm.maximum.f32(float %x, float %y)\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmax16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmax16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.maximum.f16(half, half)\n%z = call half @llvm.maximum.f16(half %x, half %y)\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmaxx-y","title":"<code>fmax(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#fminnum64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fminnum64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.minimumnum.f64(double, double)\n%z = call double @llvm.minimumnum.f64(double %x, double %y)\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fminnum32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fminnum32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.minimumnum.f32(float, float)\n%z = call float @llvm.minimumnum.f32(float %x, float %y)\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fminnum16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fminnum16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.minimumnum.f16(half, half)\n%z = call half @llvm.minimumnum.f16(half %x, half %y)\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fminnumx-y","title":"<code>fminnum(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#fmaxnum64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmaxnum64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.maximumnum.f64(double, double)\n%z = call double @llvm.maximumnum.f64(double %x, double %y)\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmaxnum32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmaxnum32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.maximumnum.f32(float, float)\n%z = call float @llvm.maximumnum.f32(float %x, float %y)\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmaxnum16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fmaxnum16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.maximumnum.f16(half, half)\n%z = call half @llvm.maximumnum.f16(half %x, half %y)\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#fmaxnumx-y","title":"<code>fmaxnum(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#bswapx-t-t-type-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>bswap(x: T, T: type)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare {=T} @llvm.bswap.{=T}({=T})\n%y = call {=T} @llvm.bswap.{=T}({=T} %x)\nret {=T} %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#isinf64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>isinf64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.fabs.f64(double)\n%a = call double @llvm.fabs.f64(double %x)\n%y = fcmp oeq double %a, 0x7FF0000000000000\n%z = zext i1 %y to i8\nret i8 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#isinf32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>isinf32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.fabs.f32(float)\n%a = call float @llvm.fabs.f32(float %x)\n%y = fcmp oeq float %a, 0x7FF0000000000000\n%z = zext i1 %y to i8\nret i8 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#isinf16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>isinf16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.fabs.f16(half)\n%a = call half @llvm.fabs.f16(half %x)\n%y = fcmp oeq half %a, 0x7FF0000000000000\n%z = zext i1 %y to i8\nret i8 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#isinfx","title":"<code>isinf(x)</code>","text":""},{"location":"libraries/api/numpy/util/#isnan64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>isnan64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fcmp uno double %x, 0.000000e+00\n%z = zext i1 %y to i8\nret i8 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#isnan32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>isnan32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fcmp uno float %x, 0.000000e+00\n%z = zext i1 %y to i8\nret i8 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#isnan16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>isnan16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%y = fcmp uno half %x, 0.000000e+00\n%z = zext i1 %y to i8\nret i8 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#isnanx","title":"<code>isnan(x)</code>","text":""},{"location":"libraries/api/numpy/util/#signbit64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>signbit64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%n = bitcast double %x to i64\n%s = icmp slt i64 %n, 0\n%b = zext i1 %s to i8\nret i8 %b\n</code></pre>"},{"location":"libraries/api/numpy/util/#signbit32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>signbit32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%n = bitcast float %x to i32\n%s = icmp slt i32 %n, 0\n%b = zext i1 %s to i8\nret i8 %b\n</code></pre>"},{"location":"libraries/api/numpy/util/#signbit16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>signbit16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%n = bitcast half %x to i16\n%s = icmp slt i16 %n, 0\n%b = zext i1 %s to i8\nret i8 %b\n</code></pre>"},{"location":"libraries/api/numpy/util/#signbitx","title":"<code>signbit(x)</code>","text":""},{"location":"libraries/api/numpy/util/#fabs64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fabs64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.fabs.f64(double)\n%y = call double @llvm.fabs.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fabs32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fabs32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.fabs.f32(float)\n%y = call float @llvm.fabs.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fabs16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fabs16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.fabs.f16(half)\n%y = call half @llvm.fabs.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#fabsx","title":"<code>fabs(x)</code>","text":""},{"location":"libraries/api/numpy/util/#isfinite64x-float","title":"<code>isfinite64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#isfinite32x-float32","title":"<code>isfinite32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#isfinite16x-float16","title":"<code>isfinite16(x: float16)</code>","text":""},{"location":"libraries/api/numpy/util/#isfinitex","title":"<code>isfinite(x)</code>","text":""},{"location":"libraries/api/numpy/util/#rint64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.rint.f64(double)\n%y = call double @llvm.rint.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#rint32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.rint.f32(float)\n%y = call float @llvm.rint.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#rint16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>rint16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.rint.f16(half)\n%y = call half @llvm.rint.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#rintx","title":"<code>rint(x)</code>","text":""},{"location":"libraries/api/numpy/util/#floor64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>floor64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.floor.f64(double)\n%y = call double @llvm.floor.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#floor32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>floor32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.floor.f32(float)\n%y = call float @llvm.floor.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#floor16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>floor16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.floor.f16(half)\n%y = call half @llvm.floor.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#floorx","title":"<code>floor(x)</code>","text":""},{"location":"libraries/api/numpy/util/#ceil64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ceil64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.ceil.f64(double)\n%y = call double @llvm.ceil.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#ceil32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ceil32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.ceil.f32(float)\n%y = call float @llvm.ceil.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#ceil16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ceil16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.ceil.f16(half)\n%y = call half @llvm.ceil.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#ceilx","title":"<code>ceil(x)</code>","text":""},{"location":"libraries/api/numpy/util/#trunc64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>trunc64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.trunc.f64(double)\n%y = call double @llvm.trunc.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#trunc32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>trunc32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.trunc.f32(float)\n%y = call float @llvm.trunc.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#trunc16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>trunc16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.trunc.f16(half)\n%y = call half @llvm.trunc.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#truncx","title":"<code>trunc(x)</code>","text":""},{"location":"libraries/api/numpy/util/#exp64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.exp.f64(double)\n%y = call double @llvm.exp.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#exp32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.exp.f32(float)\n%y = call float @llvm.exp.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#exp16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.exp.f16(half)\n%y = call half @llvm.exp.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#expx","title":"<code>exp(x)</code>","text":""},{"location":"libraries/api/numpy/util/#exp2_64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2_64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.exp2.f64(double)\n%y = call double @llvm.exp2.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#exp2_32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2_32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.exp2.f32(float)\n%y = call float @llvm.exp2.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#exp2_16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>exp2_16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.exp2.f16(half)\n%y = call half @llvm.exp2.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#exp2x","title":"<code>exp2(x)</code>","text":""},{"location":"libraries/api/numpy/util/#expm1_64x-float","title":"<code>expm1_64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#expm1_32x-float32","title":"<code>expm1_32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#expm1x","title":"<code>expm1(x)</code>","text":""},{"location":"libraries/api/numpy/util/#log64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.log.f64(double)\n%y = call double @llvm.log.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.log.f32(float)\n%y = call float @llvm.log.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.log.f16(half)\n%y = call half @llvm.log.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#logx","title":"<code>log(x)</code>","text":""},{"location":"libraries/api/numpy/util/#log2_64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2_64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.log2.f64(double)\n%y = call double @llvm.log2.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log2_32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2_32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.log2.f32(float)\n%y = call float @llvm.log2.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log2_16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log2_16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.log2.f16(half)\n%y = call half @llvm.log2.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log2x","title":"<code>log2(x)</code>","text":""},{"location":"libraries/api/numpy/util/#log10_64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10_64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.log10.f64(double)\n%y = call double @llvm.log10.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log10_32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10_32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.log10.f32(float)\n%y = call float @llvm.log10.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log10_16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>log10_16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.log10.f16(half)\n%y = call half @llvm.log10.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#log10x","title":"<code>log10(x)</code>","text":""},{"location":"libraries/api/numpy/util/#log1p64x-float","title":"<code>log1p64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#log1p32x-float32","title":"<code>log1p32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#log1px","title":"<code>log1p(x)</code>","text":""},{"location":"libraries/api/numpy/util/#sqrt64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.sqrt.f64(double)\n%y = call double @llvm.sqrt.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sqrt32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.sqrt.f32(float)\n%y = call float @llvm.sqrt.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sqrt16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sqrt16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.sqrt.f16(half)\n%y = call half @llvm.sqrt.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sqrtx","title":"<code>sqrt(x)</code>","text":""},{"location":"libraries/api/numpy/util/#cbrt64x-float","title":"<code>cbrt64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#cbrt32x-float32","title":"<code>cbrt32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#cbrtx","title":"<code>cbrt(x)</code>","text":""},{"location":"libraries/api/numpy/util/#sin64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.sin.f64(double)\n%y = call double @llvm.sin.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sin32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.sin.f32(float)\n%y = call float @llvm.sin.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sin16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>sin16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.sin.f16(half)\n%y = call half @llvm.sin.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#sinx","title":"<code>sin(x)</code>","text":""},{"location":"libraries/api/numpy/util/#cos64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.cos.f64(double)\n%y = call double @llvm.cos.f64(double %x)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#cos32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.cos.f32(float)\n%y = call float @llvm.cos.f32(float %x)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#cos16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cos16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.cos.f16(half)\n%y = call half @llvm.cos.f16(half %x)\nret half %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#cosx","title":"<code>cos(x)</code>","text":""},{"location":"libraries/api/numpy/util/#tan64x-float","title":"<code>tan64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#tan32x-float32","title":"<code>tan32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#tanx","title":"<code>tan(x)</code>","text":""},{"location":"libraries/api/numpy/util/#asin64x-float","title":"<code>asin64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#asin32x-float32","title":"<code>asin32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#asinx","title":"<code>asin(x)</code>","text":""},{"location":"libraries/api/numpy/util/#acos64x-float","title":"<code>acos64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#acos32x-float32","title":"<code>acos32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#acosx","title":"<code>acos(x)</code>","text":""},{"location":"libraries/api/numpy/util/#atan64x-float","title":"<code>atan64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#atan32x-float32","title":"<code>atan32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#atanx","title":"<code>atan(x)</code>","text":""},{"location":"libraries/api/numpy/util/#sinh64x-float","title":"<code>sinh64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#sinh32x-float32","title":"<code>sinh32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#sinhx","title":"<code>sinh(x)</code>","text":""},{"location":"libraries/api/numpy/util/#cosh64x-float","title":"<code>cosh64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#cosh32x-float32","title":"<code>cosh32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#coshx","title":"<code>cosh(x)</code>","text":""},{"location":"libraries/api/numpy/util/#tanh64x-float","title":"<code>tanh64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#tanh32x-float32","title":"<code>tanh32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#tanhx","title":"<code>tanh(x)</code>","text":""},{"location":"libraries/api/numpy/util/#asinh64x-float","title":"<code>asinh64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#asinh32x-float32","title":"<code>asinh32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#asinhx","title":"<code>asinh(x)</code>","text":""},{"location":"libraries/api/numpy/util/#acosh64x-float","title":"<code>acosh64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#acosh32x-float32","title":"<code>acosh32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#acoshx","title":"<code>acosh(x)</code>","text":""},{"location":"libraries/api/numpy/util/#atanh64x-float","title":"<code>atanh64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#atanh32x-float32","title":"<code>atanh32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#atanhx","title":"<code>atanh(x)</code>","text":""},{"location":"libraries/api/numpy/util/#atan2_64x-float-y-float","title":"<code>atan2_64(x: float, y: float)</code>","text":""},{"location":"libraries/api/numpy/util/#atan2_32x-float32-y-float32","title":"<code>atan2_32(x: float32, y: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#atan2x-y","title":"<code>atan2(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#copysign64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.copysign.f64(double, double)\n%z = call double @llvm.copysign.f64(double %x, double %y)\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#copysign32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.copysign.f32(float, float)\n%z = call float @llvm.copysign.f32(float %x, float %y)\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#copysign16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>copysign16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.copysign.f16(half, half)\n%z = call half @llvm.copysign.f16(half %x, half %y)\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#copysignx-y","title":"<code>copysign(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#pow64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>pow64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.pow.f64(double, double)\n%z = call double @llvm.pow.f64(double %x, double %y)\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#pow32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>pow32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.pow.f32(float, float)\n%z = call float @llvm.pow.f32(float %x, float %y)\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#pow16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>pow16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare half @llvm.pow.f16(half, half)\n%z = call half @llvm.pow.f16(half %x, half %y)\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#powx-y","title":"<code>pow(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#frexp64x-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>frexp64(x: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare { double, i32 } @llvm.frexp.f64(double)\n%y = call { double, i32 } @llvm.frexp.f64(double %x)\n%y0 = extractvalue { double, i32 } %y, 0\n%y1 = extractvalue { double, i32 } %y, 1\n%z1 = sext i32 %y1 to i64\n%r0 = insertvalue { double, i64 } undef, double %y0, 0\n%r1 = insertvalue { double, i64 } %r0, i64 %z1, 1\nret { double, i64 } %r1\n</code></pre>"},{"location":"libraries/api/numpy/util/#frexp32x-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>frexp32(x: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare { float, i32 } @llvm.frexp.f32(float)\n%y = call { float, i32 } @llvm.frexp.f32(float %x)\n%y0 = extractvalue { float, i32 } %y, 0\n%y1 = extractvalue { float, i32 } %y, 1\n%z1 = sext i32 %y1 to i64\n%r0 = insertvalue { float, i64 } undef, float %y0, 0\n%r1 = insertvalue { float, i64 } %r0, i64 %z1, 1\nret { float, i64 } %r1\n</code></pre>"},{"location":"libraries/api/numpy/util/#frexp16x-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>frexp16(x: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare { half, i32 } @llvm.frexp.f16(half)\n%y = call { half, i32 } @llvm.frexp.f16(half %x)\n%y0 = extractvalue { half, i32 } %y, 0\n%y1 = extractvalue { half, i32 } %y, 1\n%z1 = sext i32 %y1 to i64\n%r0 = insertvalue { half, i64 } undef, half %y0, 0\n%r1 = insertvalue { half, i64 } %r0, i64 %z1, 1\nret { half, i64 } %r1\n</code></pre>"},{"location":"libraries/api/numpy/util/#frexpx","title":"<code>frexp(x)</code>","text":""},{"location":"libraries/api/numpy/util/#ldexp64x-float-exp-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ldexp64(x: float, exp: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare double @llvm.ldexp.f64(double, i32)\n%e = trunc i64 %exp to i32\n%y = call double @llvm.ldexp.f64(double %x, i32 %e)\nret double %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#ldexp32x-float32-exp-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ldexp32(x: float32, exp: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>declare float @llvm.ldexp.f32(float, i32)\n%e = trunc i64 %exp to i32\n%y = call float @llvm.ldexp.f32(float %x, i32 %e)\nret float %y\n</code></pre>"},{"location":"libraries/api/numpy/util/#ldexp16x-float16-exp-int","title":"<code>ldexp16(x: float16, exp: int)</code>","text":""},{"location":"libraries/api/numpy/util/#ldexpx-exp-int","title":"<code>ldexp(x, exp: int)</code>","text":""},{"location":"libraries/api/numpy/util/#loge2-0693147180559945309417232121458176568","title":"<code>LOGE2</code> = <code>0.693147180559945309417232121458176568</code>","text":""},{"location":"libraries/api/numpy/util/#loge10-2302585092994045684017991454684364208","title":"<code>LOGE10</code> = <code>2.302585092994045684017991454684364208</code>","text":""},{"location":"libraries/api/numpy/util/#log2e-1442695040888963407359924681001892137","title":"<code>LOG2E</code> = <code>1.442695040888963407359924681001892137</code>","text":""},{"location":"libraries/api/numpy/util/#log10e-0434294481903251827651128918916605082","title":"<code>LOG10E</code> = <code>0.434294481903251827651128918916605082</code>","text":""},{"location":"libraries/api/numpy/util/#sqrt2-1414213562373095048801688724209698079","title":"<code>SQRT2</code> = <code>1.414213562373095048801688724209698079</code>","text":""},{"location":"libraries/api/numpy/util/#pi-3141592653589793238462643383279502884","title":"<code>PI</code> = <code>3.141592653589793238462643383279502884</code>","text":""},{"location":"libraries/api/numpy/util/#pi_2-1570796326794896619231321691639751442","title":"<code>PI_2</code> = <code>1.570796326794896619231321691639751442</code>","text":""},{"location":"libraries/api/numpy/util/#e-2718281828459045235360287471352662498","title":"<code>E</code> = <code>2.718281828459045235360287471352662498</code>","text":""},{"location":"libraries/api/numpy/util/#logaddexp64x-float-y-float","title":"<code>logaddexp64(x: float, y: float)</code>","text":""},{"location":"libraries/api/numpy/util/#logaddexp32x-float32-y-float32","title":"<code>logaddexp32(x: float32, y: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#logaddexpx-y","title":"<code>logaddexp(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#logaddexp2_64x-float-y-float","title":"<code>logaddexp2_64(x: float, y: float)</code>","text":""},{"location":"libraries/api/numpy/util/#logaddexp2_32x-float32-y-float32","title":"<code>logaddexp2_32(x: float32, y: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#logaddexp2x-y","title":"<code>logaddexp2(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#hypot64x-float-y-float","title":"<code>hypot64(x: float, y: float)</code>","text":""},{"location":"libraries/api/numpy/util/#hypot32x-float32-y-float32","title":"<code>hypot32(x: float32, y: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#hypotx-y","title":"<code>hypot(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#modf64x-float","title":"<code>modf64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#modf32x-float32","title":"<code>modf32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#modf16x-float16","title":"<code>modf16(x: float16)</code>","text":""},{"location":"libraries/api/numpy/util/#modfx","title":"<code>modf(x)</code>","text":""},{"location":"libraries/api/numpy/util/#nextafter64x-float-y-float","title":"<code>nextafter64(x: float, y: float)</code>","text":""},{"location":"libraries/api/numpy/util/#nextafter32x-float32-y-float32","title":"<code>nextafter32(x: float32, y: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#nextafter16x-float16-y-float16","title":"<code>nextafter16(x: float16, y: float16)</code>","text":""},{"location":"libraries/api/numpy/util/#nextafterx-y","title":"<code>nextafter(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#cdiv_intx-intn-y-intn-n-literalint-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cdiv_int(x: Int[N], y: Int[N], N: Literal[int])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = sdiv i{=N} %x, %y\nret i{=N} %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cdiv_intx-int-y-int-overload-function-is-overloaded-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cdiv_int(x: int, y: int)</code>  @overload Function is overloaded   @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = sdiv i64 %x, %y\nret i64 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cmod_intx-intn-y-intn-n-literalint-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cmod_int(x: Int[N], y: Int[N], N: Literal[int])</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = srem i{=N} %x, %y\nret i{=N} %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cmod_intx-int-y-int-overload-function-is-overloaded-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cmod_int(x: int, y: int)</code>  @overload Function is overloaded   @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = srem i64 %x, %y\nret i64 %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#pydivx-intn-y-intn-n-literalint","title":"<code>pydiv(x: Int[N], y: Int[N], N: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/util/#pydivx-int-y-int-overload-function-is-overloaded","title":"<code>pydiv(x: int, y: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/util/#pymodx-intn-y-intn-n-literalint","title":"<code>pymod(x: Int[N], y: Int[N], N: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/util/#pymodx-int-y-int-overload-function-is-overloaded","title":"<code>pymod(x: int, y: int)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/util/#cdiv64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cdiv64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = fdiv double %x, %y\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cdiv32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cdiv32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = fdiv float %x, %y\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cdiv16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cdiv16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = fdiv half %x, %y\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cdivx-y","title":"<code>cdiv(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#cmod64x-float-y-float-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cmod64(x: float, y: float)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = frem double %x, %y\nret double %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cmod32x-float32-y-float32-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cmod32(x: float32, y: float32)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = frem float %x, %y\nret float %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cmod16x-float16-y-float16-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>cmod16(x: float16, y: float16)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>%z = frem half %x, %y\nret half %z\n</code></pre>"},{"location":"libraries/api/numpy/util/#cmodx-y","title":"<code>cmod(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#pyfmodx-y","title":"<code>pyfmod(x, y)</code>","text":""},{"location":"libraries/api/numpy/util/#i0_64x-float","title":"<code>i0_64(x: float)</code>","text":""},{"location":"libraries/api/numpy/util/#i0_32x-float32","title":"<code>i0_32(x: float32)</code>","text":""},{"location":"libraries/api/numpy/util/#i0x","title":"<code>i0(x)</code>","text":""},{"location":"libraries/api/numpy/util/#call_vectorized_loopin1-ptrt-is1-int-in2-ptrt-is2-int-out-ptrt-os-int-n-int-func-literalstr-t-type","title":"<code>call_vectorized_loop(in1: Ptr[T], is1: int, in2: Ptr[T], is2: int, out: Ptr[T], os: int, n: int, func: Literal[str], T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#sizeofx-type","title":"<code>sizeof(X: type)</code>","text":""},{"location":"libraries/api/numpy/util/#atomicx-type","title":"<code>atomic(X: type)</code>","text":""},{"location":"libraries/api/numpy/util/#freep-ptrt-t-type","title":"<code>free(p: Ptr[T], T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#reallocp-ptrt-newsize-int-oldsize-int-t-type","title":"<code>realloc(p: Ptr[T], newsize: int, oldsize: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#stridesshape-forder-bool-x-type","title":"<code>strides(shape, forder: bool, X: type)</code>","text":""},{"location":"libraries/api/numpy/util/#castx-t-type","title":"<code>cast(x, T: type)</code>","text":""},{"location":"libraries/api/numpy/util/#coercet1-type-t2-type","title":"<code>coerce(T1: type, T2: type)</code>","text":""},{"location":"libraries/api/numpy/util/#op_typest1-type-t2-type","title":"<code>op_types(T1: type, T2: type)</code>","text":""},{"location":"libraries/api/numpy/util/#to_floatx","title":"<code>to_float(x)</code>","text":""},{"location":"libraries/api/numpy/util/#str_to_dtypes-literalstr","title":"<code>str_to_dtype(s: Literal[str])</code>","text":""},{"location":"libraries/api/numpy/util/#dtype_to_strdtype-type-include_byteorder-bool-true","title":"<code>dtype_to_str(dtype: type, include_byteorder: bool = True)</code>","text":""},{"location":"libraries/api/numpy/window/","title":"module <code>numpy.window</code>","text":"<p>Source: <code>stdlib/numpy/window.codon</code></p>"},{"location":"libraries/api/numpy/window/#bartlettm-int","title":"<code>bartlett(M: int)</code>","text":""},{"location":"libraries/api/numpy/window/#blackmanm-int","title":"<code>blackman(M: int)</code>","text":""},{"location":"libraries/api/numpy/window/#hammingm-int","title":"<code>hamming(M: int)</code>","text":""},{"location":"libraries/api/numpy/window/#hanningm-int","title":"<code>hanning(M: int)</code>","text":""},{"location":"libraries/api/numpy/window/#kaiserm-int-beta-float","title":"<code>kaiser(M: int, beta: float)</code>","text":""},{"location":"libraries/api/numpy/zmath/","title":"module <code>numpy.zmath</code>","text":"<p>Source: <code>stdlib/numpy/zmath.codon</code></p>"},{"location":"libraries/api/numpy/zmath/#scaled_cexp_lowerf-88722839","title":"<code>SCALED_CEXP_LOWERF</code> = <code>88.722839</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexp_upperf-19269492","title":"<code>SCALED_CEXP_UPPERF</code> = <code>192.69492</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexp_lower-71047586007394386","title":"<code>SCALED_CEXP_LOWER</code> = <code>710.47586007394386</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexp_upper-14549159319953251","title":"<code>SCALED_CEXP_UPPER</code> = <code>1454.9159319953251</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexp_lowerz","title":"<code>scaled_cexp_lower(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexp_upperz","title":"<code>scaled_cexp_upper(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexp_kz","title":"<code>scaled_cexp_k(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#scaled_cexpx-y-expt-int-c-type","title":"<code>scaled_cexp(x, y, expt: int, C: type)</code>","text":""},{"location":"libraries/api/numpy/zmath/#cosh_bigz","title":"<code>cosh_big(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#cosh_hugez","title":"<code>cosh_huge(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#tanh_hugez","title":"<code>tanh_huge(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#argz","title":"<code>arg(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#expz","title":"<code>exp(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#logz","title":"<code>log(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#sqrtz","title":"<code>sqrt(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#coshz","title":"<code>cosh(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#sinhz","title":"<code>sinh(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#tanhz","title":"<code>tanh(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#acosz","title":"<code>acos(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#acoshz","title":"<code>acosh(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#asinhz","title":"<code>asinh(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#atanhz","title":"<code>atanh(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#asinz","title":"<code>asin(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#atanz","title":"<code>atan(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#cosz","title":"<code>cos(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#sinz","title":"<code>sin(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#tanz","title":"<code>tan(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#log2z","title":"<code>log2(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#log10z","title":"<code>log10(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#exp2z","title":"<code>exp2(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#expm1z","title":"<code>expm1(z)</code>","text":""},{"location":"libraries/api/numpy/zmath/#log1pz","title":"<code>log1p(z)</code>","text":""},{"location":"libraries/api/numpy/fft/","title":"<code>numpy.fft</code>","text":"<ul> <li><code>pocketfft</code></li> </ul> <p>Source: <code>stdlib/numpy/fft/__init__.codon</code></p>"},{"location":"libraries/api/numpy/fft/#ffta-n-optionalint-none-axis-int-1-norm-optionalstr-none-out-none","title":"<code>fft(a, n: Optional[int] = None, axis: int = -1, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#iffta-n-optionalint-none-axis-int-1-norm-optionalstr-none-out-none","title":"<code>ifft(a, n: Optional[int] = None, axis: int = -1, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#rffta-n-optionalint-none-axis-int-1-norm-optionalstr-none-out-none","title":"<code>rfft(a, n: Optional[int] = None, axis: int = -1, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#irffta-n-optionalint-none-axis-int-1-norm-optionalstr-none-out-none","title":"<code>irfft(a, n: Optional[int] = None, axis: int = -1, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#hffta-n-optionalint-none-axis-int-1-norm-optionalstr-none-out-none","title":"<code>hfft(a, n: Optional[int] = None, axis: int = -1, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#ihffta-n-optionalint-none-axis-int-1-norm-optionalstr-none-out-none","title":"<code>ihfft(a, n: Optional[int] = None, axis: int = -1, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#fftna-s-none-axes-none-norm-optionalstr-none-out-none","title":"<code>fftn(a, s = None, axes = None, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#ifftna-s-none-axes-none-norm-optionalstr-none-out-none","title":"<code>ifftn(a, s = None, axes = None, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#fft2a-s-none-axes-2-1-norm-optionalstr-none-out-none","title":"<code>fft2(a, s = None, axes = (-2, -1), norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#ifft2a-s-none-axes-2-1-norm-optionalstr-none-out-none","title":"<code>ifft2(a, s = None, axes = (-2, -1), norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#rfftna-s-none-axes-none-norm-optionalstr-none-out-none","title":"<code>rfftn(a, s = None, axes = None, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#rfft2a-s-none-axes-2-1-norm-optionalstr-none-out-none","title":"<code>rfft2(a, s = None, axes = (-2, -1), norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#irfftna-s-none-axes-none-norm-optionalstr-none-out-none","title":"<code>irfftn(a, s = None, axes = None, norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#irfft2a-s-none-axes-2-1-norm-optionalstr-none-out-none","title":"<code>irfft2(a, s = None, axes = (-2, -1), norm: Optional[str] = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#fftshiftx-axes-none","title":"<code>fftshift(x, axes = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#ifftshiftx-axes-none","title":"<code>ifftshift(x, axes = None)</code>","text":""},{"location":"libraries/api/numpy/fft/#fftfreqn-int-d-float-10","title":"<code>fftfreq(n: int, d: float = 1.0)</code>","text":""},{"location":"libraries/api/numpy/fft/#rfftfreqn-int-d-float-10","title":"<code>rfftfreq(n: int, d: float = 1.0)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/","title":"module <code>numpy.fft.pocketfft</code>","text":"<p>Source: <code>stdlib/numpy/fft/pocketfft.codon</code></p>"},{"location":"libraries/api/numpy/fft/pocketfft/#rot90a","title":"<code>ROT90(a)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#rotx90a-fwd-bool","title":"<code>ROTX90(a, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#rotx45a-fwd-bool","title":"<code>ROTX45(a, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#rotx135a-fwd-bool","title":"<code>ROTX135(a, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#arrt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>arr[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#p-ptrt","title":"<code>p</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#sz-int","title":"<code>sz</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__new__sz-int","title":"<code>__new__(sz: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__getitem__self-idx-int","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__setitem__self-idx-int-val-t","title":"<code>__setitem__(self, idx: int, val: T)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#deallocself","title":"<code>dealloc(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#sizeself","title":"<code>size(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#dataself","title":"<code>data(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#sincos_2pibynt-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>sincos_2pibyn[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#n-int","title":"<code>N</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#mask-int","title":"<code>mask</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#shift-int","title":"<code>shift</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#v1-arrcomplex","title":"<code>v1</code>: <code>arr[complex]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#v2-arrcomplex","title":"<code>v2</code>: <code>arr[complex]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__new__n-int","title":"<code>__new__(n: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__getitem__self-idx-int_1","title":"<code>__getitem__(self, idx: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#calcx-int-n-int-ang-float","title":"<code>calc(x: int, n: int, ang: float)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#cmplxself-re-im","title":"<code>cmplx(self, re, im)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#deallocself_1","title":"<code>dealloc(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pma-b","title":"<code>PM(a, b)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#mpa-b","title":"<code>MP(a, b)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fctdatat-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>fctdata[T]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fct-int","title":"<code>fct</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#tw-ptrt","title":"<code>tw</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#tws-ptrt","title":"<code>tws</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_2","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_2","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#with_fctself-fct-int","title":"<code>with_fct(self, fct: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#with_twself-tw-ptrt","title":"<code>with_tw(self, tw: Ptr[T])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#with_twsself-tws-ptrt","title":"<code>with_tws(self, tws: Ptr[T])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#cfftptt0","title":"<code>cfftp[T,T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_3","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#length-int","title":"<code>length</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#mem-arrt","title":"<code>mem</code>: <code>arr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fact-listfctdatat","title":"<code>fact</code>: <code>List[fctdata[T]]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_3","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t0-type","title":"<code>T0</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__init__self-length-int","title":"<code>__init__(self, length: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_3","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#add_factorself-factor-int","title":"<code>add_factor(self, factor: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass2ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass2(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass3ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass3(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass4ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass4(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass5ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass5(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass7ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass7(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass8ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass8(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass11ido-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-fwd-bool","title":"<code>pass11(ido: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#passgido-int-ip-int-l1-int-cc-ptrt-ch-ptrt-wa-ptrt-csarr-ptrt-fwd-bool","title":"<code>passg(ido: int, ip: int, l1: int, cc: Ptr[T], ch: Ptr[T], wa: Ptr[T], csarr: Ptr[T], fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pass_allself-c-ptrt-fct-t0-fwd-bool","title":"<code>pass_all(self, c: Ptr[T], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#execself-c-ptrt-fct-t0-fwd-bool","title":"<code>exec(self, c: Ptr[T], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#factorizeself","title":"<code>factorize(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#twsizeself","title":"<code>twsize(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#comp_twiddleself","title":"<code>comp_twiddle(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#deallocself_2","title":"<code>dealloc(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#mulpmc-d-e-f","title":"<code>MULPM(c, d, e, f)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#rearrangerx-ix-ry-iy","title":"<code>REARRANGE(rx, ix, ry, iy)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#rfftptt0","title":"<code>rfftp[T,T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_4","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#length-int_1","title":"<code>length</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#mem-arrt0","title":"<code>mem</code>: <code>arr[T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fact-listfctdatat0","title":"<code>fact</code>: <code>List[fctdata[T0]]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_4","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t0-type_1","title":"<code>T0</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__init__self-length-int_1","title":"<code>__init__(self, length: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_4","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#add_factorself-factor-int_1","title":"<code>add_factor(self, factor: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radf2ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radf2(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radf3ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radf3(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radf4ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radf4(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radf5ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radf5(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radfgido-int-ip-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0-csarr-ptrt0","title":"<code>radfg(ido: int, ip: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0], csarr: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radb2ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radb2(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radb3ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radb3(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radb4ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radb4(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radb5ido-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0","title":"<code>radb5(ido: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#radbgido-int-ip-int-l1-int-cc-ptrt0-ch-ptrt0-wa-ptrt0-csarr-ptrt0","title":"<code>radbg(ido: int, ip: int, l1: int, cc: Ptr[T0], ch: Ptr[T0], wa: Ptr[T0], csarr: Ptr[T0])</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#copy_and_normself-c-ptrt0-p1-ptrt0-fct-t0","title":"<code>copy_and_norm(self, c: Ptr[T0], p1: Ptr[T0], fct: T0)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#execself-c-ptrt0-fct-t0-r2hc-bool","title":"<code>exec(self, c: Ptr[T0], fct: T0, r2hc: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#factorizeself_1","title":"<code>factorize(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#twsizeself_1","title":"<code>twsize(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#comp_twiddleself_1","title":"<code>comp_twiddle(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#deallocself_3","title":"<code>dealloc(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fftbluett0","title":"<code>fftblue[T,T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_5","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#n-int_1","title":"<code>n</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#n2-int","title":"<code>n2</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#plan-cfftpt-t0","title":"<code>plan</code>: <code>cfftp[T, T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#mem-arrt_1","title":"<code>mem</code>: <code>arr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#bk-ptrt","title":"<code>bk</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#bkf-ptrt","title":"<code>bkf</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_5","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t0-type_2","title":"<code>T0</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__init__self-length-int_2","title":"<code>__init__(self, length: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_5","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fftself-c-ptrt-fct-t0-fwd-bool","title":"<code>fft(self, c: Ptr[T], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#execself-c-ptrt-fct-t0-fwd-bool_1","title":"<code>exec(self, c: Ptr[T], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#exec_rself-c-ptrt0-fct-t0-fwd-bool","title":"<code>exec_r(self, c: Ptr[T0], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#deallocself_4","title":"<code>dealloc(self)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pocketfft_ctt0","title":"<code>pocketfft_c[T,T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_6","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#packplan-optionalcfftpt-t0","title":"<code>packplan</code>: <code>Optional[cfftp[T, T0]]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#blueplan-optionalfftbluet-t0","title":"<code>blueplan</code>: <code>Optional[fftblue[T, T0]]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#length-int_2","title":"<code>length</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_6","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t0-type_3","title":"<code>T0</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__init__self-length-int_3","title":"<code>__init__(self, length: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_6","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#execself-c-ptrt-fct-t0-fwd-bool_2","title":"<code>exec(self, c: Ptr[T], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#pocketfft_rtt0","title":"<code>pocketfft_r[T,T0]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fields_7","title":"Fields","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#packplan-optionalrfftpt-t0","title":"<code>packplan</code>: <code>Optional[rfftp[T, T0]]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#blueplan-optionalfftbluet-t0_1","title":"<code>blueplan</code>: <code>Optional[fftblue[T, T0]]</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#length-int_3","title":"<code>length</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t-type_7","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#t0-type_4","title":"<code>T0</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#__init__self-length-int_4","title":"<code>__init__(self, length: int)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#methods_7","title":"Methods","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#execself-c-ptrt0-fct-t0-fwd-bool","title":"<code>exec(self, c: Ptr[T0], fct: T0, fwd: bool)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#fftv-ptrt-n-int-norm-optionalstr-t-type","title":"<code>fft(v: Ptr[T], n: int, norm: Optional[str], T: type)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#ifftv-ptrt-n-int-norm-optionalstr-t-type","title":"<code>ifft(v: Ptr[T], n: int, norm: Optional[str], T: type)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#rfftv-ptrt0-n-int-is_forward-bool-norm-optionalstr-o-ptrt-t-type-t0-type","title":"<code>rfft(v: Ptr[T0], n: int, is_forward: bool, norm: Optional[str], o: Ptr[T], T: type, T0: type)</code>","text":""},{"location":"libraries/api/numpy/fft/pocketfft/#irfftv-ptrt-n-int-norm-optionalstr-o-ptrt0-t-type-t0-type","title":"<code>irfft(v: Ptr[T], n: int, norm: Optional[str], o: Ptr[T0], T: type, T0: type)</code>","text":""},{"location":"libraries/api/numpy/lib/","title":"<code>numpy.lib</code>","text":"<ul> <li><code>arraysetops</code></li> <li><code>stride_tricks</code></li> </ul> <p>Source: <code>stdlib/numpy/lib/__init__.codon</code></p>"},{"location":"libraries/api/numpy/lib/arraysetops/","title":"module <code>numpy.lib.arraysetops</code>","text":"<p>Source: <code>stdlib/numpy/lib/arraysetops.codon</code></p>"},{"location":"libraries/api/numpy/lib/arraysetops/#uniquear-return_index-literalbool-false-return_inverse-literalbool-false-return_counts-literalbool-false-axis-none-equal_nan-bool-true","title":"<code>unique(ar, return_index: Literal[bool] = False, return_inverse: Literal[bool] = False, return_counts: Literal[bool] = False, axis = None, equal_nan: bool = True)</code>","text":""},{"location":"libraries/api/numpy/lib/arraysetops/#union1dar1-ar2","title":"<code>union1d(ar1, ar2)</code>","text":""},{"location":"libraries/api/numpy/lib/arraysetops/#setxor1dar1-ar2-assume_unique-bool-false","title":"<code>setxor1d(ar1, ar2, assume_unique: bool = False)</code>","text":""},{"location":"libraries/api/numpy/lib/arraysetops/#setdiff1dar1-ar2-assume_unique-bool-false","title":"<code>setdiff1d(ar1, ar2, assume_unique: bool = False)</code>","text":""},{"location":"libraries/api/numpy/lib/arraysetops/#intersect1dar1-ar2-assume_unique-bool-false-return_indices-literalbool-false","title":"<code>intersect1d(ar1, ar2, assume_unique: bool = False, return_indices: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/lib/arraysetops/#isinelement-test_elements-assume_unique-bool-false-invert-bool-false-kind-optionalstr-none","title":"<code>isin(element, test_elements, assume_unique: bool = False, invert: bool = False, kind: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/lib/arraysetops/#in1dar1-ar2-assume_unique-bool-false-invert-bool-false-kind-optionalstr-none","title":"<code>in1d(ar1, ar2, assume_unique: bool = False, invert: bool = False, kind: Optional[str] = None)</code>","text":""},{"location":"libraries/api/numpy/lib/stride_tricks/","title":"module <code>numpy.lib.stride_tricks</code>","text":"<p>Source: <code>stdlib/numpy/lib/stride_tricks.codon</code></p>"},{"location":"libraries/api/numpy/lib/stride_tricks/#as_stridedx-shape-none-strides-none-writeable-bool-true","title":"<code>as_strided(x, shape = None, strides = None, writeable: bool = True)</code>","text":""},{"location":"libraries/api/numpy/lib/stride_tricks/#sliding_window_viewx-window_shape-axis-none-writeable-bool-false","title":"<code>sliding_window_view(x, window_shape, axis = None, writeable: bool = False)</code>","text":""},{"location":"libraries/api/numpy/linalg/","title":"<code>numpy.linalg</code>","text":"<ul> <li><code>blas</code></li> <li><code>linalg</code></li> </ul> <p>Source: <code>stdlib/numpy/linalg/__init__.codon</code></p>"},{"location":"libraries/api/numpy/linalg/blas/","title":"module <code>numpy.linalg.blas</code>","text":"<p>Source: <code>stdlib/numpy/linalg/blas.codon</code></p>"},{"location":"libraries/api/numpy/linalg/blas/#fint-i32","title":"<code>fint</code> = <code>i32</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#fintp-ptrfint","title":"<code>fintp</code> = <code>Ptr[fint]</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_row_major-literalint-101","title":"<code>CBLAS_ROW_MAJOR</code>: <code>Literal[int]</code> = <code>101</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_col_major-literalint-102","title":"<code>CBLAS_COL_MAJOR</code>: <code>Literal[int]</code> = <code>102</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_no_trans-literalint-111","title":"<code>CBLAS_NO_TRANS</code>: <code>Literal[int]</code> = <code>111</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_trans-literalint-112","title":"<code>CBLAS_TRANS</code>: <code>Literal[int]</code> = <code>112</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_conj_trans-literalint-113","title":"<code>CBLAS_CONJ_TRANS</code>: <code>Literal[int]</code> = <code>113</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_upper-literalint-121","title":"<code>CBLAS_UPPER</code>: <code>Literal[int]</code> = <code>121</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_lower-literalint-122","title":"<code>CBLAS_LOWER</code>: <code>Literal[int]</code> = <code>122</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_non_unit-literalint-131","title":"<code>CBLAS_NON_UNIT</code>: <code>Literal[int]</code> = <code>131</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_unit-literalint-132","title":"<code>CBLAS_UNIT</code>: <code>Literal[int]</code> = <code>132</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_left-literalint-141","title":"<code>CBLAS_LEFT</code>: <code>Literal[int]</code> = <code>141</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_right-literalint-142","title":"<code>CBLAS_RIGHT</code>: <code>Literal[int]</code> = <code>142</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#lapack_row_major-literalint-101","title":"<code>LAPACK_ROW_MAJOR</code>: <code>Literal[int]</code> = <code>101</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#lapack_col_major-literalint-102","title":"<code>LAPACK_COL_MAJOR</code>: <code>Literal[int]</code> = <code>102</code>","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_dcopy_-fint-_-ptrfloat-_-fint-_-ptrfloat-_-fint-c-function-is-external-c-function","title":"<code>cblas_dcopy(_: fint, _: Ptr[float], _: fint, _: Ptr[float], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_scopy_-fint-_-ptrfloat32-_-fint-_-ptrfloat32-_-fint-c-function-is-external-c-function","title":"<code>cblas_scopy(_: fint, _: Ptr[float32], _: fint, _: Ptr[float32], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_zcopy_-fint-_-ptrcomplex-_-fint-_-ptrcomplex-_-fint-c-function-is-external-c-function","title":"<code>cblas_zcopy(_: fint, _: Ptr[complex], _: fint, _: Ptr[complex], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_ccopy_-fint-_-ptrcomplex64-_-fint-_-ptrcomplex64-_-fint-c-function-is-external-c-function","title":"<code>cblas_ccopy(_: fint, _: Ptr[complex64], _: fint, _: Ptr[complex64], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_dgemm_-fint-_-fint-_-fint-_-fint-_-fint-_-fint-_-float-_-ptrfloat-_-fint-_-ptrfloat-_-fint-_-float-_-ptrfloat-_-fint-c-function-is-external-c-function","title":"<code>cblas_dgemm(_: fint, _: fint, _: fint, _: fint, _: fint, _: fint, _: float, _: Ptr[float], _: fint, _: Ptr[float], _: fint, _: float, _: Ptr[float], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_sgemm_-fint-_-fint-_-fint-_-fint-_-fint-_-fint-_-float32-_-ptrfloat32-_-fint-_-ptrfloat32-_-fint-_-float32-_-ptrfloat32-_-fint-c-function-is-external-c-function","title":"<code>cblas_sgemm(_: fint, _: fint, _: fint, _: fint, _: fint, _: fint, _: float32, _: Ptr[float32], _: fint, _: Ptr[float32], _: fint, _: float32, _: Ptr[float32], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_zgemm_-fint-_-fint-_-fint-_-fint-_-fint-_-fint-_-cobj-_-ptrcomplex-_-fint-_-ptrcomplex-_-fint-_-cobj-_-ptrcomplex-_-fint-c-function-is-external-c-function","title":"<code>cblas_zgemm(_: fint, _: fint, _: fint, _: fint, _: fint, _: fint, _: cobj, _: Ptr[complex], _: fint, _: Ptr[complex], _: fint, _: cobj, _: Ptr[complex], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_cgemm_-fint-_-fint-_-fint-_-fint-_-fint-_-fint-_-cobj-_-ptrcomplex64-_-fint-_-ptrcomplex64-_-fint-_-cobj-_-ptrcomplex64-_-fint-c-function-is-external-c-function","title":"<code>cblas_cgemm(_: fint, _: fint, _: fint, _: fint, _: fint, _: fint, _: cobj, _: Ptr[complex64], _: fint, _: Ptr[complex64], _: fint, _: cobj, _: Ptr[complex64], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_dsyrk_-fint-_-fint-_-fint-_-fint-_-fint-_-float-_-ptrfloat-_-fint-_-float-_-ptrfloat-_-fint-c-function-is-external-c-function","title":"<code>cblas_dsyrk(_: fint, _: fint, _: fint, _: fint, _: fint, _: float, _: Ptr[float], _: fint, _: float, _: Ptr[float], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_ssyrk_-fint-_-fint-_-fint-_-fint-_-fint-_-float32-_-ptrfloat32-_-fint-_-float32-_-ptrfloat32-_-fint-c-function-is-external-c-function","title":"<code>cblas_ssyrk(_: fint, _: fint, _: fint, _: fint, _: fint, _: float32, _: Ptr[float32], _: fint, _: float32, _: Ptr[float32], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_zsyrk_-fint-_-fint-_-fint-_-fint-_-fint-_-cobj-_-ptrcomplex-_-fint-_-cobj-_-ptrcomplex-_-fint-c-function-is-external-c-function","title":"<code>cblas_zsyrk(_: fint, _: fint, _: fint, _: fint, _: fint, _: cobj, _: Ptr[complex], _: fint, _: cobj, _: Ptr[complex], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_csyrk_-fint-_-fint-_-fint-_-fint-_-fint-_-cobj-_-ptrcomplex64-_-fint-_-cobj-_-ptrcomplex64-_-fint-c-function-is-external-c-function","title":"<code>cblas_csyrk(_: fint, _: fint, _: fint, _: fint, _: fint, _: cobj, _: Ptr[complex64], _: fint, _: cobj, _: Ptr[complex64], _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_ddot_-fint-_-cobj-_-fint-_-cobj-_-fint-c-function-is-external-c-function","title":"<code>cblas_ddot(_: fint, _: cobj, _: fint, _: cobj, _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_sdot_-fint-_-cobj-_-fint-_-cobj-_-fint-c-function-is-external-c-function","title":"<code>cblas_sdot(_: fint, _: cobj, _: fint, _: cobj, _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_zdotu_sub_-fint-_-cobj-_-fint-_-cobj-_-fint-_-ptrcomplex-c-function-is-external-c-function","title":"<code>cblas_zdotu_sub(_: fint, _: cobj, _: fint, _: cobj, _: fint, _: Ptr[complex])</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_cdotu_sub_-fint-_-cobj-_-fint-_-cobj-_-fint-_-ptrcomplex64-c-function-is-external-c-function","title":"<code>cblas_cdotu_sub(_: fint, _: cobj, _: fint, _: cobj, _: fint, _: Ptr[complex64])</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_zdotc_sub_-fint-_-cobj-_-fint-_-cobj-_-fint-_-cobj-c-function-is-external-c-function","title":"<code>cblas_zdotc_sub(_: fint, _: cobj, _: fint, _: cobj, _: fint, _: cobj)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_cdotc_sub_-fint-_-cobj-_-fint-_-cobj-_-fint-_-cobj-c-function-is-external-c-function","title":"<code>cblas_cdotc_sub(_: fint, _: cobj, _: fint, _: cobj, _: fint, _: cobj)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_dgemv_-fint-_-fint-_-fint-_-fint-_-float-_-cobj-_-fint-_-cobj-_-fint-_-float-_-cobj-_-fint-c-function-is-external-c-function","title":"<code>cblas_dgemv(_: fint, _: fint, _: fint, _: fint, _: float, _: cobj, _: fint, _: cobj, _: fint, _: float, _: cobj, _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_sgemv_-fint-_-fint-_-fint-_-fint-_-float32-_-cobj-_-fint-_-cobj-_-fint-_-float32-_-cobj-_-fint-c-function-is-external-c-function","title":"<code>cblas_sgemv(_: fint, _: fint, _: fint, _: fint, _: float32, _: cobj, _: fint, _: cobj, _: fint, _: float32, _: cobj, _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_zgemv_-fint-_-fint-_-fint-_-fint-_-cobj-_-cobj-_-fint-_-cobj-_-fint-_-cobj-_-cobj-_-fint-c-function-is-external-c-function","title":"<code>cblas_zgemv(_: fint, _: fint, _: fint, _: fint, _: cobj, _: cobj, _: fint, _: cobj, _: fint, _: cobj, _: cobj, _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cblas_cgemv_-fint-_-fint-_-fint-_-fint-_-cobj-_-cobj-_-fint-_-cobj-_-fint-_-cobj-_-cobj-_-fint-c-function-is-external-c-function","title":"<code>cblas_cgemv(_: fint, _: fint, _: fint, _: fint, _: cobj, _: cobj, _: fint, _: cobj, _: fint, _: cobj, _: cobj, _: fint)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dpotrf__-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dpotrf_(_: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#spotrf__-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>spotrf_(_: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zpotrf__-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zpotrf_(_: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cpotrf__-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cpotrf_(_: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dgetrf__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dgetrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sgetrf__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sgetrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zgetrf__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zgetrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cgetrf__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cgetrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dgeqrf__-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dgeqrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sgeqrf__-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sgeqrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zgeqrf__-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zgeqrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cgeqrf__-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cgeqrf_(_: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dorgqr__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dorgqr_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sorgqr__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sorgqr_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zungqr__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zungqr_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cungqr__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cungqr_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dgeev__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dgeev_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sgeev__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sgeev_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zgeev__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-c-function-is-external-c-function","title":"<code>zgeev_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cgeev__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-c-function-is-external-c-function","title":"<code>cgeev_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dsyevd__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dsyevd_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#ssyevd__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>ssyevd_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zheevd__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zheevd_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cheevd__-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cheevd_(_: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dgesv__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dgesv_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sgesv__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sgesv_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zgesv__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zgesv_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cgesv__-fintp-_-fintp-_-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cgesv_(_: fintp, _: fintp, _: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dgelsd__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dgelsd_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sgelsd__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sgelsd_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zgelsd__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zgelsd_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cgelsd__-fintp-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cgelsd_(_: fintp, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#dgesdd__-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>dgesdd_(_: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#sgesdd__-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>sgesdd_(_: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#zgesdd__-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>zgesdd_(_: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/blas/#cgesdd__-cobj-_-fintp-_-fintp-_-cobj-_-fintp-_-cobj-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-cobj-_-fintp-_-fintp-c-function-is-external-c-function","title":"<code>cgesdd_(_: cobj, _: fintp, _: fintp, _: cobj, _: fintp, _: cobj, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: cobj, _: fintp, _: fintp)</code>  @C Function is external C function","text":""},{"location":"libraries/api/numpy/linalg/linalg/","title":"module <code>numpy.linalg.linalg</code>","text":"<p>Source: <code>stdlib/numpy/linalg/linalg.codon</code></p>"},{"location":"libraries/api/numpy/linalg/linalg/#linalgerror","title":"<code>LinAlgError</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-message-str","title":"<code>__init__(self, message: str = \"\")</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#linearizedata-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>LinearizeData</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#rows-int","title":"<code>rows</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#cols-int","title":"<code>cols</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#row_strides-int","title":"<code>row_strides</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#col_strides-int","title":"<code>col_strides</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#out_lead_dim-int","title":"<code>out_lead_dim</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__new__rows-int-cols-int-row_strides-int-col_strides-int","title":"<code>__new__(rows: int, cols: int, row_strides: int, col_strides: int)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#linearizeself-dst-ptrt-src-ptrt-t-type","title":"<code>linearize(self, dst: Ptr[T], src: Ptr[T], T: type)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#delinearizeself-dst-ptrt-src-ptrt-t-type","title":"<code>delinearize(self, dst: Ptr[T], src: Ptr[T], T: type)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#nan_matrixself-dst-ptrt-t-type","title":"<code>nan_matrix(self, dst: Ptr[T], T: type)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#zero_matrixself-dst-ptrt-t-type","title":"<code>zero_matrix(self, dst: Ptr[T], T: type)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#identity_matrixdst-ptrt-n-int-t-type","title":"<code>identity_matrix(dst: Ptr[T], n: int, T: type)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#slogdetresultab-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>SlogdetResult[A,B]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#sign-a","title":"<code>sign</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#logabsdet-b","title":"<code>logabsdet</code>: <code>B</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-type","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__getitem__self-idx-literalint","title":"<code>__getitem__(self, idx: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#slogdeta","title":"<code>slogdet(a)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#deta","title":"<code>det(a)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eighparamstb","title":"<code>EighParams[T,B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#w-ptrb","title":"<code>W</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#work-ptrt","title":"<code>WORK</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#rwork-ptrb","title":"<code>RWORK</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#iwork-ptrfint","title":"<code>IWORK</code>: <code>Ptr[fint]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lwork-fint","title":"<code>LWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lrwork-fint","title":"<code>LRWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#liwork-fint","title":"<code>LIWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#jobz-byte","title":"<code>JOBZ</code>: <code>byte</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#uplo-byte","title":"<code>UPLO</code>: <code>byte</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type_1","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_3","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-jobz-byte-uplo-byte-n-fint","title":"<code>__init__(self, JOBZ: byte, UPLO: byte, N: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eighresultab-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>EighResult[A,B]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_3","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigenvalues-a","title":"<code>eigenvalues</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigenvectors-b","title":"<code>eigenvectors</code>: <code>B</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-type_1","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type_2","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_4","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__getitem__self-idx-literalint_1","title":"<code>__getitem__(self, idx: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigha-uplo-str-l","title":"<code>eigh(a, UPLO: str = \"L\")</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigvalsha-uplo-str-l","title":"<code>eigvalsh(a, UPLO: str = \"L\")</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#gesvparamst","title":"<code>GesvParams[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_4","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_1","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-ptrt","title":"<code>B</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ipiv-ptrfint","title":"<code>IPIV</code>: <code>Ptr[fint]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint_1","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#nrhs-fint","title":"<code>NRHS</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_1","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ldb-fint","title":"<code>LDB</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_1","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_5","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-n-fint-nrhs-fint","title":"<code>__init__(self, N: fint, NRHS: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_2","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_1","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_1","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#solvea-b","title":"<code>solve(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#inva","title":"<code>inv(a)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#potrfparamst","title":"<code>PotrfParams[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_5","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_2","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint_2","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_2","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#uplo-byte_1","title":"<code>UPLO</code>: <code>byte</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_2","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_6","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-uplo-byte-n-fint","title":"<code>__init__(self, UPLO: byte, N: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_3","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#zero_lower_triangleself","title":"<code>zero_lower_triangle(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#zero_upper_triangleself","title":"<code>zero_upper_triangle(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_2","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_2","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#choleskya-upper-bool-false","title":"<code>cholesky(a, upper: bool = False)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#geevparamstb","title":"<code>GeevParams[T,B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_6","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_3","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#wr-ptrb","title":"<code>WR</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#wi-ptrt","title":"<code>WI</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vlr-ptrt","title":"<code>VLR</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vrr-ptrt","title":"<code>VRR</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#work-ptrt_1","title":"<code>WORK</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#w-ptrt","title":"<code>W</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vl-ptrt","title":"<code>VL</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vr-ptrt","title":"<code>VR</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint_3","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_3","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ldvl-fint","title":"<code>LDVL</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ldvr-fint","title":"<code>LDVR</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lwork-fint_1","title":"<code>LWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#jobvl-byte","title":"<code>JOBVL</code>: <code>byte</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#jobvr-byte","title":"<code>JOBVR</code>: <code>byte</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_3","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type_3","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_7","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-jobvl-byte-jobvr-byte-n-fint","title":"<code>__init__(self, jobvl: byte, jobvr: byte, n: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_4","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_3","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_3","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#process_geev_resultsself","title":"<code>process_geev_results(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigresultab-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>EigResult[A,B]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_7","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigenvalues-a_1","title":"<code>eigenvalues</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigenvectors-b_1","title":"<code>eigenvectors</code>: <code>B</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-type_2","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type_4","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_8","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__getitem__self-idx-literalint_2","title":"<code>__getitem__(self, idx: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eiga","title":"<code>eig(a)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#eigvalsa","title":"<code>eigvals(a)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#gesddparamstb","title":"<code>GesddParams[T,B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_8","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_4","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#s-ptrb","title":"<code>S</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#u-ptrt","title":"<code>U</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vt-ptrt","title":"<code>VT</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#work-ptrt_2","title":"<code>WORK</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#rwork-ptrb_1","title":"<code>RWORK</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#iwork-ptrfint_1","title":"<code>IWORK</code>: <code>Ptr[fint]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#m-fint","title":"<code>M</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint_4","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_4","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ldu-fint","title":"<code>LDU</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ldvt-fint","title":"<code>LDVT</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lwork-fint_2","title":"<code>LWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#jobz-byte_1","title":"<code>JOBZ</code>: <code>byte</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_4","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type_5","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_9","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-jobz-byte-m-fint-n-fint","title":"<code>__init__(self, jobz: byte, m: fint, n: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_5","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_4","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_4","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#svdresulta1a2-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>SVDResult[A1,A2]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_9","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#u-a1","title":"<code>U</code>: <code>A1</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#s-a2","title":"<code>S</code>: <code>A2</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vh-a1","title":"<code>Vh</code>: <code>A1</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a1-type","title":"<code>A1</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a2-type","title":"<code>A2</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_10","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__getitem__self-idx-literalint_3","title":"<code>__getitem__(self, idx: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#svda-full_matrices-bool-true-compute_uv-literalbool-true-hermitian-bool-false","title":"<code>svd(a, full_matrices: bool = True, compute_uv: Literal[bool] = True, hermitian: bool = False)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#svdvalsx","title":"<code>svdvals(x)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#geqrfparamst","title":"<code>GeqrfParams[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_10","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#m-fint_1","title":"<code>M</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint_5","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_5","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_5","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tau-ptrt","title":"<code>TAU</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#work-ptrt_3","title":"<code>WORK</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lwork-fint_3","title":"<code>LWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_5","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_11","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-m-fint-n-fint","title":"<code>__init__(self, m: fint, n: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_6","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_5","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_5","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#gqrparamst","title":"<code>GqrParams[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_11","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#m-fint_2","title":"<code>M</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#mc-fint","title":"<code>MC</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#mn-fint","title":"<code>MN</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_6","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#q-ptrt","title":"<code>Q</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_6","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tau-ptrt_1","title":"<code>TAU</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#work-ptrt_4","title":"<code>WORK</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lwork-fint_4","title":"<code>LWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_6","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_12","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-m-fint-n-fint-mc-fint","title":"<code>__init__(self, m: fint, n: fint, mc: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-m-fint-n-fint_1","title":"<code>__init__(self, m: fint, n: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_7","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_6","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_6","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#qrresulta-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>QRResult[A]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_12","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#q-a","title":"<code>Q</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#r-a","title":"<code>R</code>: <code>A</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-type_3","title":"<code>A</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_13","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__getitem__self-idx-literalint_4","title":"<code>__getitem__(self, idx: Literal[int])</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#qra-mode-literalstr-reduced","title":"<code>qr(a, mode: Literal[str] = \"reduced\")</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#gelsdparamstb","title":"<code>GelsdParams[T,B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#fields_13","title":"Fields","text":""},{"location":"libraries/api/numpy/linalg/linalg/#m-fint_3","title":"<code>M</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#n-fint_6","title":"<code>N</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#nrhs-fint_1","title":"<code>NRHS</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#a-ptrt_7","title":"<code>A</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lda-fint_7","title":"<code>LDA</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b_-ptrt","title":"<code>B_</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ldb-fint_1","title":"<code>LDB</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#s-ptrb_1","title":"<code>S</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#rcond-ptrb","title":"<code>RCOND</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#rank-fint","title":"<code>RANK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#work-ptrt_5","title":"<code>WORK</code>: <code>Ptr[T]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lwork-fint_5","title":"<code>LWORK</code>: <code>fint</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#rwork-ptrb_2","title":"<code>RWORK</code>: <code>Ptr[B]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#iwork-ptrfint_2","title":"<code>IWORK</code>: <code>Ptr[fint]</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#t-type_7","title":"<code>T</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#b-type_6","title":"<code>B</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_14","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__init__self-m-fint-n-fint-nrhs-fint","title":"<code>__init__(self, m: fint, n: fint, nrhs: fint)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_8","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#callself_7","title":"<code>call(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#releaseself_7","title":"<code>release(self)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#lstsqa-b-rcond-none","title":"<code>lstsq(a, b, rcond = None)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#blas_maxsize-literalint-2147483646","title":"<code>BLAS_MAXSIZE</code>: <code>Literal[int]</code> = <code>2147483646</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#matmulx1-x2","title":"<code>matmul(x1, x2)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#dota-b-out-none","title":"<code>dot(a, b, out = None)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#matrix_powera-n-int","title":"<code>matrix_power(a, n: int)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#matrix_powera-n-literalint-overload-function-is-overloaded","title":"<code>matrix_power(a, n: Literal[int])</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/linalg/linalg/#multi_dotarrays-out-none","title":"<code>multi_dot(arrays, out = None)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#vdota-b","title":"<code>vdot(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#outera-b-out-none","title":"<code>outer(a, b, out = None)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#innera-b","title":"<code>inner(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tensordota-b-axes","title":"<code>tensordot(a, b, axes)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tensordota-b-axes-literalint-2-overload-function-is-overloaded","title":"<code>tensordot(a, b, axes: Literal[int] = 2)</code>  @overload Function is overloaded","text":""},{"location":"libraries/api/numpy/linalg/linalg/#krona-b","title":"<code>kron(a, b)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tracex-offset-int-0-dtype-type-nonetype","title":"<code>trace(x, offset: int = 0, dtype: type = NoneType)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tensorsolvea-b-axes-none","title":"<code>tensorsolve(a, b, axes = None)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#tensorinva-ind-int-2","title":"<code>tensorinv(a, ind: int = 2)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#normx-ord-none-axis-none-keepdims-literalbool-false","title":"<code>norm(x, ord = None, axis = None, keepdims: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#pinva-rcond-1e-15-hermitian-bool-false","title":"<code>pinv(a, rcond = 1e-15, hermitian: bool = False)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#matrix_ranka-tol-none-hermitian-bool-false","title":"<code>matrix_rank(A, tol = None, hermitian: bool = False)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#condx-p-none","title":"<code>cond(x, p = None)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#matrix_transposex","title":"<code>matrix_transpose(x)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#ndarraydtypendim-extend-class-is-extended-to-add-given-methods","title":"<code>ndarray[dtype,ndim]</code>  @extend Class is extended to add given methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#magic-methods_15","title":"Magic methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#__matmul__self-other","title":"<code>__matmul__(self, other)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#methods_9","title":"Methods","text":""},{"location":"libraries/api/numpy/linalg/linalg/#dotself-other","title":"<code>dot(self, other)</code>","text":""},{"location":"libraries/api/numpy/linalg/linalg/#traceself-offset-int-0-axis1-int-0-axis2-int-1-dtype-type-nonetype-out-none","title":"<code>trace(self, offset: int = 0, axis1: int = 0, axis2: int = 1, dtype: type = NoneType, out = None)</code>","text":""},{"location":"libraries/api/numpy/random/","title":"<code>numpy.random</code>","text":"<ul> <li><code>bitgen</code></li> <li><code>logfactorial</code></li> <li><code>mt19937</code></li> <li><code>pcg64</code></li> <li><code>philox</code></li> <li><code>seed</code></li> <li><code>sfc64</code></li> <li><code>splitmix64</code></li> <li><code>ziggurat</code></li> </ul> <p>Source: <code>stdlib/numpy/random/__init__.codon</code></p>"},{"location":"libraries/api/numpy/random/#default_rngseed-none","title":"<code>default_rng(seed = None)</code>","text":""},{"location":"libraries/api/numpy/random/#betaa-b-size-none","title":"<code>beta(a, b, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#binomialn-p-size-none","title":"<code>binomial(n, p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#byteslength-int","title":"<code>bytes(length: int)</code>","text":""},{"location":"libraries/api/numpy/random/#chisquaredf-size-none","title":"<code>chisquare(df, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#choicea-size-none-replace-bool-true-p-none","title":"<code>choice(a, size = None, replace: bool = True, p = None)</code>","text":""},{"location":"libraries/api/numpy/random/#dirichletalpha-size-none","title":"<code>dirichlet(alpha, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#exponentialscale-10-size-none","title":"<code>exponential(scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#fdfnum-dfden-size-none","title":"<code>f(dfnum, dfden, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#gammashape-scale-10-size-none","title":"<code>gamma(shape, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#geometricp-size-none","title":"<code>geometric(p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#get_statelegacy-bool","title":"<code>get_state(legacy: bool)</code>","text":""},{"location":"libraries/api/numpy/random/#gumbelloc-00-scale-10-size-none","title":"<code>gumbel(loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#hypergeometricngood-nbad-nsample-size-none","title":"<code>hypergeometric(ngood, nbad, nsample, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#laplaceloc-00-scale-10-size-none","title":"<code>laplace(loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#logisticloc-00-scale-10-size-none","title":"<code>logistic(loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#lognormalmean-00-sigma-10-size-none","title":"<code>lognormal(mean = 0.0, sigma = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#logseriesp-size-none","title":"<code>logseries(p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#multinomialn-pvals-size-none","title":"<code>multinomial(n, pvals, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#multivariate_normalmean-cov-size-none-check_valid-literalstr-warn-tol-float-1e-8","title":"<code>multivariate_normal(mean, cov, size = None, check_valid: Literal[str] = \"warn\", tol: float = 1e-8)</code>","text":""},{"location":"libraries/api/numpy/random/#negative_binomialn-p-size-none","title":"<code>negative_binomial(n, p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#noncentral_chisquaredf-nonc-size-none","title":"<code>noncentral_chisquare(df, nonc, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#noncentral_fdfnum-dfden-nonc-size-none","title":"<code>noncentral_f(dfnum, dfden, nonc, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#normalloc-00-scale-10-size-none","title":"<code>normal(loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#paretoa-size-none","title":"<code>pareto(a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#permutationx","title":"<code>permutation(x)</code>","text":""},{"location":"libraries/api/numpy/random/#poissonlam-10-size-none","title":"<code>poisson(lam = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#powera-size-none","title":"<code>power(a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#randd","title":"<code>rand(*d)</code>","text":""},{"location":"libraries/api/numpy/random/#randintlow-high-none-size-none-dtype-type-int","title":"<code>randint(low, high = None, size = None, dtype: type = int)</code>","text":""},{"location":"libraries/api/numpy/random/#randnd","title":"<code>randn(*d)</code>","text":""},{"location":"libraries/api/numpy/random/#randomsize-none","title":"<code>random(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#random_integerslow-high-none-size-none","title":"<code>random_integers(low, high = None, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#random_samplesize-none","title":"<code>random_sample(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#ranfsize-none","title":"<code>ranf(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#rayleighscale-10-size-none","title":"<code>rayleigh(scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#samplesize-none","title":"<code>sample(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#seedseed-none","title":"<code>seed(seed = None)</code>","text":""},{"location":"libraries/api/numpy/random/#set_statestate","title":"<code>set_state(state)</code>","text":""},{"location":"libraries/api/numpy/random/#shufflex","title":"<code>shuffle(x)</code>","text":""},{"location":"libraries/api/numpy/random/#standard_cauchysize-none","title":"<code>standard_cauchy(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#standard_exponentialsize-none","title":"<code>standard_exponential(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#standard_gammashape-size-none","title":"<code>standard_gamma(shape, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#standard_normalsize-none","title":"<code>standard_normal(size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#standard_tdf-size-none","title":"<code>standard_t(df, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#triangularleft-mode-right-size-none","title":"<code>triangular(left, mode, right, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#uniformlow-00-high-10-size-none","title":"<code>uniform(low = 0.0, high = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#vonmisesmu-kappa-size-none","title":"<code>vonmises(mu, kappa, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#waldmean-scale-size-none","title":"<code>wald(mean, scale, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#weibulla-size-none","title":"<code>weibull(a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/#zipfa-size-none","title":"<code>zipf(a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/","title":"module <code>numpy.random.bitgen</code>","text":"<p>Source: <code>stdlib/numpy/random/bitgen.codon</code></p>"},{"location":"libraries/api/numpy/random/bitgen/#u128-uint128","title":"<code>u128</code> = <code>UInt[128]</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#binomial","title":"<code>Binomial</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/bitgen/#psave-float","title":"<code>psave</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#nsave-int","title":"<code>nsave</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#r-float","title":"<code>r</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#q-float","title":"<code>q</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#fm-float","title":"<code>fm</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#m-int","title":"<code>m</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#p1-float","title":"<code>p1</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#xm-float","title":"<code>xm</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#xl-float","title":"<code>xl</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#xr-float","title":"<code>xr</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#c-float","title":"<code>c</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#laml-float","title":"<code>laml</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#lamr-float","title":"<code>lamr</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#p2-float","title":"<code>p2</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#p3-float","title":"<code>p3</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#p4-float","title":"<code>p4</code>: <code>float</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/bitgen/#__init__self","title":"<code>__init__(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#bitgeneratorg","title":"<code>BitGenerator[G]</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/random/bitgen/#state-g","title":"<code>state</code>: <code>G</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#binomial-optionalbinomial","title":"<code>binomial</code>: <code>Optional[Binomial]</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#uinteger-u32","title":"<code>uinteger</code>: <code>u32</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#has_uint32-bool","title":"<code>has_uint32</code>: <code>bool</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#g-type","title":"<code>G</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/random/bitgen/#seed_seq-property-method-is-a-class-property","title":"<code>seed_seq</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/random/bitgen/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/bitgen/#__init__self-state-g","title":"<code>__init__(self, state: G)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/bitgen/#next64self","title":"<code>next64(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#next32self","title":"<code>next32(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#next_doubleself","title":"<code>next_double(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#next_floatself","title":"<code>next_float(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#jumpedself-jumps-int","title":"<code>jumped(self, jumps: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_uniformself","title":"<code>standard_uniform(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_uniform_fself","title":"<code>standard_uniform_f(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_uniform_fillself-cnt-int-out-ptrfloat","title":"<code>random_standard_uniform_fill(self, cnt: int, out: Ptr[float])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_uniform_fill_fself-cnt-int-out-ptrfloat32","title":"<code>random_standard_uniform_fill_f(self, cnt: int, out: Ptr[float32])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_exponential_unlikelyself-idx-int-x-float","title":"<code>standard_exponential_unlikely(self, idx: int, x: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_exponentialself","title":"<code>random_standard_exponential(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_exponential_fillself-cnt-int-out-ptrfloat","title":"<code>random_standard_exponential_fill(self, cnt: int, out: Ptr[float])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_exponential_unlikely_fself-idx-int-x-float32","title":"<code>standard_exponential_unlikely_f(self, idx: int, x: float32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_exponential_fself","title":"<code>random_standard_exponential_f(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_exponential_fill_fself-cnt-int-out-ptrfloat32","title":"<code>random_standard_exponential_fill_f(self, cnt: int, out: Ptr[float32])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_exponential_inv_fillself-cnt-int-out-ptrfloat","title":"<code>random_standard_exponential_inv_fill(self, cnt: int, out: Ptr[float])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_exponential_inv_fill_fself-cnt-int-out-ptrfloat32","title":"<code>random_standard_exponential_inv_fill_f(self, cnt: int, out: Ptr[float32])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_normalself","title":"<code>random_standard_normal(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_normal_fillself-cnt-int-out-ptrfloat","title":"<code>random_standard_normal_fill(self, cnt: int, out: Ptr[float])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_normal_fself","title":"<code>random_standard_normal_f(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_normal_fill_fself-cnt-int-out-ptrfloat32","title":"<code>random_standard_normal_fill_f(self, cnt: int, out: Ptr[float32])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_gammaself-shape-float","title":"<code>random_standard_gamma(self, shape: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_gamma_fself-shape-float32","title":"<code>random_standard_gamma_f(self, shape: float32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_positive_int64self","title":"<code>random_positive_int64(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_positive_int32self","title":"<code>random_positive_int32(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_positive_intself","title":"<code>random_positive_int(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_uintself","title":"<code>random_uint(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_loggamx-float","title":"<code>random_loggam(x: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_normalself-loc-float-scale-float","title":"<code>random_normal(self, loc: float, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_exponentialself-scale-float","title":"<code>random_exponential(self, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_uniformself-off-float-rng-float","title":"<code>random_uniform(self, off: float, rng: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_gammaself-shape-float-scale-float","title":"<code>random_gamma(self, shape: float, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_gamma_fself-shape-float32-scale-float32","title":"<code>random_gamma_f(self, shape: float32, scale: float32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_betaself-a-float-b-float","title":"<code>random_beta(self, a: float, b: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_chisquareself-df-float","title":"<code>random_chisquare(self, df: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_fself-dfnum-float-dfden-float","title":"<code>random_f(self, dfnum: float, dfden: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_cauchyself","title":"<code>random_standard_cauchy(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_paretoself-a-float","title":"<code>random_pareto(self, a: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_weibullself-a-float","title":"<code>random_weibull(self, a: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_powerself-a-float","title":"<code>random_power(self, a: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_laplaceself-loc-float-scale-float","title":"<code>random_laplace(self, loc: float, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_gumbelself-loc-float-scale-float","title":"<code>random_gumbel(self, loc: float, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_logisticself-loc-float-scale-float","title":"<code>random_logistic(self, loc: float, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_lognormalself-mean-float-sigma-float","title":"<code>random_lognormal(self, mean: float, sigma: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_rayleighself-mode-float","title":"<code>random_rayleigh(self, mode: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_standard_tself-df-float","title":"<code>random_standard_t(self, df: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_poisson_multself-lam-float","title":"<code>random_poisson_mult(self, lam: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_poisson_ptrsself-lam-float","title":"<code>random_poisson_ptrs(self, lam: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_poissonself-lam-float","title":"<code>random_poisson(self, lam: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_negative_binomialself-n-float-p-float","title":"<code>random_negative_binomial(self, n: float, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_binomial_btpeself-n-int-p-float","title":"<code>random_binomial_btpe(self, n: int, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_binomial_inversionself-n-int-p-float","title":"<code>random_binomial_inversion(self, n: int, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_binomialself-p-float-n-int","title":"<code>random_binomial(self, p: float, n: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_noncentral_chisquareself-df-float-nonc-float","title":"<code>random_noncentral_chisquare(self, df: float, nonc: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_noncentral_fself-dfnum-float-dfden-float-nonc-float","title":"<code>random_noncentral_f(self, dfnum: float, dfden: float, nonc: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_waldself-mean-float-scale-float","title":"<code>random_wald(self, mean: float, scale: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_vonmisesself-mu-float-kappa-float","title":"<code>random_vonmises(self, mu: float, kappa: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_logseriesself-p-float","title":"<code>random_logseries(self, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_geometric_searchself-p-float","title":"<code>random_geometric_search(self, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_geometric_inversionself-p-float","title":"<code>random_geometric_inversion(self, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_geometricself-p-float","title":"<code>random_geometric(self, p: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_zipfself-a-float","title":"<code>random_zipf(self, a: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_triangularself-left-float-mode-float-right-float","title":"<code>random_triangular(self, left: float, mode: float, right: float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_intervalself-max-u64","title":"<code>random_interval(self, max: u64)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#gen_maskmax-u64","title":"<code>gen_mask(max: u64)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_uint16self-bcnt-int-buf-u32","title":"<code>buffered_uint16(self, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_uint8self-bcnt-int-buf-u32","title":"<code>buffered_uint8(self, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#bounded_masked_uint64self-rng-u64-mask-u64","title":"<code>bounded_masked_uint64(self, rng: u64, mask: u64)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_masked_uint32self-rng-u32-mask-u32-bcnt-int-buf-u32","title":"<code>buffered_bounded_masked_uint32(self, rng: u32, mask: u32, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_masked_uint16self-rng-u16-mask-u16-bcnt-int-buf-u32","title":"<code>buffered_bounded_masked_uint16(self, rng: u16, mask: u16, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_masked_uint8self-rng-u8-mask-u8-bcnt-int-buf-u32","title":"<code>buffered_bounded_masked_uint8(self, rng: u8, mask: u8, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_boolself-off-bool-rng-bool-mask-bool-bcnt-int-buf-u32","title":"<code>buffered_bounded_bool(self, off: bool, rng: bool, mask: bool, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#bounded_lemire_uint64self-rng-u64","title":"<code>bounded_lemire_uint64(self, rng: u64)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_lemire_uint32self-rng-u32-bcnt-int-buf-u32","title":"<code>buffered_bounded_lemire_uint32(self, rng: u32, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_lemire_uint16self-rng-u16-bcnt-int-buf-u32","title":"<code>buffered_bounded_lemire_uint16(self, rng: u16, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#buffered_bounded_lemire_uint8self-rng-u8-bcnt-int-buf-u32","title":"<code>buffered_bounded_lemire_uint8(self, rng: u8, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_bounded_uint64self-off-u64-rng-u64-mask-u64-use_masked-bool","title":"<code>random_bounded_uint64(self, off: u64, rng: u64, mask: u64, use_masked: bool)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_buffered_bounded_uint32self-off-u32-rng-u32-mask-u32-use_masked-bool-bcnt-int-buf-u32","title":"<code>random_buffered_bounded_uint32(self, off: u32, rng: u32, mask: u32, use_masked: bool, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_buffered_bounded_uint16self-off-u16-rng-u16-mask-u16-use_masked-bool-bcnt-int-buf-u32","title":"<code>random_buffered_bounded_uint16(self, off: u16, rng: u16, mask: u16, use_masked: bool, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_buffered_bounded_uint8self-off-u8-rng-u8-mask-u8-use_masked-bool-bcnt-int-buf-u32","title":"<code>random_buffered_bounded_uint8(self, off: u8, rng: u8, mask: u8, use_masked: bool, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_buffered_bounded_boolself-off-bool-rng-bool-mask-bool-use_masked_bool-bcnt-int-buf-u32","title":"<code>random_buffered_bounded_bool(self, off: bool, rng: bool, mask: bool, use_masked_bool, bcnt: int, buf: u32)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_bounded_uint64_fillself-off-u64-rng-u64-cnt-int-use_masked-bool-out-ptru64","title":"<code>random_bounded_uint64_fill(self, off: u64, rng: u64, cnt: int, use_masked: bool, out: Ptr[u64])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_bounded_uint32_fillself-off-u32-rng-u32-cnt-int-use_masked-bool-out-ptru32","title":"<code>random_bounded_uint32_fill(self, off: u32, rng: u32, cnt: int, use_masked: bool, out: Ptr[u32])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_bounded_uint16_fillself-off-u16-rng-u16-cnt-int-use_masked-bool-out-ptru16","title":"<code>random_bounded_uint16_fill(self, off: u16, rng: u16, cnt: int, use_masked: bool, out: Ptr[u16])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_bounded_uint8_fillself-off-u8-rng-u8-cnt-int-use_masked-bool-out-ptru8","title":"<code>random_bounded_uint8_fill(self, off: u8, rng: u8, cnt: int, use_masked: bool, out: Ptr[u8])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_bounded_bool_fillself-off-bool-rng-bool-cnt-int-use_masked-bool-out-ptrbool","title":"<code>random_bounded_bool_fill(self, off: bool, rng: bool, cnt: int, use_masked: bool, out: Ptr[bool])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_multinomialself-n-int-mnix-ptrint-pix-ptrfloat-d-int","title":"<code>random_multinomial(self, n: int, mnix: Ptr[int], pix: Ptr[float], d: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#hypergeometric_sampleself-good-int-bad-int-sample-int","title":"<code>hypergeometric_sample(self, good: int, bad: int, sample: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#hypergeometric_hruaself-good-int-bad-int-sample-int","title":"<code>hypergeometric_hrua(self, good: int, bad: int, sample: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_hypergeometricself-good-int-bad-int-sample-int","title":"<code>random_hypergeometric(self, good: int, bad: int, sample: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_multivariate_hypergeometric_countself-total-int-num_colors-int-colors-ptrint-nsample-int-num_variates-int-variates-ptrint","title":"<code>random_multivariate_hypergeometric_count(self, total: int, num_colors: int, colors: Ptr[int], nsample: int, num_variates: int, variates: Ptr[int])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_multivariate_hypergeometric_marginalsself-total-int-num_colors-int-colors-ptrint-nsample-int-num_variates-int-variates-ptrint","title":"<code>random_multivariate_hypergeometric_marginals(self, total: int, num_colors: int, colors: Ptr[int], nsample: int, num_variates: int, variates: Ptr[int])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#next_rawself","title":"<code>next_raw(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_rawself-lock-size-output","title":"<code>random_raw(self, lock, size, output)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#random_rawself-size-none","title":"<code>random_raw(self, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#shuffle_rawself-n-int-first-int-itemsize-int-stride-int-data-cobj-buf-cobj","title":"<code>shuffle_raw(self, n: int, first: int, itemsize: int, stride: int, data: cobj, buf: cobj)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#shuffle_intself-n-int-first-int-data-ptrint","title":"<code>shuffle_int(self, n: int, first: int, data: Ptr[int])</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#shuffle_raw_wrapself-n-int-first-int-itemsize-int-stride-int-data-cobj-buf-cobj","title":"<code>shuffle_raw_wrap(self, n: int, first: int, itemsize: int, stride: int, data: cobj, buf: cobj)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#validate_output_shapeiter_shape-output-ndarray","title":"<code>validate_output_shape(iter_shape, output: ndarray)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#check_outputout-dtype-type-size-require_c_array-bool","title":"<code>check_output(out, dtype: type, size, require_c_array: bool)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#double_fillfunc-size-lock-out","title":"<code>double_fill(func, size, lock, out)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#float_fillfunc-size-lock-out","title":"<code>float_fill(func, size, lock, out)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#float_fill_from_doublefunc-size-lock-out","title":"<code>float_fill_from_double(func, size, lock, out)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_none-literalint-0","title":"<code>CONS_NONE</code>: <code>Literal[int]</code> = <code>0</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_non_negative-literalint-1","title":"<code>CONS_NON_NEGATIVE</code>: <code>Literal[int]</code> = <code>1</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_positive-literalint-2","title":"<code>CONS_POSITIVE</code>: <code>Literal[int]</code> = <code>2</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_positive_not_nan-literalint-3","title":"<code>CONS_POSITIVE_NOT_NAN</code>: <code>Literal[int]</code> = <code>3</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_bounded_0_1-literalint-4","title":"<code>CONS_BOUNDED_0_1</code>: <code>Literal[int]</code> = <code>4</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_bounded_gt_0_1-literalint-5","title":"<code>CONS_BOUNDED_GT_0_1</code>: <code>Literal[int]</code> = <code>5</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_bounded_lt_0_1-literalint-6","title":"<code>CONS_BOUNDED_LT_0_1</code>: <code>Literal[int]</code> = <code>6</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_gt_1-literalint-7","title":"<code>CONS_GT_1</code>: <code>Literal[int]</code> = <code>7</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_gte_1-literalint-8","title":"<code>CONS_GTE_1</code>: <code>Literal[int]</code> = <code>8</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#cons_poisson-literalint-9","title":"<code>CONS_POISSON</code>: <code>Literal[int]</code> = <code>9</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#max_int-0x7fffffffffffffff","title":"<code>MAX_INT</code> = <code>0x7FFFFFFFFFFFFFFF</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#maxsize-max_int","title":"<code>MAXSIZE</code> = <code>MAX_INT</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#poisson_lam_max-max_int-sqrtfloatmax_int-10","title":"<code>POISSON_LAM_MAX</code> = <code>(MAX_INT - (sqrt(float(MAX_INT)) * 10))</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#check_array_constraintval-name-str-const-int","title":"<code>check_array_constraint(val, name: str, const: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#convert_array_likea","title":"<code>convert_array_like(a)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#gather_arrayst","title":"<code>gather_arrays(t)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#contfn-size-lock-arrays-names-constraints-out-none-dtype-type-float","title":"<code>cont(fn, size, lock, arrays, names, constraints, out = None, dtype: type = float)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#kahan_sumdarr-ptrfloat-n-int","title":"<code>kahan_sum(darr: Ptr[float], n: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#generatorg-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>Generator[G]</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/random/bitgen/#fields_2","title":"Fields","text":""},{"location":"libraries/api/numpy/random/bitgen/#lock-lock","title":"<code>lock</code>: <code>Lock</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#bit_generator-bitgeneratorg","title":"<code>bit_generator</code>: <code>BitGenerator[G]</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#g-type_1","title":"<code>G</code>: <code>type</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#magic-methods_2","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/bitgen/#__new__g-g","title":"<code>__new__(g: G)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#__str__self","title":"<code>__str__(self)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/random/bitgen/#spawnself-n_children-int","title":"<code>spawn(self, n_children: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#randomself-size-none-dtype-type-float-out-none","title":"<code>random(self, size = None, dtype: type = float, out = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#betaself-a-b-size-none","title":"<code>beta(self, a, b, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#exponentialself-scale-10-size-none","title":"<code>exponential(self, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_exponentialself-size-none-dtype-type-float-method-str-zig-out-none","title":"<code>standard_exponential(self, size = None, dtype: type = float, method: str = \"zig\", out = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#integersself-low-high-none-size-none-dtype-type-int-endpoint-bool-false","title":"<code>integers(self, low, high = None, size = None, dtype: type = int, endpoint: bool = False)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#bytesself-length-int","title":"<code>bytes(self, length: int)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#choiceself-a-size-none-replace-bool-true-p-none-axis-int-0-shuffle-bool-true","title":"<code>choice(self, a, size = None, replace: bool = True, p = None, axis: int = 0, shuffle: bool = True)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#uniformself-low-00-high-10-size-none","title":"<code>uniform(self, low = 0.0, high = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_normalself-size-none-dtype-type-float-out-none","title":"<code>standard_normal(self, size = None, dtype: type = float, out = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#normalself-loc-00-scale-10-size-none","title":"<code>normal(self, loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_gammaself-shape-size-none-dtype-type-float-out-none","title":"<code>standard_gamma(self, shape, size = None, dtype: type = float, out = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#gammaself-shape-scale-10-size-none","title":"<code>gamma(self, shape, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#fself-dfnum-dfden-size-none","title":"<code>f(self, dfnum, dfden, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#noncentral_fself-dfnum-dfden-nonc-size-none","title":"<code>noncentral_f(self, dfnum, dfden, nonc, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#chisquareself-df-size-none","title":"<code>chisquare(self, df, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#noncentral_chisquareself-df-nonc-size-none","title":"<code>noncentral_chisquare(self, df, nonc, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_cauchyself-size-none","title":"<code>standard_cauchy(self, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#standard_tself-df-size-none","title":"<code>standard_t(self, df, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#vonmisesself-mu-kappa-size-none","title":"<code>vonmises(self, mu, kappa, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#paretoself-a-size-none","title":"<code>pareto(self, a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#weibullself-a-size-none","title":"<code>weibull(self, a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#powerself-a-size-none","title":"<code>power(self, a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#laplaceself-loc-00-scale-10-size-none","title":"<code>laplace(self, loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#gumbelself-loc-00-scale-10-size-none","title":"<code>gumbel(self, loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#logisticself-loc-00-scale-10-size-none","title":"<code>logistic(self, loc = 0.0, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#lognormalself-mean-00-sigma-10-size-none","title":"<code>lognormal(self, mean = 0.0, sigma = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#rayleighself-scale-10-size-none","title":"<code>rayleigh(self, scale = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#waldself-mean-scale-size-none","title":"<code>wald(self, mean, scale, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#triangularself-left-mode-right-size-none","title":"<code>triangular(self, left, mode, right, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#binomialself-n-p-size-none","title":"<code>binomial(self, n, p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#negative_binomialself-n-p-size-none","title":"<code>negative_binomial(self, n, p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#poissonself-lam-10-size-none","title":"<code>poisson(self, lam = 1.0, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#zipfself-a-size-none","title":"<code>zipf(self, a, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#geometricself-p-size-none","title":"<code>geometric(self, p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#hypergeometricself-ngood-nbad-nsample-size-none","title":"<code>hypergeometric(self, ngood, nbad, nsample, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#logseriesself-p-size-none","title":"<code>logseries(self, p, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#multivariate_normalself-mean-cov-size-none-check_valid-literalstr-warn-tol-float-1e-8-method-literalstr-svd","title":"<code>multivariate_normal(self, mean, cov, size = None, check_valid: Literal[str] = \"warn\", tol: float = 1e-8, method: Literal[str] = \"svd\")</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#multinomialself-n-pvals-size-none","title":"<code>multinomial(self, n, pvals, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#multivariate_hypergeometricself-colors-nsample-int-size-none-method-str-marginals","title":"<code>multivariate_hypergeometric(self, colors, nsample: int, size = None, method: str = \"marginals\")</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#dirichletself-alpha-size-none","title":"<code>dirichlet(self, alpha, size = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#permutedself-x-axis-none-out-none","title":"<code>permuted(self, x, axis = None, out = None)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#shuffleself-x-axis-int-0","title":"<code>shuffle(self, x, axis: int = 0)</code>","text":""},{"location":"libraries/api/numpy/random/bitgen/#permutationself-x-axis-int-0","title":"<code>permutation(self, x, axis: int = 0)</code>","text":""},{"location":"libraries/api/numpy/random/logfactorial/","title":"module <code>numpy.random.logfactorial</code>","text":"<p>Source: <code>stdlib/numpy/random/logfactorial.codon</code></p>"},{"location":"libraries/api/numpy/random/logfactorial/#logfactidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>logfact(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [126 x double] [double 0.000000e+00, double 0.000000e+00, double 0x3FE62E42FEFA39EF, double 0x3FFCAB0BFA2A2002, double 0x40096CA77C922CF9, double 0x401326643C4479C9, double 0x401A51273ACF01CA, double 0x40210CE1F32DCC30, double 0x4025358E82FCB70D, double 0x40299A8921A7F7CF, double 0x402E357590954D15, double 0x403180973F3A8D74, double 0x4033FCBA16D50143, double 0x40368D5A9C3B32CE, double 0x403930F3DF162A42, double 0x403BE636A63FD346, double 0x403EABFF061F1A84, double 0x4040C0A63F2F353A, double 0x4042329DF2D5EE52, double 0x4043AB8153363985, double 0x40452AF57AED77BE, double 0x4046B0A8643472A9, double 0x40483C4FABA84F06, double 0x4049CDA78B856A45, double 0x404B6472034E8D14, double 0x404D007622CD65E7, double 0x404EA17F717C6794, double 0x405023AEB67E4FEF, double 0x4050F8F18D330240, double 0x4051D07353917231, double 0x4052AA208B59D0E5, double 0x405385E6FD9E5A40, double 0x405463B59B942084, double 0x4055437C633ACE4A, double 0x4056252C474896BA, double 0x405708B719E11658, double 0x4057EE0F79B26758, double 0x4058D528C1243D96, double 0x4059BDF6F75257A3, double 0x405AA86EC2969812, double 0x405B94855C702BA2, double 0x405C8230869CA105, double 0x405D7166813E12EE, double 0x405E621E01EEBA4F, double 0x405F544E2BA69CF1, double 0x406023F743ADDD9F, double 0x40609E7B7EA41EA9, double 0x406119AFE762626B, double 0x40619590C853A559, double 0x4062121A930C6EC3, double 0x40628F49DDEB1F31, double 0x40630D1B61E86335, double 0x40638B8BF8931DDB, double 0x40640A989A33A6CD, double 0x40648A3E5C12AF19, double 0x40650A7A6EE08711, double 0x40658B4A1D39DA73, double 0x40660CAACA474746, double 0x40668E99F0757979, double 0x406711152043B2C4, double 0x40679419FF26DC59, double 0x406817A6467F6FB9, double 0x40689BB7C2A0AEA1, double 0x4069204C51E7C761, double 0x4069A561E3E1A4BD, double 0x406A2AF6787E4609, double 0x406AB1081F509726, double 0x406B3794F6D9D7AF, double 0x406BBE9B2BDFB621, double 0x406C4618F8CC56F7, double 0x406CCE0CA5179100, double 0x406D567484B8B7B6, double 0x406DDF4EF7A05A70, double 0x406E689A69396BEF, double 0x406EF2554FF15148, double 0x406F7C7E2CC66183, double 0x40700389C56E3462, double 0x40704909FF8B652B, double 0x40708EBF13DBF263, double 0x4070D4A85602B129, double 0x40711AC51DF8932A, double 0x40716114C7E34736, double 0x4071A796B3EDE1AC, double 0x4071EE4A46236D3E, double 0x4072352EE64B46D5, double 0x40727C43FFC72962, double 0x4072C3890172D057, double 0x40730AFD5D851956, double 0x407352A089728F1B, double 0x40739A71FDD14947, double 0x4073E271363E0DF7, double 0x40742A9DB142A36A, double 0x407472F6F03D410C, double 0x4074BB7C77491066, double 0x4075042DCD27AF64, double 0x40754D0A7B2BA658, double 0x407596120D23C4EC, double 0x4075DF4411475A1C, double 0x407628A018233BED, double 0x40767225B4879462, double 0x4076BBD47B7669B6, double 0x407705AC0412D89F, double 0x40774FABE790F7BE, double 0x407799D3C1265C0E, double 0x4077E4232DFB367D, double 0x40782E99CD1C0368, double 0x407879373F6BC4FE, double 0x4078C3FB2796C21C, double 0x40790EE52A05C35F, double 0x407959F4ECD1C8B3, double 0x4079A52A17B831CC, double 0x4079F084540F545E, double 0x407A3C034CBB7B2C, double 0x407A87A6AE24493A, double 0x407AD36E262A7CC0, double 0x407B1F59641E0DB5, double 0x407B6B6818B4A3EB, double 0x407BB799F600610A, double 0x407C03EEAF66FACD, double 0x407C5065F9992226, double 0x407C9CFF8A8A340D, double 0x407CE9BB196830EA, double 0x407D36985E93F7B8, double 0x407D83971399C213, double 0x407DD0B6F329DEA4, double 0x407E1DF7B911A74C], align 16\n%p = getelementptr inbounds [126 x double], ptr @data, i64 0, i64 %idx\n%x = load double, ptr %p, align 8\nret double %x\n</code></pre>"},{"location":"libraries/api/numpy/random/logfactorial/#logfactorialk-int","title":"<code>logfactorial(k: int)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/","title":"module <code>numpy.random.mt19937</code>","text":"<p>Source: <code>stdlib/numpy/random/mt19937.codon</code></p>"},{"location":"libraries/api/numpy/random/mt19937/#n-literalint-624","title":"<code>N</code>: <code>Literal[int]</code> = <code>624</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#m-literalint-397","title":"<code>M</code>: <code>Literal[int]</code> = <code>397</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#matrix_a-u320x9908b0df","title":"<code>MATRIX_A</code> = <code>u32(0x9908b0df)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#upper_mask-u320x80000000","title":"<code>UPPER_MASK</code> = <code>u32(0x80000000)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#lower_mask-u320x7fffffff","title":"<code>LOWER_MASK</code> = <code>u32(0x7fffffff)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#w_size-literalint-32","title":"<code>W_SIZE</code>: <code>Literal[int]</code> = <code>32</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#mexp-literalint-19937","title":"<code>MEXP</code>: <code>Literal[int]</code> = <code>19937</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#p_size-literalint-mexp-w_size-1","title":"<code>P_SIZE</code>: <code>Literal[int]</code> = <code>((MEXP // W_SIZE) + 1)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#lsb-literalint-0x00000001","title":"<code>LSB</code>: <code>Literal[int]</code> = <code>0x00000001</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#qq-literalint-7","title":"<code>QQ</code>: <code>Literal[int]</code> = <code>7</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#ll-literalint-128","title":"<code>LL</code>: <code>Literal[int]</code> = <code>128</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#get_coefpf-ptru64-deg-int","title":"<code>get_coef(pf: Ptr[u64], deg: int)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#mt19937-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>MT19937</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/numpy/random/mt19937/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/mt19937/#data-ptru32","title":"<code>data</code>: <code>Ptr[u32]</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#seed-seedsequence","title":"<code>seed</code>: <code>SeedSequence</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/random/mt19937/#pos-property-method-is-a-class-property","title":"<code>pos</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/random/mt19937/#state-property-method-is-a-class-property","title":"<code>state</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/random/mt19937/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/mt19937/#__new__seed-legacy-literalbool-false","title":"<code>__new__(seed, legacy: Literal[bool] = False)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#__get_state__self","title":"<code>__get_state__(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#__set_state__self-state","title":"<code>__set_state__(self, state)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/mt19937/#seed_legacyself-seed-int","title":"<code>seed_legacy(self, seed: int)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#copy_stateself-state-mt19937","title":"<code>copy_state(self, state: MT19937)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#genrand_int32self","title":"<code>genrand_int32(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#genrand_res53self","title":"<code>genrand_res53(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#randomself","title":"<code>random(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#init_u32self-s-u32","title":"<code>init_u32(self, s: u32)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#init_arrayself-init_key-ptru32-key_length-int","title":"<code>init_array(self, init_key: Ptr[u32], key_length: int)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#seed_cpythonself-s-int","title":"<code>seed_cpython(self, s: int)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#gen_nextself","title":"<code>gen_next(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#add_stateself-state2-mt19937","title":"<code>add_state(self, state2: MT19937)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#horner1self-pf-ptru64","title":"<code>horner1(self, pf: Ptr[u64])</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#jump_stateself","title":"<code>jump_state(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#jump_inplaceself-jumps-int","title":"<code>jump_inplace(self, jumps: int)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#next32self","title":"<code>next32(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#next_doubleself","title":"<code>next_double(self)</code>","text":""},{"location":"libraries/api/numpy/random/mt19937/#poly_coef-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>poly_coef()</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@pf = private unnamed_addr constant [624 x i64] [i64 1927166307, i64 3044056772, i64 2284297142, i64 2820929765, i64 651705945, i64 69149273, i64 3892165397, i64 2337412983, i64 1219880790, i64 3207074517, i64 3836784057, i64 189286826, i64 1049791363, i64 3916249550, i64 2942382547, i64 166392552, i64 861176918, i64 3246476411, i64 2302311555, i64 4273801148, i64 29196903, i64 1363664063, i64 3802562022, i64 2600400244, i64 3090369801, i64 4040416970, i64 1432485208, i64 3632558139, i64 4015816763, i64 3013316418, i64 551532385, i64 3592224467, i64 3479125595, i64 1195467127, i64 2391032553, i64 2393493419, i64 1482493632, i64 1625159565, i64 748389672, i64 4042774030, i64 2998615036, i64 3393119101, i64 2177492569, i64 2265897321, i64 2507383006, i64 3461498961, i64 2003319700, i64 1942857197, i64 1455226044, i64 4097545580, i64 529653268, i64 3204756480, i64 2486748289, i64 495294513, i64 3396001954, i64 2643963605, i64 2655404568, i64 3881604377, i64 624710790, i64 3443737948, i64 1941294296, i64 2139259604, i64 3368734020, i64 422436761, i64 3602810182, i64 1384691081, i64 3035786407, i64 2551797119, i64 537227499, i64 65486120, i64 642436100, i64 2023822537, i64 2515598203, i64 1122953367, i64 2882306242, i64 1743213032, i64 321965189, i64 336496623, i64 2436602518, i64 3556266590, i64 1055117829, i64 463541647, i64 743234441, i64 527083645, i64 2606668346, i64 2274046499, i64 2761475053, i64 2760669048, i64 2538258534, i64 487125077, i64 3365962306, i64 3604906217, i64 2714700608, i64 680709708, i64 2217161159, i64 1614899374, i64 3710119533, i64 3201300658, i64 3752620679, i64 2755041105, i64 3129723037, i64 1247297753, i64 2812642690, i64 4114340845, i64 3485092247, i64 2752814364, i64 3586551747, i64 4073138437, i64 3462966585, i64 2924318358, i64 4061374901, i64 3314086806, i64 2640385723, i64 744590670, i64 3007586513, i64 3959120371, i64 997207767, i64 3420235506, i64 2092400998, i64 3190305685, i64 60965738, i64 549507222, i64 3784354415, i64 3209279509, i64 1238863299, i64 2605037827, i64 178570440, i64 1743491299, i64 4079686640, i64 2136795825, i64 3435430548, i64 1679732443, i64 1835708342, i64 2159367000, i64 1924487218, i64 4059723674, i64 996192116, i64 2308091645, i64 1336281586, i64 674600050, i64 1642572529, i64 1383973289, i64 2202960007, i64 3165481279, i64 3385474038, i64 2501318550, i64 2671842890, i64 3084085109, i64 3475033915, i64 1551329147, i64 4101397249, i64 1205851807, i64 3641536021, i64 3607635071, i64 1609126163, i64 2910426664, i64 3324508658, i64 4244311266, i64 254034382, i64 1258304384, i64 1914048768, i64 1358592011, i64 527610138, i64 3072108727, i64 4289413885, i64 1417001678, i64 2445445945, i64 896462712, i64 339855811, i64 3699378285, i64 2529457297, i64 3049459401, i64 2723472429, i64 2838633181, i64 2520397330, i64 3272339035, i64 1667003847, i64 3742634787, i64 942706520, i64 2301027215, i64 1907791250, i64 2306299096, i64 1021173342, i64 1539334516, i64 2907834628, i64 3199959207, i64 1556251860, i64 3642580275, i64 2355865416, i64 285806145, i64 867932457, i64 1177354172, i64 3291107470, i64 4022765061, i64 1613380116, i64 588147929, i64 650574324, i64 1236855601, i64 1371354511, i64 2085218212, i64 1203081931, i64 420526905, i64 1022192219, i64 2903287064, i64 2470845899, i64 3649873273, i64 2502333582, i64 3972385637, i64 4246356763, i64 199084157, i64 1567178788, i64 2107121836, i64 4293612856, i64 1902910177, i64 332397359, i64 83422598, i64 3614961721, i64 456321943, i64 2277615967, i64 2302518510, i64 3258315116, i64 2521897172, i64 3900282042, i64 4186973154, i64 3146532165, i64 2299685029, i64 3889120948, i64 1293301857, i64 187455105, i64 3395849230, i64 913321567, i64 3093513909, i64 1440944571, i64 1923481911, i64 338680924, i64 1204882963, i64 2739724491, i64 2886241328, i64 2408907774, i64 1299817192, i64 2474012871, i64 45400213, i64 553186784, i64 134558656, i64 2180943666, i64 2870807589, i64 76511085, i64 3053566760, i64 2516601415, i64 4172865902, i64 1751297915, i64 1251975234, i64 2964780642, i64 1412975316, i64 2739978478, i64 2171013719, i64 637935041, i64 975972384, i64 3044407449, i64 3111425639, i64 1938684970, i64 2860857400, i64 13419586, i64 2772079268, i64 3484375614, i64 3184054178, i64 159924837, i64 1386213021, i64 2765617231, i64 2523689118, i64 1283505218, i64 3510789588, i64 4125878259, i64 2990287597, i64 2152014833, i64 3084155970, i64 2815101609, i64 1932985704, i64 114887365, i64 1712687646, i64 2550515629, i64 3299051916, i64 2022747614, i64 2143630992, i64 2244188960, i64 3309469192, i64 3234358520, i64 800720365, i64 3278176634, i64 554357439, i64 2415629802, i64 1620877315, i64 2389462898, i64 2229691332, i64 1007748450, i64 1966873768, i64 2264971043, i64 1214524156, i64 346854700, i64 3471905342, i64 3984889660, i64 4034246840, i64 216712649, i64 4027196762, i64 3754772604, i64 2121785562, i64 2347070732, i64 7457687, i64 1443375102, i64 683948143, i64 2940226032, i64 3211475670, i64 2836507357, i64 774899409, i64 1588968308, i64 780438009, i64 3278878781, i64 2217181540, i64 2184194887, i64 1642129086, i64 69346830, i64 297114710, i64 3841068188, i64 2631265450, i64 4167492314, i64 2613519651, i64 1388582503, i64 2171556668, i64 1201873758, i64 2698772382, i64 207791958, i64 3936134563, i64 3725025702, i64 3306317801, i64 1055730422, i64 4069230694, i64 1767821343, i64 4252407395, i64 2422583118, i64 3158834399, i64 3754582617, i64 1112422556, i64 376187931, i64 3137549150, i64 712221089, i64 3300799453, i64 3868250200, i64 1165257666, i64 2494837767, i64 131304831, i64 1619349427, i64 1958236644, i64 3678218946, i64 3651007751, i64 2261987899, i64 1567368524, i64 2193599522, i64 3034394674, i64 2994602555, i64 3072727647, i64 889094521, i64 1089692095, i64 1822324824, i64 3876999182, i64 1703361286, i64 902229515, i64 4213728487, i64 3838170364, i64 672727494, i64 2240733828, i64 3858539469, i64 1149254245, i64 4166055926, i64 4193525313, i64 1709921593, i64 2278290377, i64 3190784116, i64 2919588882, i64 1012709717, i64 3640562031, i64 2931984863, i64 3515665246, i64 250577343, i64 1147230194, i64 1183856202, i64 3734511989, i64 3243867808, i64 3499383067, i64 2985115159, i64 2036821626, i64 3298159553, i64 2726542838, i64 1686910320, i64 1778823772, i64 965412224, i64 233509772, i64 3843098861, i64 1312622954, i64 500855830, i64 2950562091, i64 1915683607, i64 3405781138, i64 596073719, i64 2195150546, i64 3381728478, i64 546426436, i64 3527890868, i64 2324975353, i64 2241074266, i64 3992514859, i64 2576108287, i64 4077653225, i64 2632319392, i64 3127212632, i64 917000669, i64 2498161805, i64 3980835128, i64 2259526768, i64 1083920509, i64 1187452089, i64 97018536, i64 3056075838, i64 2059706760, i64 2373335692, i64 182196406, i64 2136713111, i64 1762080153, i64 1572125803, i64 1145919955, i64 1023966754, i64 3921694345, i64 1632005969, i64 1418372326, i64 354407429, i64 2438288265, i64 1620072033, i64 1586320921, i64 1044153697, i64 969324572, i64 613487980, i64 4230993062, i64 397726764, i64 2194259193, i64 735511759, i64 2066049260, i64 88093248, i64 1562536153, i64 2114157419, i64 3630951546, i64 589238503, i64 3120654384, i64 2521793793, i64 2746692127, i64 2557723425, i64 889897693, i64 2778878177, i64 643269509, i64 3342389831, i64 19218890, i64 3442706236, i64 3314581273, i64 3503147052, i64 1546343434, i64 1448529060, i64 529038801, i64 2748942264, i64 2213019208, i64 111314040, i64 2488697563, i64 1180642808, i64 2605272289, i64 4207476668, i64 1502558669, i64 2972370981, i64 4204339995, i64 1046225278, i64 992840610, i64 3847290298, i64 2387673094, i64 2221565747, i64 1045901716, i64 3997739302, i64 1556952765, i64 1103336648, i64 279418400, i64 2711316466, i64 2336215718, i64 2317900806, i64 974624729, i64 909575434, i64 1675610631, i64 1922393214, i64 2054896570, i64 3197007361, i64 3932554569, i64 1008619802, i64 3349254938, i64 113511461, i64 932630384, i64 2098759268, i64 3436837432, i64 3119972401, i64 1612590197, i64 2281609013, i64 4174211248, i64 4016332246, i64 2097525539, i64 1398632760, i64 1543697535, i64 2419227174, i64 1676465074, i64 2882923045, i64 23216933, i64 808195649, i64 3690720147, i64 484419260, i64 2254772642, i64 2975434733, i64 288528113, i64 204598404, i64 589968818, i64 3021152400, i64 2463155141, i64 1397846755, i64 157285579, i64 4230258857, i64 2469135246, i64 625357422, i64 3435224647, i64 465239124, i64 1022535736, i64 2823317040, i64 274194469, i64 2214966446, i64 3661001613, i64 518802547, i64 2293436304, i64 1335881988, i64 2247010176, i64 1856732584, i64 1088028094, i64 1877563709, i64 1015352636, i64 1700817932, i64 2960695857, i64 1882229300, i64 1666906557, i64 1838841022, i64 3983797810, i64 1667630361, i64 385998221, i64 241341791, i64 403550441, i64 2629200403, i64 3552759102, i64 2029750442, i64 2247999048, i64 2726665298, i64 2507798776, i64 2419064129, i64 1266444923, i64 526255242, i64 2384866697, i64 1886200981, i64 3954956408, i64 2171436866, i64 2295200753, i64 1047315850, i64 1967809707, i64 2860382973, i64 3918334466, i64 3057439479, i64 952682588, i64 1925559679, i64 3112119050, i64 3833190964, i64 1430139895, i64 2089165610, i64 3009202424, i64 3989186157, i64 3395807230, i64 347600520, i64 120428923, i64 3017004655, i64 1384933954, i64 303039929, i64 234010146, i64 2278760249, i64 315514836, i64 3987659575, i64 1239335668, i64 2387869477, i64 3885908826, i64 1983922602, i64 698609264, i64 3009002846, i64 1520611399, i64 809159940, i64 3089771783, i64 374838722, i64 2789914419, i64 2500831937, i64 3751970335, i64 4279852547, i64 2362894437, i64 1588814060, i64 1671213155, i64 434218829, i64 2126587176, i64 2002526422, i64 2756464095, i64 141700479, i64 2965974322, i64 2211530172, i64 992085992, i64 1943691492, i64 2705131817, i64 2519208889, i64 1938768395, i64 3949294294, i64 354046666, i64 2158272751, i64 602858583, i64 0], align 16\nret ptr @pf\n</code></pre>"},{"location":"libraries/api/numpy/random/pcg64/","title":"module <code>numpy.random.pcg64</code>","text":"<p>Source: <code>stdlib/numpy/random/pcg64.codon</code></p>"},{"location":"libraries/api/numpy/random/pcg64/#u128-uint128","title":"<code>u128</code> = <code>UInt[128]</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_inthi-lo","title":"<code>pcg_int(hi, lo)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_default_multiplier_high-u1282549297995355413924","title":"<code>PCG_DEFAULT_MULTIPLIER_HIGH</code> = <code>u128(2549297995355413924)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_default_multiplier_low-u1284865540595714422341","title":"<code>PCG_DEFAULT_MULTIPLIER_LOW</code> = <code>u128(4865540595714422341)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_default_multiplier_128-pcg_intpcg_default_multiplier_high-pcg_default_multiplier_low","title":"<code>PCG_DEFAULT_MULTIPLIER_128</code> = <code>pcg_int(PCG_DEFAULT_MULTIPLIER_HIGH, PCG_DEFAULT_MULTIPLIER_LOW)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_default_increment_128-pcg_int6364136223846793005-1442695040888963407","title":"<code>PCG_DEFAULT_INCREMENT_128</code> = <code>pcg_int(6364136223846793005, 1442695040888963407)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_state_setseq_128_initializer-pcg_int0x979c9a98d8462005-0x7d3e9cb6cfe0549b-pcg_int1-0xda3e39cb94b95bdb","title":"<code>PCG_STATE_SETSEQ_128_INITIALIZER</code> = <code>(pcg_int(0x979c9a98d8462005, 0x7d3e9cb6cfe0549b), pcg_int(1, 0xda3e39cb94b95bdb))</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_cheap_multiplier_128-u1280xda942042-u12832-u1280xe4dd58b5","title":"<code>PCG_CHEAP_MULTIPLIER_128</code> = <code>((u128(0xda942042) &lt;&lt; u128(32)) | u128(0xe4dd58b5))</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg64_initializer-pcg_state_setseq_128_initializer","title":"<code>PCG64_INITIALIZER</code> = <code>PCG_STATE_SETSEQ_128_INITIALIZER</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#rotr64value-u64-rot-int","title":"<code>rotr64(value: u64, rot: int)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg64","title":"<code>PCG64</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/pcg64/#state-u128","title":"<code>state</code>: <code>u128</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#inc-u128","title":"<code>inc</code>: <code>u128</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#seed-seedsequence","title":"<code>seed</code>: <code>SeedSequence</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/pcg64/#__init__self-initstate-u128-initseq-u128","title":"<code>__init__(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#__init__self-seed","title":"<code>__init__(self, seed)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#__get_state__self","title":"<code>__get_state__(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#__set_state__self-state","title":"<code>__set_state__(self, state)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/pcg64/#setseq_128_step_rself","title":"<code>setseq_128_step_r(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#output_xsl_rr_128_64self","title":"<code>output_xsl_rr_128_64(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#setseq_128_xsl_rr_64_random_rself","title":"<code>setseq_128_xsl_rr_64_random_r(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#setseq_128_srandom_rself-initstate-u128-initseq-u128","title":"<code>setseq_128_srandom_r(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#advance_lcg_128self-delta-u128-cur_mult-u128-cur_plus-u128","title":"<code>advance_lcg_128(self, delta: u128, cur_mult: u128, cur_plus: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#setseq_128_advance_rself-delta-u128","title":"<code>setseq_128_advance_r(self, delta: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#random_rself","title":"<code>random_r(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#srandom_rself-initstate-u128-initseq-u128","title":"<code>srandom_r(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#advance_rself-delta-u128","title":"<code>advance_r(self, delta: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#next64self","title":"<code>next64(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_advanceself-step-tupleu64-u64","title":"<code>pcg_advance(self, step: Tuple[u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#advanceself-step-int","title":"<code>advance(self, step: int)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#jump_inplaceself-jumps-int","title":"<code>jump_inplace(self, jumps: int)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#set_seedself-seed-tupleu64-u64-inc-tupleu64-u64","title":"<code>set_seed(self, seed: Tuple[u64, u64], inc: Tuple[u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg64dxsm","title":"<code>PCG64DXSM</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#fields_1","title":"Fields","text":""},{"location":"libraries/api/numpy/random/pcg64/#state-u128_1","title":"<code>state</code>: <code>u128</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#inc-u128_1","title":"<code>inc</code>: <code>u128</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#seed-seedsequence_1","title":"<code>seed</code>: <code>SeedSequence</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#magic-methods_1","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/pcg64/#__init__self-initstate-u128-initseq-u128_1","title":"<code>__init__(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#__init__self-seed_1","title":"<code>__init__(self, seed)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#__get_state__self_1","title":"<code>__get_state__(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#__set_state__self-state_1","title":"<code>__set_state__(self, state)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#methods_1","title":"Methods","text":""},{"location":"libraries/api/numpy/random/pcg64/#cm_step_rself","title":"<code>cm_step_r(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#setseq_128_srandom_rself-initstate-u128-initseq-u128_1","title":"<code>setseq_128_srandom_r(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#srandom_rself-initstate-u128-initseq-u128_1","title":"<code>srandom_r(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#setseq_128_step_rself_1","title":"<code>setseq_128_step_r(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#output_cm_128_64self","title":"<code>output_cm_128_64(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#cm_random_rself","title":"<code>cm_random_r(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#cm_srandom_rself-initstate-u128-initseq-u128","title":"<code>cm_srandom_r(self, initstate: u128, initseq: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#advance_lcg_128self-delta-u128-cur_mult-u128-cur_plus-u128_1","title":"<code>advance_lcg_128(self, delta: u128, cur_mult: u128, cur_plus: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#cm_advance_rself-delta-u128","title":"<code>cm_advance_r(self, delta: u128)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#next64self_1","title":"<code>next64(self)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#pcg_advanceself-step-tupleu64-u64_1","title":"<code>pcg_advance(self, step: Tuple[u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#advanceself-step-int_1","title":"<code>advance(self, step: int)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#jump_inplaceself-jumps-int_1","title":"<code>jump_inplace(self, jumps: int)</code>","text":""},{"location":"libraries/api/numpy/random/pcg64/#set_seedself-seed-tupleu64-u64-inc-tupleu64-u64_1","title":"<code>set_seed(self, seed: Tuple[u64, u64], inc: Tuple[u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/philox/","title":"module <code>numpy.random.philox</code>","text":"<p>Source: <code>stdlib/numpy/random/philox.codon</code></p>"},{"location":"libraries/api/numpy/random/philox/#u128-uint128","title":"<code>u128</code> = <code>UInt[128]</code>","text":""},{"location":"libraries/api/numpy/random/philox/#philox_buffer_size-literalint-4","title":"<code>PHILOX_BUFFER_SIZE</code>: <code>Literal[int]</code> = <code>4</code>","text":""},{"location":"libraries/api/numpy/random/philox/#philox4x64_rounds-literalint-10","title":"<code>philox4x64_rounds</code>: <code>Literal[int]</code> = <code>10</code>","text":""},{"location":"libraries/api/numpy/random/philox/#mulhilo64a-u64-b-u64","title":"<code>mulhilo64(a: u64, b: u64)</code>","text":""},{"location":"libraries/api/numpy/random/philox/#philox4x64_rr-int-ctr-tupleu64-u64-u64-u64-key-tupleu64-u64","title":"<code>philox4x64_R(R: int, ctr: Tuple[u64, u64, u64, u64], key: Tuple[u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/philox/#philox","title":"<code>Philox</code>","text":""},{"location":"libraries/api/numpy/random/philox/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/philox/#ctr-tupleu64-u64-u64-u64","title":"<code>ctr</code>: <code>Tuple[u64, u64, u64, u64]</code>","text":""},{"location":"libraries/api/numpy/random/philox/#key-tupleu64-u64","title":"<code>key</code>: <code>Tuple[u64, u64]</code>","text":""},{"location":"libraries/api/numpy/random/philox/#buffer_pos-int","title":"<code>buffer_pos</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/random/philox/#buffer-tupleu64-u64-u64-u64","title":"<code>buffer</code>: <code>Tuple[u64, u64, u64, u64]</code>","text":""},{"location":"libraries/api/numpy/random/philox/#seed-seedsequence","title":"<code>seed</code>: <code>SeedSequence</code>","text":""},{"location":"libraries/api/numpy/random/philox/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/philox/#__init__self-ctr-tupleu64-u64-u64-u64-key-tupleu64-u64","title":"<code>__init__(self, ctr: Tuple[u64, u64, u64, u64], key: Tuple[u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/philox/#__init__self-seed","title":"<code>__init__(self, seed)</code>","text":""},{"location":"libraries/api/numpy/random/philox/#__get_state__self","title":"<code>__get_state__(self)</code>","text":""},{"location":"libraries/api/numpy/random/philox/#__set_state__self-state","title":"<code>__set_state__(self, state)</code>","text":""},{"location":"libraries/api/numpy/random/philox/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/philox/#next64self","title":"<code>next64(self)</code>","text":""},{"location":"libraries/api/numpy/random/philox/#jumpself","title":"<code>jump(self)</code>","text":""},{"location":"libraries/api/numpy/random/philox/#advanceself-step-tupleu64-u64-u64-u64","title":"<code>advance(self, step: Tuple[u64, u64, u64, u64])</code>","text":""},{"location":"libraries/api/numpy/random/philox/#jump_inplaceself-jumps-int","title":"<code>jump_inplace(self, jumps: int)</code>","text":""},{"location":"libraries/api/numpy/random/seed/","title":"module <code>numpy.random.seed</code>","text":"<p>Source: <code>stdlib/numpy/random/seed.codon</code></p>"},{"location":"libraries/api/numpy/random/seed/#default_pool_size-4","title":"<code>DEFAULT_POOL_SIZE</code> = <code>4</code>","text":""},{"location":"libraries/api/numpy/random/seed/#init_a-u320x43b0d7e5","title":"<code>INIT_A</code> = <code>u32(0x43b0d7e5)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#mult_a-u320x931e8875","title":"<code>MULT_A</code> = <code>u32(0x931e8875)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#init_b-u320x8b51f9dd","title":"<code>INIT_B</code> = <code>u32(0x8b51f9dd)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#mult_b-u320x58f38ded","title":"<code>MULT_B</code> = <code>u32(0x58f38ded)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#mix_mult_l-u320xca01f9dd","title":"<code>MIX_MULT_L</code> = <code>u32(0xca01f9dd)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#mix_mult_r-u320x4973f715","title":"<code>MIX_MULT_R</code> = <code>u32(0x4973f715)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#xshift-u324-8-2","title":"<code>XSHIFT</code> = <code>u32(((4 * 8) // 2))</code>","text":""},{"location":"libraries/api/numpy/random/seed/#mask32-u320xffffffff","title":"<code>MASK32</code> = <code>u32(0xFFFFFFFF)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#hashmixvalue-u32-hash_const-u32","title":"<code>hashmix(value: u32, hash_const: u32)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#mixx-u32-y-u32","title":"<code>mix(x: u32, y: u32)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#random_seed_time_pid","title":"<code>random_seed_time_pid()</code>","text":""},{"location":"libraries/api/numpy/random/seed/#seedsequence","title":"<code>SeedSequence</code>","text":""},{"location":"libraries/api/numpy/random/seed/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/seed/#entropy-ndarrayu32","title":"<code>entropy</code>: <code>ndarray[u32, ?]</code>","text":""},{"location":"libraries/api/numpy/random/seed/#pool_size-int","title":"<code>pool_size</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/random/seed/#n_children_spawned-int","title":"<code>n_children_spawned</code>: <code>int</code>","text":""},{"location":"libraries/api/numpy/random/seed/#pool-ndarrayu32","title":"<code>pool</code>: <code>ndarray[u32, ?]</code>","text":""},{"location":"libraries/api/numpy/random/seed/#properties","title":"Properties","text":""},{"location":"libraries/api/numpy/random/seed/#spawn_key-property-method-is-a-class-property","title":"<code>spawn_key</code>  @property Method is a class property","text":""},{"location":"libraries/api/numpy/random/seed/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/seed/#__init__self-entropy-none-spawn_key-optionallistint-none-pool_size-int-default_pool_size-n_children_spawned-int-0","title":"<code>__init__(self, entropy = None, spawn_key: Optional[List[int]] = None, pool_size: int = DEFAULT_POOL_SIZE, n_children_spawned: int = 0)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/seed/#generate_stateself-n_words-int-dtype-type-u32","title":"<code>generate_state(self, n_words: int, dtype: type = u32)</code>","text":""},{"location":"libraries/api/numpy/random/seed/#spawnself-n_children-int","title":"<code>spawn(self, n_children: int)</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/","title":"module <code>numpy.random.sfc64</code>","text":"<p>Source: <code>stdlib/numpy/random/sfc64.codon</code></p>"},{"location":"libraries/api/numpy/random/sfc64/#rotlvalue-u64-rot-int","title":"<code>rotl(value: u64, rot: int)</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#sfc64","title":"<code>SFC64</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/sfc64/#s0-u64","title":"<code>s0</code>: <code>u64</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#s1-u64","title":"<code>s1</code>: <code>u64</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#s2-u64","title":"<code>s2</code>: <code>u64</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#s3-u64","title":"<code>s3</code>: <code>u64</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#seed-seedsequence","title":"<code>seed</code>: <code>SeedSequence</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/sfc64/#__init__self-s0-u64-s1-u64-s2-u64","title":"<code>__init__(self, s0: u64, s1: u64, s2: u64)</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#__init__self-seed","title":"<code>__init__(self, seed)</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#__get_state__self","title":"<code>__get_state__(self)</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#__set_state__self-state","title":"<code>__set_state__(self, state)</code>","text":""},{"location":"libraries/api/numpy/random/sfc64/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/sfc64/#next64self","title":"<code>next64(self)</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/","title":"module <code>numpy.random.splitmix64</code>","text":"<p>Source: <code>stdlib/numpy/random/splitmix64.codon</code></p>"},{"location":"libraries/api/numpy/random/splitmix64/#splitmix64","title":"<code>Splitmix64</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/#fields","title":"Fields","text":""},{"location":"libraries/api/numpy/random/splitmix64/#state-u64","title":"<code>state</code>: <code>u64</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/numpy/random/splitmix64/#__init__self-state-u64","title":"<code>__init__(self, state: u64)</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/#__init__self-state-int-0","title":"<code>__init__(self, state: int = 0)</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/#__get_state__self","title":"<code>__get_state__(self)</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/#__set_state__self-state","title":"<code>__set_state__(self, state)</code>","text":""},{"location":"libraries/api/numpy/random/splitmix64/#methods","title":"Methods","text":""},{"location":"libraries/api/numpy/random/splitmix64/#next64self","title":"<code>next64(self)</code>","text":""},{"location":"libraries/api/numpy/random/ziggurat/","title":"module <code>numpy.random.ziggurat</code>","text":"<p>Source: <code>stdlib/numpy/random/ziggurat.codon</code></p>"},{"location":"libraries/api/numpy/random/ziggurat/#ki_doubleidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ki_double(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x i64] [i64 4208095142473578, i64 0, i64 3387314423973544, i64 3838760076542274, i64 4030768804392682, i64 4136731738896254, i64 4203757248105145, i64 4249917568205994, i64 4283617341590296, i64 4309289223136604, i64 4329489775174550, i64 4345795907393188, i64 4359232558744730, i64 4370494503737299, i64 4380069246215646, i64 4388308869042394, i64 4395473957549321, i64 4401761481783924, i64 4407323076021240, i64 4412277362218204, i64 4416718463613199, i64 4420722014516422, i64 4424349484777079, i64 4427651345409294, i64 4430669422005229, i64 4433438668975191, i64 4435988524278344, i64 4438343955930065, i64 4440526279077425, i64 4442553800234660, i64 4444442329865861, i64 4446205593658138, i64 4447855565093316, i64 4449402736340121, i64 4450856340408624, i64 4452224534496486, i64 4453514552210512, i64 4454732830656798, i64 4455885117109368, i64 4456976558985043, i64 4458011780094444, i64 4458994945550386, i64 4459929817254120, i64 4460819801517196, i64 4461667990089170, i64 4462477195632268, i64 4463249982500384, i64 4463988693531856, i64 4464695473445501, i64 4465372289331869, i64 4466020948651920, i64 4466643115089764, i64 4467240322552142, i64 4467813987562542, i64 4468365420260672, i64 4468895834186994, i64 4469406355006040, i64 4469898028300364, i64 4470371826548633, i64 4470828655385770, i64 4471269359229841, i64 4471694726349190, i64 4472105493433674, i64 4472502349725738, i64 4472885940759935, i64 4473256871753524, i64 4473615710685532, i64 4473962991097124, i64 4474299214642296, i64 4474624853414418, i64 4474940352071305, i64 4475246129778808, i64 4475542581990776, i64 4475830082081194, i64 4476108982842610, i64 4476379617863426, i64 4476642302795321, i64 4476897336520866, i64 4477145002230339, i64 4477385568415884, i64 4477619289790266, i64 4477846408136804, i64 4478067153096380, i64 4478281742896886, i64 4478490385029917, i64 4478693276879082, i64 4478890606303906, i64 4479082552182886, i64 4479269284918997, i64 4479450966910588, i64 4479627752990372, i64 4479799790834988, i64 4479967221347354, i64 4480130179013872, i64 4480288792238368, i64 4480443183654460, i64 4480593470417939, i64 4480739764480586, i64 4480882172846772, i64 4481020797814010, i64 4481155737198612, i64 4481287084547452, i64 4481414929336784, i64 4481539357158974, i64 4481660449897960, i64 4481778285894165, i64 4481892940099539, i64 4482004484223382, i64 4482112986869492, i64 4482218513665204, i64 4482321127382802, i64 4482420888053758, i64 4482517853076245, i64 4482612077316275, i64 4482703613202871, i64 4482792510817576, i64 4482878817978627, i64 4482962580320076, i64 4483043841366126, i64 4483122642600925, i64 4483199023534056, i64 4483273021761922, i64 4483344673025224, i64 4483414011262724, i64 4483481068661428, i64 4483545875703378, i64 4483608461209170, i64 4483668852378323, i64 4483727074826624, i64 4483783152620564, i64 4483837108308932, i64 4483888962951686, i64 4483938736146144, i64 4483986446050596, i64 4484032109405372, i64 4484075741551420, i64 4484117356446452, i64 4484156966678662, i64 4484194583478081, i64 4484230216725550, i64 4484263874959345, i64 4484295565379450, i64 4484325293849474, i64 4484353064896186, i64 4484378881706674, i64 4484402746123075, i64 4484424658634833, i64 4484444618368474, i64 4484462623074794, i64 4484478669113436, i64 4484492751434740, i64 4484504863558830, i64 4484514997551788, i64 4484523143998833, i64 4484529291974394, i64 4484533429008906, i64 4484535541052219, i64 4484535612433424, i64 4484533625816926, i64 4484529562154580, i64 4484523400633636, i64 4484515118620291, i64 4484504691598554, i64 4484492093104164, i64 4484477294653230, i64 4484460265665252, i64 4484440973380154, i64 4484419382768918, i64 4484395456437370, i64 4484369154522621, i64 4484340434581640, i64 4484309251471359, i64 4484275557219678, i64 4484239300886654, i64 4484200428415112, i64 4484158882469814, i64 4484114602264271, i64 4484067523374160, i64 4484017577536216, i64 4483964692431365, i64 4483908791450714, i64 4483849793442887, i64 4483787612441036, i64 4483722157367660, i64 4483653331715198, i64 4483581033200083, i64 4483505153387764, i64 4483425577285833, i64 4483342182902157, i64 4483254840764470, i64 4483163413397547, i64 4483067754753536, i64 4482967709590562, i64 4482863112794072, i64 4482753788634692, i64 4482639549955636, i64 4482520197281720, i64 4482395517841076, i64 4482265284489409, i64 4482129254525304, i64 4481987168383486, i64 4481838748191074, i64 4481683696169781, i64 4481521692864464, i64 4481352395175570, i64 4481175434169564, i64 4480990412637506, i64 4480796902367134, i64 4480594441088331, i64 4480382529045225, i64 4480160625140311, i64 4479928142586662, i64 4479684443993061, i64 4479428835793398, i64 4479160561915451, i64 4478878796564388, i64 4478582635972392, i64 4478271088936406, i64 4477943065929958, i64 4477597366530538, i64 4477232664848704, i64 4476847492576192, i64 4476440219183781, i64 4476009028690434, i64 4475551892286424, i64 4475066535915646, i64 4474550401693506, i64 4474000601739904, i64 4473413862618200, i64 4472786458058295, i64 4472114126959004, i64 4471391972746494, i64 4470614338917719, i64 4469774653883156, i64 4468865235838896, i64 4467877045039530, i64 4466799366045354, i64 4465619395558397, i64 4464321701199635, i64 4462887501169282, i64 4461293691124341, i64 4459511507635972, i64 4457504658253067, i64 4455226650325010, i64 4452616884242348, i64 4449594783440798, i64 4446050695647666, i64 4441831266659618, i64 4436714892174061, i64 4430368316897338, i64 4422264825074740, i64 4411517007702132, i64 4396496531309976, i64 4373832704204284, i64 4335125104963628, i64 4251099761679434], align 16\n%p = getelementptr inbounds [256 x i64], ptr @data, i64 0, i64 %idx\n%x = load i64, ptr %p, align 8\nret i64 %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#wi_doubleidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>wi_double(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x double] [double 0x3CCF493B7815D979, double 0x3C8B8D0BE3FDF6C6, double 0x3C9250AF3C2C5BB4, double 0x3C957CB938443B61, double 0x3C9801FCE82FA70C, double 0x3C9A230C2E4CD0BC, double 0x3C9C004D2F3861F7, double 0x3C9DAC2F5A747274, double 0x3C9F32482D4CD5C3, double 0x3CA04D32278EBBAD, double 0x3CA0F5053B025D43, double 0x3CA192A697413677, double 0x3CA227A28F7A1AF5, double 0x3CA2B52E3863D880, double 0x3CA33C3FC05791F5, double 0x3CA3BD9EC1A2B12F, double 0x3CA439EF8DFF9B55, double 0x3CA4B1BB363DFEA7, double 0x3CA52575621AD374, double 0x3CA59580A707CE96, double 0x3CA60231CFD97EEA, double 0x3CA66BD261A37C3D, double 0x3CA6D2A292000570, double 0x3CA736DAD346F8A6, double 0x3CA798AD10B32A77, double 0x3CA7F845AD46F543, double 0x3CA855CC53430A77, double 0x3CA8B1649E7B769A, double 0x3CA90B2EA94ECF98, double 0x3CA96347822C1EEA, double 0x3CA9B9C98E38C546, double 0x3CAA0ECCDCA4A72C, double 0x3CAA62676D77CD59, double 0x3CAAB4AD6E101630, double 0x3CAB05B16D136C9C, double 0x3CAB558487427A29, double 0x3CABA4368E529F3A, double 0x3CABF1D62ABF8232, double 0x3CAC3E70F9594EF3, double 0x3CAC8A13A5323B61, double 0x3CACD4C9FE72268B, double 0x3CAD1E9F0E80B748, double 0x3CAD679D29E41F10, double 0x3CADAFCE0023B8C3, double 0x3CADF73AA9F17653, double 0x3CAE3DEBB5D2EDFE, double 0x3CAE83E9337A6F00, double 0x3CAEC93ABDF982CE, double 0x3CAF0DE784F06226, double 0x3CAF51F654D8F688, double 0x3CAF956D9E87D7AE, double 0x3CAFD8537DFA2EAC, double 0x3CB00D56E04234EC, double 0x3CB02E40F5398F9A, double 0x3CB04EEA9E16A5FC, double 0x3CB06F565B72A010, double 0x3CB08F869071F40B, double 0x3CB0AF7D84BC6113, double 0x3CB0CF3D664BCC7F, double 0x3CB0EEC84B16086B, double 0x3CB10E20329515EE, double 0x3CB12D4707310FBE, double 0x3CB14C3E9F8E9141, double 0x3CB16B08BFC4201E, double 0x3CB189A71A78DA34, double 0x3CB1A81B51EE6D88, double 0x3CB1C666F8F82ACB, double 0x3CB1E48B93E0D42E, double 0x3CB2028A9940A09F, double 0x3CB2206572C4C6E9, double 0x3CB23E1D7DE9C31F, double 0x3CB25BB40CA96BFB, double 0x3CB2792A661DD37F, double 0x3CB29681C719D71B, double 0x3CB2B3BB62B82EDA, double 0x3CB2D0D862E1B853, double 0x3CB2EDD9E8CBA98E, double 0x3CB30AC10D6E48D7, double 0x3CB3278EE1F4B930, double 0x3CB3444470265EA1, double 0x3CB360E2BACA52D5, double 0x3CB37D6ABE05586A, double 0x3CB399DD6FB2B264, double 0x3CB3B63BBFB83D03, double 0x3CB3D28698561DE0, double 0x3CB3EEBEDE725A83, double 0x3CB40AE571E09E74, double 0x3CB426FB2DA6745D, double 0x3CB44300E83C30A4, double 0x3CB45EF773CAC75D, double 0x3CB47ADF9E66C336, double 0x3CB496BA32488F2F, double 0x3CB4B287F602415D, double 0x3CB4CE49ACB311DC, double 0x3CB4EA001638A605, double 0x3CB505ABEF5E5562, double 0x3CB5214DF20A8B5A, double 0x3CB53CE6D56A664F, double 0x3CB558774E1BB2C8, double 0x3CB574000E555F78, double 0x3CB58F81C60E8514, double 0x3CB5AAFD23241B59, double 0x3CB5C672D17D733D, double 0x3CB5E1E37B2F8CD3, double 0x3CB5FD4FC89F5E38, double 0x3CB618B860A31FC3, double 0x3CB6341DE8A2B0A2, double 0x3CB64F8104B7260B, double 0x3CB66AE257C99672, double 0x3CB6864283B13137, double 0x3CB6A1A22950B2B1, double 0x3CB6BD01E8B343BB, double 0x3CB6D8626128D352, double 0x3CB6F3C43161F854, double 0x3CB70F27F78B68EB, double 0x3CB72A8E516914C6, double 0x3CB745F7DC70EEDC, double 0x3CB7616535E5731F, double 0x3CB77CD6FAEFF449, double 0x3CB7984DC8BABD93, double 0x3CB7B3CA3C8B1409, double 0x3CB7CF4CF3DB22FB, double 0x3CB7EAD68C73DEE7, double 0x3CB80667A486EA1F, double 0x3CB82200DAC88676, double 0x3CB83DA2CE899F15, double 0x3CB8594E1FD1F5BD, double 0x3CB875036F7A7EC5, double 0x3CB890C35F47F72D, double 0x3CB8AC8E9205C043, double 0x3CB8C865ABA10C9C, double 0x3CB8E44951446A27, double 0x3CB9003A2973B58F, double 0x3CB91C38DC288347, double 0x3CB9384612EF0AFC, double 0x3CB954627903A28A, double 0x3CB9708EBB70D5EE, double 0x3CB98CCB892E2A31, double 0x3CB9A919933F99BF, double 0x3CB9C5798CD5D92C, double 0x3CB9E1EC2B6F7411, double 0x3CB9FE7226FAD24A, double 0x3CBA1B0C39F93692, double 0x3CBA37BB21A2C85B, double 0x3CBA547F9E0BBB88, double 0x3CBA715A724AA9A4, double 0x3CBA8E4C64A0313D, double 0x3CBAAB563E9FF108, double 0x3CBAC878CD5AF5CE, double 0x3CBAE5B4E18BB336, double 0x3CBB030B4FC3A11A, double 0x3CBB207CF09A985B, double 0x3CBB3E0AA0E00C00, double 0x3CBB5BB541CE3D03, double 0x3CBB797DB93F8927, double 0x3CBB9764F1E5F73C, double 0x3CBBB56BDB85256E, double 0x3CBBD3936B2EC0A2, double 0x3CBBF1DC9B81AE83, double 0x3CBC10486CEC16A0, double 0x3CBC2ED7E5F07A2D, double 0x3CBC4D8C136E0D1C, double 0x3CBC6C6608EC8705, double 0x3CBC8B66E0EBA617, double 0x3CBCAA8FBD36A2AB, double 0x3CBCC9E1C73BD690, double 0x3CBCE95E3068E037, double 0x3CBD0906328B8F6E, double 0x3CBD28DB1037EF20, double 0x3CBD48DE1533C647, double 0x3CBD691096E7F123, double 0x3CBD8973F4D7FBA5, double 0x3CBDAA0999206E70, double 0x3CBDCAD2F8FC490E, double 0x3CBDEBD195522E37, double 0x3CBE0D06FB49D21C, double 0x3CBE2E74C4EA46F6, double 0x3CBE501C99C1D188, double 0x3CBE72002F97FE25, double 0x3CBE94214B2ABF0A, double 0x3CBEB681C0F76F08, double 0x3CBED9237610A73A, double 0x3CBEFC086101ECA9, double 0x3CBF1F328AC25321, double 0x3CBF42A40FB74D6D, double 0x3CBF665F20C90168, double 0x3CBF8A6604899782, double 0x3CBFAEBB187122BF, double 0x3CBFD360D22FE785, double 0x3CBFF859C118F60B, double 0x3CC00ED447D3A075, double 0x3CC021A8028FC947, double 0x3CC034A983A902AB, double 0x3CC047DA4E3EF5C7, double 0x3CC05B3BF6ADB37E, double 0x3CC06ED023A72668, double 0x3CC082988F632E17, double 0x3CC0969708E8A254, double 0x3CC0AACD7571C0C4, double 0x3CC0BF3DD1EED448, double 0x3CC0D3EA34AA3D30, double 0x3CC0E8D4CF116593, double 0x3CC0FDFFEFA69FB6, double 0x3CC1136E04207041, double 0x3CC129219BBB5D35, double 0x3CC13F1D69C4096D, double 0x3CC1556448602E3B, double 0x3CC16BF93B9DEEF3, double 0x3CC182DF74D21261, double 0x3CC19A1A564EEBAC, double 0x3CC1B1AD777F2F8E, double 0x3CC1C99CA971A694, double 0x3CC1E1EBFBE4AE39, double 0x3CC1FA9FC2E2D901, double 0x3CC213BC9D04CC81, double 0x3CC22D477A6FD3EE, double 0x3CC24745A4AC9C24, double 0x3CC261BCC77658E0, double 0x3CC27CB2FAA8592E, double 0x3CC2982ECD770E78, double 0x3CC2B437532A0A52, double 0x3CC2D0D43196DB97, double 0x3CC2EE0DB1A978F5, double 0x3CC30BECD256AEEE, double 0x3CC32A7B5E68A4A3, double 0x3CC349C405AE12A3, double 0x3CC369D27A33A840, double 0x3CC38AB39256410A, double 0x3CC3AC7570AE88FA, double 0x3CC3CF27B31704A6, double 0x3CC3F2DBAA60F475, double 0x3CC417A49CB9E5DA, double 0x3CC43D9815545E94, double 0x3CC464CE44A73A15, double 0x3CC48D62759C43BC, double 0x3CC4B7739D6B5A27, double 0x3CC4E3250DCD8902, double 0x3CC5109F53E9AC41, double 0x3CC54011523A7E42, double 0x3CC571B1A94AE41B, double 0x3CC5A5C08B718DD9, double 0x3CC5DC8A243AD0FE, double 0x3CC61669CF861E4C, double 0x3CC653CE7B006AEA, double 0x3CC69540BE9FE5C3, double 0x3CC6DB6B8D09E232, double 0x3CC72728F05F7A34, double 0x3CC7799556090673, double 0x3CC7D42DF4D6CE8C, double 0x3CC839030529F234, double 0x3CC8AB0FBFAA7C14, double 0x3CC92EE0946F4496, double 0x3CC9CBEE014057AB, double 0x3CCA8FDC7894775A, double 0x3CCB981F3878FDB1, double 0x3CCD3BB48209AD33], align 16\n%p = getelementptr inbounds [256 x double], ptr @data, i64 0, i64 %idx\n%x = load double, ptr %p, align 8\nret double %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#fi_doubleidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fi_double(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x double] [double 1.000000e+00, double 0x3FEF446AC979F087, double 0x3FEEB7545B6CA915, double 0x3FEE3F11E027F077, double 0x3FEDD36FA704DE95, double 0x3FED70920657BCF2, double 0x3FED144978A119DC, double 0x3FECBD33A8A72DEB, double 0x3FEC6A5ECEA9787F, double 0x3FEC1B1CD9EEBAEA, double 0x3FEBCEEB4EE1DC82, double 0x3FEB85653A8FF552, double 0x3FEB3E3A8234DD10, double 0x3FEAF92A3F6CE8A2, double 0x3FEAB5FEF17A2504, double 0x3FEA748BD550C9E1, double 0x3FEA34AAFDF5AF0F, double 0x3FE9F63BEE651FD8, double 0x3FE9B9228D240681, double 0x3FE97D4657617AC1, double 0x3FE94291C21B7A47, double 0x3FE908F1BD31714F, double 0x3FE8D0554FE60AA8, double 0x3FE898AD48BADF02, double 0x3FE861EBFC37BCAC, double 0x3FE82C050F56CF6E, double 0x3FE7F6ED4B20E2CB, double 0x3FE7C29A779C6858, double 0x3FE78F033CA0B0D5, double 0x3FE75C1F0770D856, double 0x3FE729E5F43F6D12, double 0x3FE6F850BAEA7AEE, double 0x3FE6C7589E635A89, double 0x3FE696F75E513B2A, double 0x3FE667272A92E323, double 0x3FE637E298550C18, double 0x3FE6092498802665, double 0x3FE5DAE86F4AFF6A, double 0x3FE5AD29ACC85C89, double 0x3FE57FE4264C8D8F, double 0x3FE55313F08D9E46, double 0x3FE526B55A656CD5, double 0x3FE4FAC4E820B667, double 0x3FE4CF3F4F494EC0, double 0x3FE4A42172DC5278, double 0x3FE479685FDF5012, double 0x3FE44F114A493679, double 0x3FE425198A355FE3, double 0x3FE3FB7E99585B82, double 0x3FE3D23E10AF31A3, double 0x3FE3A955A662CD0E, double 0x3FE380C32BDA00D5, double 0x3FE358848BF550E9, double 0x3FE33097C9703A35, double 0x3FE308FAFD6438EF, double 0x3FE2E1AC55EA3BEE, double 0x3FE2BAAA14D7954A, double 0x3FE293F28E93CD15, double 0x3FE26D84290504ED, double 0x3FE2475D5A90DB84, double 0x3FE2217CA92FF7F2, double 0x3FE1FBE0A9929620, double 0x3FE1D687FE549969, double 0x3FE1B171573FD111, double 0x3FE18C9B709B3C50, double 0x3FE16805128639DA, double 0x3FE143AD105EA99C, double 0x3FE11F9248311F38, double 0x3FE0FBB3A2325913, double 0x3FE0D810104142A0, double 0x3FE0B4A68D70D9AE, double 0x3FE091761D995D81, double 0x3FE06E7DCCF03C36, double 0x3FE04BBCAFA63F2E, double 0x3FE02931E18B822A, double 0x3FE006DC85B8CAC4, double 0x3FDFC9778C7BBDA1, double 0x3FDF859DA7A900CA, double 0x3FDF4229CB2F7AF3, double 0x3FDEFF1A717E8F95, double 0x3FDEBC6E20BD1F54, double 0x3FDE7A236A4EC3C5, double 0x3FDE3838EA5F9B85, double 0x3FDDF6AD47763A09, double 0x3FDDB57F320B56B1, double 0x3FDD74AD6426DE33, double 0x3FDD3436A1021080, double 0x3FDCF419B4AE5B6D, double 0x3FDCB45573C0A848, double 0x3FDC74E8BB00D7C7, double 0x3FDC35D26F1D2CB8, double 0x3FDBF7117C616A17, double 0x3FDBB8A4D6716D91, double 0x3FDB7A8B7807131B, double 0x3FDB3CC462B331CA, double 0x3FDAFF4E9EA18552, double 0x3FDAC2293A5F5A9E, double 0x3FDA85534AA4D880, double 0x3FDA48CBEA20C04D, double 0x3FDA0C923946843E, double 0x3FD9D0A55E1E93DF, double 0x3FD995048418C0C6, double 0x3FD959AEDBE09F93, double 0x3FD91EA39B33CB17, double 0x3FD8E3E1FCB9F115, double 0x3FD8A9693FDE9188, double 0x3FD86F38A8AC5AB6, double 0x3FD8354F7FAA0DD9, double 0x3FD7FBAD11B8D911, double 0x3FD7C250AFF414B0, double 0x3FD78939AF9252EB, double 0x3FD7506769C7B1ED, double 0x3FD717D93BA9614C, double 0x3FD6DF8E86124CAA, double 0x3FD6A786AD88DE21, double 0x3FD66FC11A25CBE2, double 0x3FD6383D377BE515, double 0x3FD600FA7480D2C8, double 0x3FD5C9F84376C244, double 0x3FD5933619D6EEBE, double 0x3FD55CB3703D0100, double 0x3FD5266FC2533BED, double 0x3FD4F06A8EBF6D92, double 0x3FD4BAA357109CA2, double 0x3FD485199FAD6AD4, double 0x3FD44FCCEFC324FE, double 0x3FD41ABCD1357A19, double 0x3FD3E5E8D08ED2DB, double 0x3FD3B1507CF143AE, double 0x3FD37CF368081379, double 0x3FD348D125F9D19E, double 0x3FD314E94D5AF62F, double 0x3FD2E13B77210766, double 0x3FD2ADC73E963FDD, double 0x3FD27A8C414DB11E, double 0x3FD2478A1F17DE89, double 0x3FD214C079F7CC9E, double 0x3FD1E22EF6188116, double 0x3FD1AFD539C2F050, double 0x3FD17DB2ED5454E8, double 0x3FD14BC7BB34EE67, double 0x3FD11A134FCF2423, double 0x3FD0E895598709C4, double 0x3FD0B74D88B242DA, double 0x3FD0863B8F904336, double 0x3FD0555F2242E9D9, double 0x3FD024B7F6C7747E, double 0x3FCFE88B89DF93C5, double 0x3FCF88108CB83235, double 0x3FCF27FE6CE998D2, double 0x3FCEC854A4C99C44, double 0x3FCE6912B2283CDD, double 0x3FCE0A3816457184, double 0x3FCDABC455C7900A, double 0x3FCD4DB6F8B2514F, double 0x3FCCF00F8A5E6FCC, double 0x3FCC92CD9971DF53, double 0x3FCC35F0B7D89D47, double 0x3FCBD9787ABE18A1, double 0x3FCB7D647A8731AA, double 0x3FCB21B452CCD13A, double 0x3FCAC667A2571807, double 0x3FCA6B7E0B19267E, double 0x3FCA10F7322D7E3D, double 0x3FC9B6D2BFD2FE5A, double 0x3FC95D105F6A7C27, double 0x3FC903AFBF74FA69, double 0x3FC8AAB09192815B, double 0x3FC852128A819A38, double 0x3FC7F9D5621F7175, double 0x3FC7A1F8D368A323, double 0x3FC74A7C9C7AB5A6, double 0x3FC6F3607E964716, double 0x3FC69CA43E21F25C, double 0x3FC64647A2ADF19C, double 0x3FC5F04A76F883F9, double 0x3FC59AAC88F31D6C, double 0x3FC5456DA9C86835, double 0x3FC4F08DADE31FC1, double 0x3FC49C0C6CF5CE2D, double 0x3FC447E9C20375D5, double 0x3FC3F4258B6931AE, double 0x3FC3A0BFAAE8D7EE, double 0x3FC34DB805B4AB88, double 0x3FC2FB0E847C2A65, double 0x3FC2A8C3137A071A, double 0x3FC256D5A2835EB7, double 0x3FC2054625183C34, double 0x3FC1B41492757D42, double 0x3FC16340E5A82D63, double 0x3FC112CB1DA26EB9, double 0x3FC0C2B33D5209BA, double 0x3FC072F94BB8BF85, double 0x3FC0239D54067D2A, double 0x3FBFA93ECB6B222C, double 0x3FBF0BFF29520E1C, double 0x3FBE6F7BF29AA54B, double 0x3FBDD3B56176E88F, double 0x3FBD38ABB9BD91E5, double 0x3FBC9E5F493B740A, double 0x3FBC04D0680B1015, double 0x3FBB6BFF78F2E233, double 0x3FBAD3ECE9CAF633, double 0x3FBA3C9933EA6286, double 0x3FB9A604DC9D5B19, double 0x3FB9103075A4A0AB, double 0x3FB87B1C9DBF2852, double 0x3FB7E6CA013EEFD6, double 0x3FB753395AAA1176, double 0x3FB6C06B73694A4C, double 0x3FB62E6124854D18, double 0x3FB59D1B577466A4, double 0x3FB50C9B06FA2BAE, double 0x3FB47CE1401B2213, double 0x3FB3EDEF23269A86, double 0x3FB35FC5E4D93E70, double 0x3FB2D266CF9B3111, double 0x3FB245D344DD0D91, double 0x3FB1BA0CBE97897D, double 0x3FB12F14D0F2179D, double 0x3FB0A4ED2C159625, double 0x3FB01B979E30E497, double 0x3FAF262C2B6C6E35, double 0x3FAE16D547B25181, double 0x3FAD092EFEADF162, double 0x3FABFD3E0F282A2C, double 0x3FAAF30790385F70, double 0x3FA9EA90F9295563, double 0x3FA8E3E02A68B5AB, double 0x3FA7DEFB77AF271E, double 0x3FA6DBE9B398D064, double 0x3FA5DAB23CF2ADD4, double 0x3FA4DB5D0E11275D, double 0x3FA3DDF2CE98EECB, double 0x3FA2E27CE83DF497, double 0x3FA1E9059F1F6ABC, double 0x3FA0F1982E968011, double 0x3F9FF881D718A5C4, double 0x3F9E121ADB828C75, double 0x3F9C301983CD091A, double 0x3F9A529F4E22EBF8, double 0x3F9879D1B600C10A, double 0x3F96A5DAF40BBF82, double 0x3F94D6EAF2FBB064, double 0x3F930D388DAB5E13, double 0x3F91490334603012, double 0x3F8F152A4F72DD49, double 0x3F8BA48D274F8FAC, double 0x3F8841040D8DA478, double 0x3F84EB96421ACFE0, double 0x3F81A59229952F92, double 0x3F7CE160F8EC6837, double 0x3F769EA8D90CB85D, double 0x3F708A1F03B0B1FD, double 0x3F655F9F43C1B067, double 0x3F54A605B6B9F70F], align 16\n%p = getelementptr inbounds [256 x double], ptr @data, i64 0, i64 %idx\n%x = load double, ptr %p, align 8\nret double %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#ki_floatidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ki_float(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x i32] [i32 7838188, i32 0, i32 6309365, i32 7150248, i32 7507892, i32 7705263, i32 7830108, i32 7916088, i32 7978859, i32 8026677, i32 8064303, i32 8094676, i32 8119703, i32 8140680, i32 8158515, i32 8173862, i32 8187208, i32 8198920, i32 8209279, i32 8218507, i32 8226779, i32 8234236, i32 8240993, i32 8247143, i32 8252765, i32 8257923, i32 8262673, i32 8267060, i32 8271125, i32 8274901, i32 8278419, i32 8281703, i32 8284777, i32 8287658, i32 8290366, i32 8292914, i32 8295317, i32 8297586, i32 8299733, i32 8301766, i32 8303694, i32 8305525, i32 8307267, i32 8308924, i32 8310504, i32 8312012, i32 8313451, i32 8314827, i32 8316143, i32 8317404, i32 8318612, i32 8319771, i32 8320884, i32 8321952, i32 8322979, i32 8323967, i32 8324918, i32 8325834, i32 8326716, i32 8327567, i32 8328388, i32 8329180, i32 8329946, i32 8330685, i32 8331399, i32 8332090, i32 8332759, i32 8333405, i32 8334032, i32 8334638, i32 8335226, i32 8335795, i32 8336348, i32 8336883, i32 8337403, i32 8337907, i32 8338396, i32 8338871, i32 8339332, i32 8339781, i32 8340216, i32 8340639, i32 8341050, i32 8341450, i32 8341838, i32 8342216, i32 8342584, i32 8342941, i32 8343289, i32 8343628, i32 8343957, i32 8344277, i32 8344589, i32 8344893, i32 8345188, i32 8345476, i32 8345756, i32 8346028, i32 8346293, i32 8346552, i32 8346803, i32 8347048, i32 8347286, i32 8347518, i32 8347743, i32 8347963, i32 8348176, i32 8348384, i32 8348586, i32 8348783, i32 8348974, i32 8349160, i32 8349340, i32 8349516, i32 8349686, i32 8349852, i32 8350012, i32 8350169, i32 8350320, i32 8350467, i32 8350609, i32 8350747, i32 8350880, i32 8351009, i32 8351134, i32 8351255, i32 8351372, i32 8351484, i32 8351592, i32 8351697, i32 8351797, i32 8351894, i32 8351987, i32 8352076, i32 8352161, i32 8352242, i32 8352319, i32 8352393, i32 8352463, i32 8352530, i32 8352592, i32 8352651, i32 8352707, i32 8352758, i32 8352807, i32 8352851, i32 8352892, i32 8352929, i32 8352963, i32 8352992, i32 8353019, i32 8353041, i32 8353060, i32 8353075, i32 8353087, i32 8353094, i32 8353098, i32 8353099, i32 8353095, i32 8353087, i32 8353076, i32 8353060, i32 8353041, i32 8353017, i32 8352990, i32 8352958, i32 8352922, i32 8352882, i32 8352837, i32 8352788, i32 8352735, i32 8352677, i32 8352614, i32 8352547, i32 8352474, i32 8352397, i32 8352314, i32 8352227, i32 8352134, i32 8352035, i32 8351931, i32 8351821, i32 8351705, i32 8351583, i32 8351455, i32 8351320, i32 8351179, i32 8351031, i32 8350876, i32 8350713, i32 8350543, i32 8350364, i32 8350178, i32 8349983, i32 8349780, i32 8349567, i32 8349345, i32 8349112, i32 8348870, i32 8348616, i32 8348352, i32 8348075, i32 8347786, i32 8347485, i32 8347169, i32 8346840, i32 8346495, i32 8346135, i32 8345758, i32 8345363, i32 8344949, i32 8344516, i32 8344062, i32 8343586, i32 8343087, i32 8342562, i32 8342010, i32 8341430, i32 8340819, i32 8340175, i32 8339496, i32 8338778, i32 8338020, i32 8337217, i32 8336365, i32 8335461, i32 8334500, i32 8333476, i32 8332383, i32 8331214, i32 8329962, i32 8328617, i32 8327168, i32 8325604, i32 8323910, i32 8322070, i32 8320062, i32 8317864, i32 8315447, i32 8312776, i32 8309807, i32 8306487, i32 8302749, i32 8298506, i32 8293645, i32 8288016, i32 8281415, i32 8273555, i32 8264025, i32 8252204, i32 8237110, i32 8217091, i32 8189113, i32 8146898, i32 8074800, i32 7918290], align 16\n%p = getelementptr inbounds [256 x i32], ptr @data, i64 0, i64 %idx\n%x = load i32, ptr %p, align 8\nret i32 %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#wi_floatidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>wi_float(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x float] [float 0x3E9F493B80000000, float 0x3E5B8D0BE0000000, float 0x3E6250AF40000000, float 0x3E657CB940000000, float 0x3E6801FCE0000000, float 0x3E6A230C20000000, float 0x3E6C004D20000000, float 0x3E6DAC2F60000000, float 0x3E6F324820000000, float 0x3E704D3220000000, float 0x3E70F50540000000, float 0x3E7192A6A0000000, float 0x3E7227A280000000, float 0x3E72B52E40000000, float 0x3E733C3FC0000000, float 0x3E73BD9EC0000000, float 0x3E7439EF80000000, float 0x3E74B1BB40000000, float 0x3E75257560000000, float 0x3E759580A0000000, float 0x3E760231C0000000, float 0x3E766BD260000000, float 0x3E76D2A2A0000000, float 0x3E7736DAE0000000, float 0x3E7798AD20000000, float 0x3E77F845A0000000, float 0x3E7855CC60000000, float 0x3E78B164A0000000, float 0x3E790B2EA0000000, float 0x3E79634780000000, float 0x3E79B9C980000000, float 0x3E7A0ECCE0000000, float 0x3E7A626760000000, float 0x3E7AB4AD60000000, float 0x3E7B05B160000000, float 0x3E7B558480000000, float 0x3E7BA43680000000, float 0x3E7BF1D620000000, float 0x3E7C3E7100000000, float 0x3E7C8A13A0000000, float 0x3E7CD4CA00000000, float 0x3E7D1E9F00000000, float 0x3E7D679D20000000, float 0x3E7DAFCE00000000, float 0x3E7DF73AA0000000, float 0x3E7E3DEBC0000000, float 0x3E7E83E940000000, float 0x3E7EC93AC0000000, float 0x3E7F0DE780000000, float 0x3E7F51F660000000, float 0x3E7F956DA0000000, float 0x3E7FD85380000000, float 0x3E800D56E0000000, float 0x3E802E4100000000, float 0x3E804EEAA0000000, float 0x3E806F5660000000, float 0x3E808F86A0000000, float 0x3E80AF7D80000000, float 0x3E80CF3D60000000, float 0x3E80EEC840000000, float 0x3E810E2040000000, float 0x3E812D4700000000, float 0x3E814C3EA0000000, float 0x3E816B08C0000000, float 0x3E8189A720000000, float 0x3E81A81B60000000, float 0x3E81C66700000000, float 0x3E81E48BA0000000, float 0x3E82028AA0000000, float 0x3E82206580000000, float 0x3E823E1D80000000, float 0x3E825BB400000000, float 0x3E82792A60000000, float 0x3E829681C0000000, float 0x3E82B3BB60000000, float 0x3E82D0D860000000, float 0x3E82EDD9E0000000, float 0x3E830AC100000000, float 0x3E83278EE0000000, float 0x3E83444480000000, float 0x3E8360E2C0000000, float 0x3E837D6AC0000000, float 0x3E8399DD60000000, float 0x3E83B63BC0000000, float 0x3E83D286A0000000, float 0x3E83EEBEE0000000, float 0x3E840AE580000000, float 0x3E8426FB20000000, float 0x3E844300E0000000, float 0x3E845EF780000000, float 0x3E847ADFA0000000, float 0x3E8496BA40000000, float 0x3E84B28800000000, float 0x3E84CE49A0000000, float 0x3E84EA0020000000, float 0x3E8505ABE0000000, float 0x3E85214E00000000, float 0x3E853CE6E0000000, float 0x3E85587740000000, float 0x3E85740000000000, float 0x3E858F81C0000000, float 0x3E85AAFD20000000, float 0x3E85C672E0000000, float 0x3E85E1E380000000, float 0x3E85FD4FC0000000, float 0x3E8618B860000000, float 0x3E86341DE0000000, float 0x3E864F8100000000, float 0x3E866AE260000000, float 0x3E86864280000000, float 0x3E86A1A220000000, float 0x3E86BD01E0000000, float 0x3E86D86260000000, float 0x3E86F3C440000000, float 0x3E870F2800000000, float 0x3E872A8E60000000, float 0x3E8745F7E0000000, float 0x3E87616540000000, float 0x3E877CD700000000, float 0x3E87984DC0000000, float 0x3E87B3CA40000000, float 0x3E87CF4D00000000, float 0x3E87EAD680000000, float 0x3E880667A0000000, float 0x3E882200E0000000, float 0x3E883DA2C0000000, float 0x3E88594E20000000, float 0x3E88750360000000, float 0x3E8890C360000000, float 0x3E88AC8EA0000000, float 0x3E88C865A0000000, float 0x3E88E44960000000, float 0x3E89003A20000000, float 0x3E891C38E0000000, float 0x3E89384620000000, float 0x3E89546280000000, float 0x3E89708EC0000000, float 0x3E898CCB80000000, float 0x3E89A919A0000000, float 0x3E89C57980000000, float 0x3E89E1EC20000000, float 0x3E89FE7220000000, float 0x3E8A1B0C40000000, float 0x3E8A37BB20000000, float 0x3E8A547FA0000000, float 0x3E8A715A80000000, float 0x3E8A8E4C60000000, float 0x3E8AAB5640000000, float 0x3E8AC878C0000000, float 0x3E8AE5B4E0000000, float 0x3E8B030B40000000, float 0x3E8B207D00000000, float 0x3E8B3E0AA0000000, float 0x3E8B5BB540000000, float 0x3E8B797DC0000000, float 0x3E8B976500000000, float 0x3E8BB56BE0000000, float 0x3E8BD39360000000, float 0x3E8BF1DCA0000000, float 0x3E8C104860000000, float 0x3E8C2ED7E0000000, float 0x3E8C4D8C20000000, float 0x3E8C6C6600000000, float 0x3E8C8B66E0000000, float 0x3E8CAA8FC0000000, float 0x3E8CC9E1C0000000, float 0x3E8CE95E40000000, float 0x3E8D090640000000, float 0x3E8D28DB20000000, float 0x3E8D48DE20000000, float 0x3E8D6910A0000000, float 0x3E8D897400000000, float 0x3E8DAA09A0000000, float 0x3E8DCAD300000000, float 0x3E8DEBD1A0000000, float 0x3E8E0D0700000000, float 0x3E8E2E74C0000000, float 0x3E8E501CA0000000, float 0x3E8E720020000000, float 0x3E8E942140000000, float 0x3E8EB681C0000000, float 0x3E8ED92380000000, float 0x3E8EFC0860000000, float 0x3E8F1F3280000000, float 0x3E8F42A400000000, float 0x3E8F665F20000000, float 0x3E8F8A6600000000, float 0x3E8FAEBB20000000, float 0x3E8FD360E0000000, float 0x3E8FF859C0000000, float 0x3E900ED440000000, float 0x3E9021A800000000, float 0x3E9034A980000000, float 0x3E9047DA40000000, float 0x3E905B3C00000000, float 0x3E906ED020000000, float 0x3E90829880000000, float 0x3E90969700000000, float 0x3E90AACD80000000, float 0x3E90BF3DE0000000, float 0x3E90D3EA40000000, float 0x3E90E8D4C0000000, float 0x3E90FDFFE0000000, float 0x3E91136E00000000, float 0x3E912921A0000000, float 0x3E913F1D60000000, float 0x3E91556440000000, float 0x3E916BF940000000, float 0x3E9182DF80000000, float 0x3E919A1A60000000, float 0x3E91B1AD80000000, float 0x3E91C99CA0000000, float 0x3E91E1EC00000000, float 0x3E91FA9FC0000000, float 0x3E9213BCA0000000, float 0x3E922D4780000000, float 0x3E924745A0000000, float 0x3E9261BCC0000000, float 0x3E927CB300000000, float 0x3E92982EC0000000, float 0x3E92B43760000000, float 0x3E92D0D440000000, float 0x3E92EE0DC0000000, float 0x3E930BECE0000000, float 0x3E932A7B60000000, float 0x3E9349C400000000, float 0x3E9369D280000000, float 0x3E938AB3A0000000, float 0x3E93AC7580000000, float 0x3E93CF27C0000000, float 0x3E93F2DBA0000000, float 0x3E9417A4A0000000, float 0x3E943D9820000000, float 0x3E9464CE40000000, float 0x3E948D6280000000, float 0x3E94B773A0000000, float 0x3E94E32500000000, float 0x3E95109F60000000, float 0x3E95401160000000, float 0x3E9571B1A0000000, float 0x3E95A5C080000000, float 0x3E95DC8A20000000, float 0x3E961669C0000000, float 0x3E9653CE80000000, float 0x3E969540C0000000, float 0x3E96DB6B80000000, float 0x3E97272900000000, float 0x3E97799560000000, float 0x3E97D42E00000000, float 0x3E98390300000000, float 0x3E98AB0FC0000000, float 0x3E992EE0A0000000, float 0x3E99CBEE00000000, float 0x3E9A8FDC80000000, float 0x3E9B981F40000000, float 0x3E9D3BB480000000], align 16\n%p = getelementptr inbounds [256 x float], ptr @data, i64 0, i64 %idx\n%x = load float, ptr %p, align 8\nret float %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#fi_floatidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fi_float(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x float] [float 1.000000e+00, float 0x3FEF446AC0000000, float 0x3FEEB75460000000, float 0x3FEE3F11E0000000, float 0x3FEDD36FA0000000, float 0x3FED709200000000, float 0x3FED144980000000, float 0x3FECBD33A0000000, float 0x3FEC6A5EC0000000, float 0x3FEC1B1CE0000000, float 0x3FEBCEEB40000000, float 0x3FEB856540000000, float 0x3FEB3E3A80000000, float 0x3FEAF92A40000000, float 0x3FEAB5FF00000000, float 0x3FEA748BE0000000, float 0x3FEA34AB00000000, float 0x3FE9F63BE0000000, float 0x3FE9B92280000000, float 0x3FE97D4660000000, float 0x3FE94291C0000000, float 0x3FE908F1C0000000, float 0x3FE8D05540000000, float 0x3FE898AD40000000, float 0x3FE861EC00000000, float 0x3FE82C0500000000, float 0x3FE7F6ED40000000, float 0x3FE7C29A80000000, float 0x3FE78F0340000000, float 0x3FE75C1F00000000, float 0x3FE729E600000000, float 0x3FE6F850C0000000, float 0x3FE6C758A0000000, float 0x3FE696F760000000, float 0x3FE6672720000000, float 0x3FE637E2A0000000, float 0x3FE60924A0000000, float 0x3FE5DAE860000000, float 0x3FE5AD29A0000000, float 0x3FE57FE420000000, float 0x3FE5531400000000, float 0x3FE526B560000000, float 0x3FE4FAC4E0000000, float 0x3FE4CF3F40000000, float 0x3FE4A42180000000, float 0x3FE4796860000000, float 0x3FE44F1140000000, float 0x3FE4251980000000, float 0x3FE3FB7EA0000000, float 0x3FE3D23E20000000, float 0x3FE3A955A0000000, float 0x3FE380C320000000, float 0x3FE3588480000000, float 0x3FE33097C0000000, float 0x3FE308FB00000000, float 0x3FE2E1AC60000000, float 0x3FE2BAAA20000000, float 0x3FE293F280000000, float 0x3FE26D8420000000, float 0x3FE2475D60000000, float 0x3FE2217CA0000000, float 0x3FE1FBE0A0000000, float 0x3FE1D68800000000, float 0x3FE1B17160000000, float 0x3FE18C9B80000000, float 0x3FE1680520000000, float 0x3FE143AD20000000, float 0x3FE11F9240000000, float 0x3FE0FBB3A0000000, float 0x3FE0D81020000000, float 0x3FE0B4A680000000, float 0x3FE0917620000000, float 0x3FE06E7DC0000000, float 0x3FE04BBCA0000000, float 0x3FE02931E0000000, float 0x3FE006DC80000000, float 0x3FDFC97780000000, float 0x3FDF859DA0000000, float 0x3FDF4229C0000000, float 0x3FDEFF1A80000000, float 0x3FDEBC6E20000000, float 0x3FDE7A2360000000, float 0x3FDE3838E0000000, float 0x3FDDF6AD40000000, float 0x3FDDB57F40000000, float 0x3FDD74AD60000000, float 0x3FDD3436A0000000, float 0x3FDCF419C0000000, float 0x3FDCB45580000000, float 0x3FDC74E8C0000000, float 0x3FDC35D260000000, float 0x3FDBF71180000000, float 0x3FDBB8A4E0000000, float 0x3FDB7A8B80000000, float 0x3FDB3CC460000000, float 0x3FDAFF4EA0000000, float 0x3FDAC22940000000, float 0x3FDA855340000000, float 0x3FDA48CBE0000000, float 0x3FDA0C9240000000, float 0x3FD9D0A560000000, float 0x3FD9950480000000, float 0x3FD959AEE0000000, float 0x3FD91EA3A0000000, float 0x3FD8E3E200000000, float 0x3FD8A96940000000, float 0x3FD86F38A0000000, float 0x3FD8354F80000000, float 0x3FD7FBAD20000000, float 0x3FD7C250A0000000, float 0x3FD78939A0000000, float 0x3FD7506760000000, float 0x3FD717D940000000, float 0x3FD6DF8E80000000, float 0x3FD6A786A0000000, float 0x3FD66FC120000000, float 0x3FD6383D40000000, float 0x3FD600FA80000000, float 0x3FD5C9F840000000, float 0x3FD5933620000000, float 0x3FD55CB380000000, float 0x3FD5266FC0000000, float 0x3FD4F06A80000000, float 0x3FD4BAA360000000, float 0x3FD48519A0000000, float 0x3FD44FCCE0000000, float 0x3FD41ABCE0000000, float 0x3FD3E5E8E0000000, float 0x3FD3B15080000000, float 0x3FD37CF360000000, float 0x3FD348D120000000, float 0x3FD314E940000000, float 0x3FD2E13B80000000, float 0x3FD2ADC740000000, float 0x3FD27A8C40000000, float 0x3FD2478A20000000, float 0x3FD214C080000000, float 0x3FD1E22F00000000, float 0x3FD1AFD540000000, float 0x3FD17DB2E0000000, float 0x3FD14BC7C0000000, float 0x3FD11A1340000000, float 0x3FD0E89560000000, float 0x3FD0B74D80000000, float 0x3FD0863B80000000, float 0x3FD0555F20000000, float 0x3FD024B800000000, float 0x3FCFE88B80000000, float 0x3FCF881080000000, float 0x3FCF27FE60000000, float 0x3FCEC854A0000000, float 0x3FCE6912C0000000, float 0x3FCE0A3820000000, float 0x3FCDABC460000000, float 0x3FCD4DB700000000, float 0x3FCCF00F80000000, float 0x3FCC92CDA0000000, float 0x3FCC35F0C0000000, float 0x3FCBD97880000000, float 0x3FCB7D6480000000, float 0x3FCB21B460000000, float 0x3FCAC667A0000000, float 0x3FCA6B7E00000000, float 0x3FCA10F740000000, float 0x3FC9B6D2C0000000, float 0x3FC95D1060000000, float 0x3FC903AFC0000000, float 0x3FC8AAB0A0000000, float 0x3FC8521280000000, float 0x3FC7F9D560000000, float 0x3FC7A1F8E0000000, float 0x3FC74A7CA0000000, float 0x3FC6F36080000000, float 0x3FC69CA440000000, float 0x3FC64647A0000000, float 0x3FC5F04A80000000, float 0x3FC59AAC80000000, float 0x3FC5456DA0000000, float 0x3FC4F08DA0000000, float 0x3FC49C0C60000000, float 0x3FC447E9C0000000, float 0x3FC3F42580000000, float 0x3FC3A0BFA0000000, float 0x3FC34DB800000000, float 0x3FC2FB0E80000000, float 0x3FC2A8C320000000, float 0x3FC256D5A0000000, float 0x3FC2054620000000, float 0x3FC1B414A0000000, float 0x3FC16340E0000000, float 0x3FC112CB20000000, float 0x3FC0C2B340000000, float 0x3FC072F940000000, float 0x3FC0239D60000000, float 0x3FBFA93EC0000000, float 0x3FBF0BFF20000000, float 0x3FBE6F7C00000000, float 0x3FBDD3B560000000, float 0x3FBD38ABC0000000, float 0x3FBC9E5F40000000, float 0x3FBC04D060000000, float 0x3FBB6BFF80000000, float 0x3FBAD3ECE0000000, float 0x3FBA3C9940000000, float 0x3FB9A604E0000000, float 0x3FB9103080000000, float 0x3FB87B1CA0000000, float 0x3FB7E6CA00000000, float 0x3FB7533960000000, float 0x3FB6C06B80000000, float 0x3FB62E6120000000, float 0x3FB59D1B60000000, float 0x3FB50C9B00000000, float 0x3FB47CE140000000, float 0x3FB3EDEF20000000, float 0x3FB35FC5E0000000, float 0x3FB2D266C0000000, float 0x3FB245D340000000, float 0x3FB1BA0CC0000000, float 0x3FB12F14E0000000, float 0x3FB0A4ED20000000, float 0x3FB01B97A0000000, float 0x3FAF262C20000000, float 0x3FAE16D540000000, float 0x3FAD092F00000000, float 0x3FABFD3E00000000, float 0x3FAAF307A0000000, float 0x3FA9EA9100000000, float 0x3FA8E3E020000000, float 0x3FA7DEFB80000000, float 0x3FA6DBE9C0000000, float 0x3FA5DAB240000000, float 0x3FA4DB5D00000000, float 0x3FA3DDF2C0000000, float 0x3FA2E27CE0000000, float 0x3FA1E905A0000000, float 0x3FA0F19820000000, float 0x3F9FF881E0000000, float 0x3F9E121AE0000000, float 0x3F9C301980000000, float 0x3F9A529F40000000, float 0x3F9879D1C0000000, float 0x3F96A5DB00000000, float 0x3F94D6EB00000000, float 0x3F930D3880000000, float 0x3F91490340000000, float 0x3F8F152A40000000, float 0x3F8BA48D20000000, float 0x3F88410400000000, float 0x3F84EB9640000000, float 0x3F81A59220000000, float 0x3F7CE16100000000, float 0x3F769EA8E0000000, float 0x3F708A1F00000000, float 0x3F655F9F40000000, float 0x3F54A605C0000000], align 16\n%p = getelementptr inbounds [256 x float], ptr @data, i64 0, i64 %idx\n%x = load float, ptr %p, align 8\nret float %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#ke_doubleidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ke_double(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x i64] [i64 7971545857431494, i64 0, i64 5485857970336126, i64 6877400373607440, i64 7489560515621038, i64 7829793950745724, i64 8045251395085594, i64 8193552821270898, i64 8301707212298418, i64 8384003209374832, i64 8448689755168200, i64 8500854585063478, i64 8543802742323106, i64 8579772857648236, i64 8610334328270398, i64 8636619566280862, i64 8659465946817878, i64 8679505875409358, i64 8697225801520776, i64 8713005977443536, i64 8727147906454692, i64 8739893704890038, i64 8751440024696698, i64 8761948238062960, i64 8771552003860596, i64 8780362968290610, i64 8788475114930438, i64 8795968123070796, i64 8802909988292858, i64 8809359087581710, i64 8815365821575970, i64 8820973931588800, i64 8826221564107158, i64 8831142137483404, i64 8835765052397426, i64 8840116277974648, i64 8844218838221542, i64 8848093218006260, i64 8851757703688506, i64 8855228670347734, i64 8858520825126080, i64 8861647414312948, i64 8864620400320394, i64 8867450613535032, i64 8870147883110754, i64 8872721150032146, i64 8875178565190242, i64 8877527574738170, i64 8879774994610604, i64 8881927075778634, i64 8883989561556502, i64 8885967738067168, i64 8887866478800856, i64 8889690284057818, i64 8891443315947666, i64 8893129429518482, i64 8894752200505984, i64 8896314950123264, i64 8897820767252858, i64 8899272528353282, i64 8900672915349966, i64 8902024431744704, i64 8903329417147192, i64 8904590060406012, i64 8905808411494018, i64 8906986392283810, i64 8908125806332284, i64 8909228347778946, i64 8910295609450180, i64 8911329090250868, i64 8912330201915374, i64 8913300275181656, i64 8914240565445170, i64 8915152257942916, i64 8916036472512488, i64 8916894267966144, i64 8917726646115692, i64 8918534555480190, i64 8919318894705170, i64 8920080515719156, i64 8920820226650618, i64 8921538794526266, i64 8922236947769418, i64 8922915378515480, i64 8923574744759820, i64 8924215672351958, i64 8924838756848636, i64 8925444565237162, i64 8926033637539416, i64 8926606488305930, i64 8927163608008600, i64 8927705464339880, i64 8928232503425544, i64 8928745150957558, i64 8929243813252980, i64 8929728878244356, i64 8930200716406566, i64 8930659681624710, i64 8931106112007190, i64 8931540330647876, i64 8931962646340834, i64 8932373354250910, i64 8932772736543124, i64 8933161062973652, i64 8933538591444894, i64 8933905568527004, i64 8934262229948010, i64 8934608801054528, i64 8934945497244894, i64 8935272524376414, i64 8935590079148328, i64 8935898349461876, i64 8936197514758882, i64 8936487746340036, i64 8936769207664048, i64 8937042054628744, i64 8937306435835058, i64 8937562492834854, i64 8937810360363402, i64 8938050166557284, i64 8938282033158466, i64 8938506075705162, i64 8938722403710132, i64 8938931120826946, i64 8939132325004766, i64 8939326108632062, i64 8939512558669762, i64 8939691756774158, i64 8939863779409990, i64 8940028697953972, i64 8940186578789100, i64 8940337483389966, i64 8940481468399302, i64 8940618585695992, i64 8940748882454662, i64 8940872401197050, i64 8940989179835208, i64 8941099251706688, i64 8941202645601704, i64 8941299385782368, i64 8941389491993960, i64 8941472979468230, i64 8941549858918698, i64 8941620136527848, i64 8941683813926148, i64 8941740888162738, i64 8941791351667640, i64 8941835192205302, i64 8941872392819226, i64 8941902931767472, i64 8941926782448690, i64 8941943913318396, i64 8941954287795084, i64 8941957864155806, i64 8941954595420724, i64 8941944429226144, i64 8941927307685492, i64 8941903167237602, i64 8941871938481652, i64 8941833545998016, i64 8941787908154234, i64 8941734936895206, i64 8941674537516674, i64 8941606608420918, i64 8941531040853536, i64 8941447718620056, i64 8941356517781006, i64 8941257306323958, i64 8941149943810914, i64 8941034280999228, i64 8940910159434164, i64 8940777411010892, i64 8940635857503634, i64 8940485310059376, i64 8940325568653336, i64 8940156421503112, i64 8939977644438114, i64 8939789000220574, i64 8939590237814000, i64 8939381091594596, i64 8939161280500638, i64 8938930507114326, i64 8938688456670012, i64 8938434795982096, i64 8938169172285110, i64 8937891211977748, i64 8937600519261604, i64 8937296674664432, i64 8936979233436516, i64 8936647723807416, i64 8936301645088910, i64 8935940465608202, i64 8935563620453574, i64 8935170509012442, i64 8934760492279316, i64 8934332889908232, i64 8933886976981030, i64 8933421980459034, i64 8932937075281380, i64 8932431380068266, i64 8931903952381602, i64 8931353783488908, i64 8930779792568492, i64 8930180820284952, i64 8929555621653500, i64 8928902858099222, i64 8928221088602964, i64 8927508759808348, i64 8926764194944404, i64 8925985581394242, i64 8925170956711904, i64 8924318192855506, i64 8923424978364230, i64 8922488798157886, i64 8921506910578770, i64 8920476321224196, i64 8919393753031106, i64 8918255611967910, i64 8917057947558148, i64 8915796407299442, i64 8914466183841290, i64 8913061953535784, i64 8911577804662434, i64 8910007153233212, i64 8908342643782164, i64 8906576031902208, i64 8904698044465300, i64 8902698212389652, i64 8900564669414922, i64 8898283908495804, i64 8895840484961220, i64 8893216652275640, i64 8890391911743352, i64 8887342451323378, i64 8884040440144924, i64 8880453133239800, i64 8876541723776518, i64 8872259855113102, i64 8867551668208538, i64 8862349204777254, i64 8856568902200012, i64 8850106784293916, i64 8842831740745002, i64 8834575940248166, i64 8825120832349124, i64 8814176156651890, i64 8801347484544986, i64 8786084197194146, i64 8767592496903178, i64 8744682338845716, i64 8715480686119910, i64 8676850260251934, i64 8623083654098352, i64 8542525795804796, i64 8406823688997808, i64 8122426762520768], align 16\n%p = getelementptr inbounds [256 x i64], ptr @data, i64 0, i64 %idx\n%x = load i64, ptr %p, align 8\nret i64 %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#we_doubleidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>we_double(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x double] [double 0x3CD164EC94BF5DC1, double 0x3C60589D8B5D4119, double 0x3C6AD6B2495B4D2B, double 0x3C719335A95B8DBA, double 0x3C7522E6E54A2A73, double 0x3C785090FBC27A80, double 0x3C7B38D1EF79B7CC, double 0x3C7DECD8B76DBD98, double 0x3C803BF049C65C3C, double 0x3C8170DB24D6F670, double 0x3C82980290DA2633, double 0x3C83B388FE3D6ECA, double 0x3C84C515C60BFE21, double 0x3C85CDF89D024AC3, double 0x3C86CF40F0A72BBD, double 0x3C87C9CDDA17D019, double 0x3C88BE5954D3606F, double 0x3C89AD80552237D2, double 0x3C8A97C8BE5D5203, double 0x3C8B7DA5DDDDA3C4, double 0x3C8C5F7BD78C3F89, double 0x3C8D3DA24DF17C36, double 0x3C8E186678F1735A, double 0x3C8EF00CCF5F4FAA, double 0x3C8FC4D25D683209, double 0x3C904B76ED6A7558, double 0x3C90B348479B80FC, double 0x3C9119F38749F5AF, double 0x3C917F8CEB4BDFA0, double 0x3C91E426E93E49E7, double 0x3C9247D26538FF2E, double 0x3C92AA9EE123680B, double 0x3C930C9AA526DA4B, double 0x3C936DD2E26D8202, double 0x3C93CE53D12162A0, double 0x3C942E28CA706748, double 0x3C948D5C5F35E712, double 0x3C94EBF86BCD0B93, double 0x3C954A0629786F4D, double 0x3C95A78E3DB8BEFD, double 0x3C960498C7DD2ECF, double 0x3C96612D6D0C68E0, double 0x3C96BD5362FAA944, double 0x3C971911797990BB, double 0x3C97746E23077973, double 0x3C97CF6F7C7E8172, double 0x3C982A1B53FED599, double 0x3C9884772F2BE1EC, double 0x3C98DE8850D0C52A, double 0x3C993853BDFDA244, double 0x3C9991DE42AD1338, double 0x3C99EB2C75FF03BF, double 0x3C9A4442BE14884A, double 0x3C9A9D255396D261, double 0x3C9AF5D844F224C9, double 0x3C9B4E5F794C979B, double 0x3C9BA6BEB33F8F89, double 0x3C9BFEF99359FE99, double 0x3C9C57139A70D29F, double 0x3C9CAF102BC25ADB, double 0x3C9D06F28EF0E6FB, double 0x3C9D5EBDF1D86B8D, double 0x3C9DB6756A429057, double 0x3C9E0E1BF77C31FE, double 0x3C9E65B483CF1044, double 0x3C9EBD41E5E21B62, double 0x3C9F14C6E202949F, double 0x3C9F6C462B57FEB5, double 0x3C9FC3C26504A9A1, double 0x3CA00D9F119A3CD9, double 0x3CA0395DF60DB162, double 0x3CA0651F1C7276F8, double 0x3CA090E3BB4B0072, double 0x3CA0BCAD03710137, double 0x3CA0E87C207A2F66, double 0x3CA114523917AC15, double 0x3CA140306F707DBE, double 0x3CA16C17E1777FFB, double 0x3CA19809A93D2396, double 0x3CA1C406DD3D5283, double 0x3CA1F01090A9C4E2, double 0x3CA21C27D3B10E05, double 0x3CA2484DB3C2A329, double 0x3CA274833BD0189F, double 0x3CA2A0C9748BCDAA, double 0x3CA2CD2164A53B5D, double 0x3CA2F98C11031721, double 0x3CA3260A7CFB7611, double 0x3CA3529DAA8A1BA1, double 0x3CA37F469A851AF0, double 0x3CA3AC064CCFEFFC, double 0x3CA3D8DDC08D336D, double 0x3CA405CDF44F09C4, double 0x3CA432D7E6466CD0, double 0x3CA45FFC94716CA7, double 0x3CA48D3CFCC883C4, double 0x3CA4BA9A1D6B18A4, double 0x3CA4E814F4CB45EA, double 0x3CA515AE81D900FB, double 0x3CA54367C42CB5F8, double 0x3CA57141BC316F27, double 0x3CA59F3D6B4E9CF9, double 0x3CA5CD5BD4119335, double 0x3CA5FB9DFA56CF26, double 0x3CA62A04E3731A2E, double 0x3CA65891965C9B8C, double 0x3CA687451BD3EBEE, double 0x3CA6B6207E8D3CDF, double 0x3CA6E524CB59A608, double 0x3CA714531150A9FB, double 0x3CA743AC61FA041C, double 0x3CA77331D177D130, double 0x3CA7A2E476B1240A, double 0x3CA7D2C56B7D17F7, double 0x3CA802D5CCCE7277, double 0x3CA83316BADFE62A, double 0x3CA86389596108E7, double 0x3CA8942ECFA40F54, double 0x3CA8C50848CC6094, double 0x3CA8F616F3FE1513, double 0x3CA9275C048E73E1, double 0x3CA958D8B235828A, double 0x3CA98A8E3940BBF4, double 0x3CA9BC7DDAC7035D, double 0x3CA9EEA8DCDDE951, double 0x3CAA21108AD0592D, double 0x3CAA53B63556C690, double 0x3CAA869B32D0F30F, double 0x3CAAB9C0DF81657A, double 0x3CAAED289DCAACFF, double 0x3CAB20D3D66E8BB5, double 0x3CAB54C3F8CF2542, double 0x3CAB88FA7B324FB6, double 0x3CABBD78DB072610, double 0x3CABF2409D2DFD85, double 0x3CAC27534E42E02D, double 0x3CAC5CB282EAB1A4, double 0x3CAC925FD82323FB, double 0x3CACC85CF395A56C, double 0x3CACFEAB83ED7180, double 0x3CAD354D4130F2AD, double 0x3CAD6C43ED1EA3FE, double 0x3CADA391538DA50A, double 0x3CADDB374AD2357F, double 0x3CAE1337B426509B, double 0x3CAE4B947C16A452, double 0x3CAE844F9AF4237F, double 0x3CAEBD6B154A7678, double 0x3CAEF6E8FC5B9168, double 0x3CAF30CB6EA0BC7F, double 0x3CAF6B1498515ED0, double 0x3CAFA5C6B3EFE1E5, double 0x3CAFE0E40ADD09D8, double 0x3CB00E377AF911D4, double 0x3CB02C34EF11391B, double 0x3CB04A6B9E9224A3, double 0x3CB068DCCF1126DB, double 0x3CB08789CF3AAD0F, double 0x3CB0A673F733C819, double 0x3CB0C59CA900946F, double 0x3CB0E50550EFCFB7, double 0x3CB104AF660BEFCE, double 0x3CB1249C6A92154A, double 0x3CB144CDEC6F3A2B, double 0x3CB1654585C404C1, double 0x3CB18604DD6FAE9E, double 0x3CB1A70DA7A27820, double 0x3CB1C861A6782A5A, double 0x3CB1EA02AA9B3370, double 0x3CB20BF293F0F4A2, double 0x3CB22E33524FE550, double 0x3CB250C6E6403BBA, double 0x3CB273AF61C7DAA6, double 0x3CB296EEE942532B, double 0x3CB2BA87B445DB51, double 0x3CB2DE7C0E962D70, double 0x3CB302CE59265965, double 0x3CB327810B2AA7D0, double 0x3CB34C96B33BC965, double 0x3CB37211F88CA856, double 0x3CB397F59C345143, double 0x3CB3BE447A8D8B83, double 0x3CB3E5018CADDED0, double 0x3CB40C2FE9F5EEAD, double 0x3CB433D2C9BD42F8, double 0x3CB45BED851BC92C, double 0x3CB4848398D39432, double 0x3CB4AD98A75DA14C, double 0x3CB4D7307B1CB127, double 0x3CB5014F08B99508, double 0x3CB52BF871ACAAB2, double 0x3CB5573106F8A75A, double 0x3CB582FD4C1B4461, double 0x3CB5AF61FA38E107, double 0x3CB5DC640388BD9E, double 0x3CB60A0897081879, double 0x3CB63855247B2E94, double 0x3CB6674F60C3F432, double 0x3CB696FD4A9748EE, double 0x3CB6C7652F9A7B1E, double 0x3CB6F88DB1F42507, double 0x3CB72A7DCE5CD218, double 0x3CB75D3CE2BD71C3, double 0x3CB790D2B56B71F9, double 0x3CB7C5477D1476D3, double 0x3CB7FAA3E96E1412, double 0x3CB830F12CC0BEC3, double 0x3CB8683906687342, double 0x3CB8A085CE695BAB, double 0x3CB8D9E2823B3695, double 0x3CB9145AD2F37544, double 0x3CB94FFB34FC2A0E, double 0x3CB98CD0F18D1AD8, double 0x3CB9CAEA3A24D9EA, double 0x3CBA0A563E49F178, double 0x3CBA4B2543E84C3B, double 0x3CBA8D68C2AD86EA, double 0x3CBAD13382D845C4, double 0x3CBB1699C003B60A, double 0x3CBB5DB15091EA0F, double 0x3CBBA691D276DA5E, double 0x3CBBF154DE4BEF77, double 0x3CBC3E1641C2E0A7, double 0x3CBC8CF442C8C8F4, double 0x3CBCDE0FECF2A97F, double 0x3CBD318D6B2738C5, double 0x3CBD87946FEC3BEC, double 0x3CBDE050AF4EF19F, double 0x3CBE3BF26E190960, double 0x3CBE9AAF2AF383C1, double 0x3CBEFCC26750EA4A, double 0x3CBF626E9791F7A7, double 0x3CBFCBFE43F6C6E5, double 0x3CC01CE2B362EC2E, double 0x3CC056118BF58EEF, double 0x3CC091C1CDCBA54E, double 0x3CC0D031785D48A0, double 0x3CC111A8034392A6, double 0x3CC156786775442A, double 0x3CC19F03BCB3C2D6, double 0x3CC1EBBCA0C9FA7C, double 0x3CC23D2BB659919F, double 0x3CC293F5AE49AAA5, double 0x3CC2F0E38A4411F0, double 0x3CC354EE27CCF75E, double 0x3CC3C14EC7C8B861, double 0x3CC4379766E41362, double 0x3CC4B9D7CD4751D1, double 0x3CC54AD83CCF73F6, double 0x3CC5EE7AE17313D2, double 0x3CC6AA676D4BBF72, double 0x3CC78750D6EAC62F, double 0x3CC8939FE6F2ED19, double 0x3CC9E9DC0D487B85, double 0x3CCBC39E51DA71FC, double 0x3CCEC9D9297EBB83], align 16\n%p = getelementptr inbounds [256 x double], ptr @data, i64 0, i64 %idx\n%x = load double, ptr %p, align 8\nret double %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#fe_doubleidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fe_double(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x double] [double 1.000000e+00, double 0x3FEE0545E5881137, double 0x3FECD0A65081FFF1, double 0x3FEBE5007BEB7B27, double 0x3FEB210F0EE67F2A, double 0x3FEA76BAA562FAE7, double 0x3FE9DE9715556D9B, double 0x3FE95431C455AA39, double 0x3FE8D4A376D3D22F, double 0x3FE85DE87806C5B8, double 0x3FE7EE8A2D243126, double 0x3FE7856E9B09D47E, double 0x3FE721BB5BA94B63, double 0x3FE6C2C3498418C6, double 0x3FE667FA6D4F5C06, double 0x3FE610EDC1A7AF66, double 0x3FE5BD3D694CAC75, double 0x3FE56C9882DA8773, double 0x3FE51EBA1578899A, double 0x3FE4D366C151F8AF, double 0x3FE48A6AFB8EE069, double 0x3FE44399AFA8E125, double 0x3FE3FECB2BB18B80, double 0x3FE3BBDC44E1D114, double 0x3FE37AADA708DDD9, double 0x3FE33B23450E6318, double 0x3FE2FD23E345DA5E, double 0x3FE2C098B61F4F24, double 0x3FE2856D111132BD, double 0x3FE24B8E228C50A3, double 0x3FE212EABA813EC8, double 0x3FE1DB7319877B89, double 0x3FE1A518C71E3B25, double 0x3FE16FCE6DCE6FEE, double 0x3FE13B87BC33169C, double 0x3FE108394A1CC38D, double 0x3FE0D5D8812B1E2B, double 0x3FE0A45B8854D02A, double 0x3FE073B931EE3B7D, double 0x3FE043E8EBD26548, double 0x3FE014E2B160F324, double 0x3FDFCD3DFE214576, double 0x3FDF722D8EBFC5FA, double 0x3FDF1886D1EB424D, double 0x3FDEC03D4B969D90, double 0x3FDE6945367DD351, double 0x3FDE139375E137FC, double 0x3FDDBF1D88A7210C, double 0x3FDD6BD97DB9ED7A, double 0x3FDD19BDE97E1A0B, double 0x3FDCC8C1DC40E092, double 0x3FDC78DCD983FB60, double 0x3FDC2A06D00EA583, double 0x3FDBDC3812AEEEB5, double 0x3FDB8F6951990B88, double 0x3FDB43939454806F, double 0x3FDAF8B03428EF5F, double 0x3FDAAEB8D6FDF6E5, double 0x3FDA65A76AA30140, double 0x3FDA1D76207521F4, double 0x3FD9D61F695A3792, double 0x3FD98F9DF2097BA8, double 0x3FD949EC9F9A8110, double 0x3FD905068C545D04, double 0x3FD8C0E704B75D39, double 0x3FD87D8984BC3F8C, double 0x3FD83AE9B5446138, double 0x3FD7F90369B6CE59, double 0x3FD7B7D29DC6801E, double 0x3FD77753735E72E3, double 0x3FD7378230B08DEA, double 0x3FD6F85B3E649E9D, double 0x3FD6B9DB25E4E99C, double 0x3FD67BFE8FC60D9F, double 0x3FD63EC2424827E4, double 0x3FD602231FEF5876, double 0x3FD5C61E2631EE6C, double 0x3FD58AB06C3AA9EF, double 0x3FD54FD721BDA3E7, double 0x3FD5158F8DDE89F5, double 0x3FD4DBD70E26F91D, double 0x3FD4A2AB158BDAD3, double 0x3FD46A092B80BEEF, double 0x3FD431EEEB1841E2, double 0x3FD3FA5A0230A14E, double 0x3FD3C34830ABB285, double 0x3FD38CB747B17DEF, double 0x3FD356A528FCD0DD, double 0x3FD3210FC6312435, double 0x3FD2EBF520394270, double 0x3FD2B75346AE2262, double 0x3FD2832857457629, double 0x3FD24F727D4776FD, double 0x3FD21C2FF10B7EFF, double 0x3FD1E95EF77B09DB, double 0x3FD1B6FDE19ABC5A, double 0x3FD1850B0C191982, double 0x3FD15384DEE291EF, double 0x3FD12269CCBA9FBA, double 0x3FD0F1B852D9A66C, double 0x3FD0C16EF88F5333, double 0x3FD0918C4EE93E13, double 0x3FD0620EF05D90D2, double 0x3FD032F580797C2C, double 0x3FD0043EAB93476A, double 0x3FCFABD24CFF9354, double 0x3FCF4FE75C963E7E, double 0x3FCEF4BA0FE8E09B, double 0x3FCE9A48005940F2, double 0x3FCE408ED62F83A7, double 0x3FCDE78C48224F39, double 0x3FCD8F3E1AE3EEB8, double 0x3FCD37A220B431FD, double 0x3FCCE0B638F6D09F, double 0x3FCC8A784FCE1802, double 0x3FCC34E65DB9AFEE, double 0x3FCBDFFE67394435, double 0x3FCB8BBE7C72E4A5, double 0x3FCB3824B8DCEF3E, double 0x3FCAE52F42EB5B0B, double 0x3FCA92DC4BC03C49, double 0x3FCA412A0EDF5CBC, double 0x3FC9F016D1E4C512, double 0x3FC99FA0E43E1623, double 0x3FC94FC69EE692A1, double 0x3FC900866425BB79, double 0x3FC8B1DE9F5062D5, double 0x3FC863CDC48C1AF9, double 0x3FC816525094E7E6, double 0x3FC7C96AC8851BAE, double 0x3FC77D15B99F46FE, double 0x3FC73151B91A2839, double 0x3FC6E61D63EE84EA, double 0x3FC69B775EA6DA28, double 0x3FC6515E5530D1AC, double 0x3FC607D0FAB06A31, double 0x3FC5BECE0954C2B6, double 0x3FC57654422E78F5, double 0x3FC52E626D078C49, double 0x3FC4E6F7583CB6FA, double 0x3FC4A011D8983096, double 0x3FC459B0C92DCCC6, double 0x3FC413D30B386A9A, double 0x3FC3CE7785F8A905, double 0x3FC3899D2694D5C9, double 0x3FC34542DFFA0CAF, double 0x3FC30167AABE7D6E, double 0x3FC2BE0A8504CF34, double 0x3FC27B2A72609940, double 0x3FC238C67BBBE878, double 0x3FC1F6DDAF3DCA65, double 0x3FC1B56F2031D666, double 0x3FC17479E6F0AE78, double 0x3FC133FD20C9712F, double 0x3FC0F3F7EFEC1720, double 0x3FC0B4697B54B62F, double 0x3FC07550EEB7A5BE, double 0x3FC036AD7A6E7F04, double 0x3FBFF0FCA6CBEA8D, double 0x3FBF758566190414, double 0x3FBEFAF3AE83C33C, double 0x3FBE8146048EB9CC, double 0x3FBE087AF561BAFB, double 0x3FBD909116AD9398, double 0x3FBD198706914DD7, double 0x3FBCA35B6B80FD57, double 0x3FBC2E0CF42E10AF, double 0x3FBBB99A5771268F, double 0x3FBB460254356548, double 0x3FBAD343B1655465, double 0x3FBA615D3DD938B7, double 0x3FB9F04DD046F428, double 0x3FB9801447336B70, double 0x3FB910AF88E574B9, double 0x3FB8A21E835A533B, double 0x3FB834602C3BC4BA, double 0x3FB7C77380D7A6F3, double 0x3FB75B5786193C1E, double 0x3FB6F00B488416B6, double 0x3FB6858DDC30B620, double 0x3FB61BDE5CCADEF7, double 0x3FB5B2FBED91BB3E, double 0x3FB54AE5B959D036, double 0x3FB4E39AF290D929, double 0x3FB47D1AD343985C, double 0x3FB417649D25B10E, double 0x3FB3B277999B9F9E, double 0x3FB34E5319C6E718, double 0x3FB2EAF676948DD1, double 0x3FB2886110CE0570, double 0x3FB22692512C9D8C, double 0x3FB1C589A86FA340, double 0x3FB165468F755392, double 0x3FB105C88756CA50, double 0x3FB0A70F19871B3B, double 0x3FB04919D7F5C817, double 0x3FAFD7D0BA699676, double 0x3FAF1EF49944E834, double 0x3FAE679EA52EB2E5, double 0x3FADB1CE49315810, double 0x3FACFD83031E794A, double 0x3FAC4ABC640721E9, double 0x3FAB997A10BED985, double 0x3FAAE9BBC26A8084, double 0x3FAA3B81471BF138, double 0x3FA98ECA827B7C4C, double 0x3FA8E3976E80776D, double 0x3FA839E81C3A396B, double 0x3FA791BCB4AB089E, double 0x3FA6EB1579B6AF52, double 0x3FA645F2C726A041, double 0x3FA5A25513C5D2CA, double 0x3FA5003CF296C5EB, double 0x3FA45FAB14266B19, double 0x3FA3C0A047FF18FF, double 0x3FA3231D7E3F14AE, double 0x3FA28723C956C00C, double 0x3FA1ECB45FF312D4, double 0x3FA153D09F19B3A1, double 0x3FA0BC7A0C7CD651, double 0x3FA026B2590DFAEE, double 0x3F9F24F6C7AF9890, double 0x3F9DFFAE7A517468, double 0x3F9CDD9054331B0C, double 0x3F9BBEA150FA5870, double 0x3F9AA2E6E6924E9B, double 0x3F998A670F132A48, double 0x3F98752853EC9967, double 0x3F976331DA87FC96, double 0x3F96548B72A24077, double 0x3F95493DA6AB0251, double 0x3F944151CE87F0BE, double 0x3F933CD225315D84, double 0x3F923BC9E1B93A32, double 0x3F913E4554725F5F, double 0x3F904452091E02F0, double 0x3F8E9BFDDE89C7CE, double 0x3F8CB6B9146E2757, double 0x3F8AD8FA5542C92D, double 0x3F8902EA688FA7BD, double 0x3F8734B6E6AA74F5, double 0x3F856E930BE416CB, double 0x3F83B0B8C1516F62, double 0x3F81FB69EDB37671, double 0x3F804EF2295FD7F9, double 0x3F7D5751FA745DC5, double 0x3F7A23E9D4974836, double 0x3F77049F37EC3620, double 0x3F73FA97CEE322FD, double 0x3F71073D69574043, double 0x3F6C58B381CD4B11, double 0x3F66D888F3A1FEFF, double 0x3F61946BA8E1A324, double 0x3F592BB5540C3E25, double 0x3F4FB20AF78DFCB9, double 0x3F3DC31C329F0B4B], align 16\n%p = getelementptr inbounds [256 x double], ptr @data, i64 0, i64 %idx\n%x = load double, ptr %p, align 8\nret double %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#ke_floatidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>ke_float(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x i32] [i32 7424081, i32 0, i32 5109103, i32 6405078, i32 6975197, i32 7292064, i32 7492724, i32 7630841, i32 7731567, i32 7808211, i32 7868455, i32 7917038, i32 7957036, i32 7990536, i32 8018999, i32 8043479, i32 8064756, i32 8083420, i32 8099923, i32 8114619, i32 8127790, i32 8139660, i32 8150414, i32 8160200, i32 8169144, i32 8177350, i32 8184905, i32 8191884, i32 8198349, i32 8204355, i32 8209949, i32 8215172, i32 8220059, i32 8224642, i32 8228947, i32 8233000, i32 8236821, i32 8240429, i32 8243842, i32 8247074, i32 8250140, i32 8253052, i32 8255821, i32 8258457, i32 8260969, i32 8263366, i32 8265654, i32 8267842, i32 8269935, i32 8271939, i32 8273860, i32 8275702, i32 8277471, i32 8279169, i32 8280802, i32 8282372, i32 8283884, i32 8285339, i32 8286741, i32 8288093, i32 8289398, i32 8290656, i32 8291872, i32 8293046, i32 8294180, i32 8295277, i32 8296339, i32 8297365, i32 8298359, i32 8299322, i32 8300254, i32 8301158, i32 8302033, i32 8302883, i32 8303706, i32 8304505, i32 8305280, i32 8306033, i32 8306763, i32 8307472, i32 8308161, i32 8308830, i32 8309481, i32 8310113, i32 8310727, i32 8311324, i32 8311904, i32 8312468, i32 8313017, i32 8313550, i32 8314069, i32 8314574, i32 8315064, i32 8315542, i32 8316006, i32 8316458, i32 8316898, i32 8317325, i32 8317741, i32 8318145, i32 8318538, i32 8318921, i32 8319293, i32 8319655, i32 8320006, i32 8320348, i32 8320680, i32 8321003, i32 8321316, i32 8321621, i32 8321917, i32 8322204, i32 8322482, i32 8322753, i32 8323015, i32 8323269, i32 8323515, i32 8323754, i32 8323985, i32 8324208, i32 8324424, i32 8324632, i32 8324834, i32 8325028, i32 8325216, i32 8325396, i32 8325570, i32 8325737, i32 8325897, i32 8326051, i32 8326198, i32 8326338, i32 8326472, i32 8326600, i32 8326721, i32 8326836, i32 8326945, i32 8327048, i32 8327144, i32 8327234, i32 8327318, i32 8327396, i32 8327467, i32 8327533, i32 8327592, i32 8327645, i32 8327692, i32 8327733, i32 8327768, i32 8327796, i32 8327818, i32 8327834, i32 8327844, i32 8327847, i32 8327844, i32 8327835, i32 8327819, i32 8327796, i32 8327767, i32 8327731, i32 8327689, i32 8327640, i32 8327583, i32 8327520, i32 8327450, i32 8327372, i32 8327287, i32 8327195, i32 8327095, i32 8326987, i32 8326871, i32 8326748, i32 8326616, i32 8326476, i32 8326327, i32 8326169, i32 8326003, i32 8325827, i32 8325642, i32 8325447, i32 8325243, i32 8325028, i32 8324802, i32 8324566, i32 8324319, i32 8324060, i32 8323789, i32 8323506, i32 8323211, i32 8322902, i32 8322579, i32 8322243, i32 8321892, i32 8321526, i32 8321144, i32 8320746, i32 8320331, i32 8319898, i32 8319446, i32 8318975, i32 8318484, i32 8317971, i32 8317437, i32 8316879, i32 8316297, i32 8315689, i32 8315054, i32 8314390, i32 8313697, i32 8312972, i32 8312213, i32 8311419, i32 8310587, i32 8309715, i32 8308801, i32 8307841, i32 8306833, i32 8305773, i32 8304657, i32 8303482, i32 8302244, i32 8300936, i32 8299554, i32 8298091, i32 8296541, i32 8294895, i32 8293146, i32 8291284, i32 8289297, i32 8287173, i32 8284897, i32 8282453, i32 8279823, i32 8276983, i32 8273907, i32 8270566, i32 8266924, i32 8262936, i32 8258551, i32 8253706, i32 8248323, i32 8242304, i32 8235529, i32 8227840, i32 8219034, i32 8208841, i32 8196894, i32 8182679, i32 8165457, i32 8144120, i32 8116924, i32 8080947, i32 8030872, i32 7955847, i32 7829465, i32 7564599], align 16\n%p = getelementptr inbounds [256 x i32], ptr @data, i64 0, i64 %idx\n%x = load i32, ptr %p, align 8\nret i32 %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#we_floatidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>we_float(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x float] [float 0x3EB164ECA0000000, float 0x3E40589D80000000, float 0x3E4AD6B240000000, float 0x3E519335A0000000, float 0x3E5522E6E0000000, float 0x3E58509100000000, float 0x3E5B38D1E0000000, float 0x3E5DECD8C0000000, float 0x3E603BF040000000, float 0x3E6170DB20000000, float 0x3E629802A0000000, float 0x3E63B38900000000, float 0x3E64C515C0000000, float 0x3E65CDF8A0000000, float 0x3E66CF4100000000, float 0x3E67C9CDE0000000, float 0x3E68BE5960000000, float 0x3E69AD8060000000, float 0x3E6A97C8C0000000, float 0x3E6B7DA5E0000000, float 0x3E6C5F7BE0000000, float 0x3E6D3DA240000000, float 0x3E6E186680000000, float 0x3E6EF00CC0000000, float 0x3E6FC4D260000000, float 0x3E704B76E0000000, float 0x3E70B34840000000, float 0x3E7119F380000000, float 0x3E717F8CE0000000, float 0x3E71E426E0000000, float 0x3E7247D260000000, float 0x3E72AA9EE0000000, float 0x3E730C9AA0000000, float 0x3E736DD2E0000000, float 0x3E73CE53E0000000, float 0x3E742E28C0000000, float 0x3E748D5C60000000, float 0x3E74EBF860000000, float 0x3E754A0620000000, float 0x3E75A78E40000000, float 0x3E760498C0000000, float 0x3E76612D60000000, float 0x3E76BD5360000000, float 0x3E77191180000000, float 0x3E77746E20000000, float 0x3E77CF6F80000000, float 0x3E782A1B60000000, float 0x3E78847720000000, float 0x3E78DE8860000000, float 0x3E793853C0000000, float 0x3E7991DE40000000, float 0x3E79EB2C80000000, float 0x3E7A4442C0000000, float 0x3E7A9D2560000000, float 0x3E7AF5D840000000, float 0x3E7B4E5F80000000, float 0x3E7BA6BEC0000000, float 0x3E7BFEF9A0000000, float 0x3E7C5713A0000000, float 0x3E7CAF1020000000, float 0x3E7D06F280000000, float 0x3E7D5EBE00000000, float 0x3E7DB67560000000, float 0x3E7E0E1C00000000, float 0x3E7E65B480000000, float 0x3E7EBD41E0000000, float 0x3E7F14C6E0000000, float 0x3E7F6C4620000000, float 0x3E7FC3C260000000, float 0x3E800D9F20000000, float 0x3E80395E00000000, float 0x3E80651F20000000, float 0x3E8090E3C0000000, float 0x3E80BCAD00000000, float 0x3E80E87C20000000, float 0x3E81145240000000, float 0x3E81403060000000, float 0x3E816C17E0000000, float 0x3E819809A0000000, float 0x3E81C406E0000000, float 0x3E81F010A0000000, float 0x3E821C27E0000000, float 0x3E82484DC0000000, float 0x3E82748340000000, float 0x3E82A0C980000000, float 0x3E82CD2160000000, float 0x3E82F98C20000000, float 0x3E83260A80000000, float 0x3E83529DA0000000, float 0x3E837F46A0000000, float 0x3E83AC0640000000, float 0x3E83D8DDC0000000, float 0x3E8405CE00000000, float 0x3E8432D7E0000000, float 0x3E845FFCA0000000, float 0x3E848D3D00000000, float 0x3E84BA9A20000000, float 0x3E84E81500000000, float 0x3E8515AE80000000, float 0x3E854367C0000000, float 0x3E857141C0000000, float 0x3E859F3D60000000, float 0x3E85CD5BE0000000, float 0x3E85FB9E00000000, float 0x3E862A04E0000000, float 0x3E865891A0000000, float 0x3E86874520000000, float 0x3E86B62080000000, float 0x3E86E524C0000000, float 0x3E87145320000000, float 0x3E8743AC60000000, float 0x3E877331E0000000, float 0x3E87A2E480000000, float 0x3E87D2C560000000, float 0x3E8802D5C0000000, float 0x3E883316C0000000, float 0x3E88638960000000, float 0x3E88942EC0000000, float 0x3E88C50840000000, float 0x3E88F61700000000, float 0x3E89275C00000000, float 0x3E8958D8C0000000, float 0x3E898A8E40000000, float 0x3E89BC7DE0000000, float 0x3E89EEA8E0000000, float 0x3E8A211080000000, float 0x3E8A53B640000000, float 0x3E8A869B40000000, float 0x3E8AB9C0E0000000, float 0x3E8AED28A0000000, float 0x3E8B20D3E0000000, float 0x3E8B54C400000000, float 0x3E8B88FA80000000, float 0x3E8BBD78E0000000, float 0x3E8BF240A0000000, float 0x3E8C275340000000, float 0x3E8C5CB280000000, float 0x3E8C925FE0000000, float 0x3E8CC85D00000000, float 0x3E8CFEAB80000000, float 0x3E8D354D40000000, float 0x3E8D6C43E0000000, float 0x3E8DA39160000000, float 0x3E8DDB3740000000, float 0x3E8E1337C0000000, float 0x3E8E4B9480000000, float 0x3E8E844FA0000000, float 0x3E8EBD6B20000000, float 0x3E8EF6E900000000, float 0x3E8F30CB60000000, float 0x3E8F6B14A0000000, float 0x3E8FA5C6C0000000, float 0x3E8FE0E400000000, float 0x3E900E3780000000, float 0x3E902C34E0000000, float 0x3E904A6BA0000000, float 0x3E9068DCC0000000, float 0x3E908789C0000000, float 0x3E90A67400000000, float 0x3E90C59CA0000000, float 0x3E90E50560000000, float 0x3E9104AF60000000, float 0x3E91249C60000000, float 0x3E9144CDE0000000, float 0x3E91654580000000, float 0x3E918604E0000000, float 0x3E91A70DA0000000, float 0x3E91C861A0000000, float 0x3E91EA02A0000000, float 0x3E920BF2A0000000, float 0x3E922E3360000000, float 0x3E9250C6E0000000, float 0x3E9273AF60000000, float 0x3E9296EEE0000000, float 0x3E92BA87C0000000, float 0x3E92DE7C00000000, float 0x3E9302CE60000000, float 0x3E93278100000000, float 0x3E934C96C0000000, float 0x3E93721200000000, float 0x3E9397F5A0000000, float 0x3E93BE4480000000, float 0x3E93E50180000000, float 0x3E940C2FE0000000, float 0x3E9433D2C0000000, float 0x3E945BED80000000, float 0x3E948483A0000000, float 0x3E94AD98A0000000, float 0x3E94D73080000000, float 0x3E95014F00000000, float 0x3E952BF880000000, float 0x3E95573100000000, float 0x3E9582FD40000000, float 0x3E95AF6200000000, float 0x3E95DC6400000000, float 0x3E960A08A0000000, float 0x3E96385520000000, float 0x3E96674F60000000, float 0x3E9696FD40000000, float 0x3E96C76520000000, float 0x3E96F88DC0000000, float 0x3E972A7DC0000000, float 0x3E975D3CE0000000, float 0x3E9790D2C0000000, float 0x3E97C54780000000, float 0x3E97FAA3E0000000, float 0x3E9830F120000000, float 0x3E98683900000000, float 0x3E98A085C0000000, float 0x3E98D9E280000000, float 0x3E99145AE0000000, float 0x3E994FFB40000000, float 0x3E998CD100000000, float 0x3E99CAEA40000000, float 0x3E9A0A5640000000, float 0x3E9A4B2540000000, float 0x3E9A8D68C0000000, float 0x3E9AD13380000000, float 0x3E9B1699C0000000, float 0x3E9B5DB160000000, float 0x3E9BA691E0000000, float 0x3E9BF154E0000000, float 0x3E9C3E1640000000, float 0x3E9C8CF440000000, float 0x3E9CDE0FE0000000, float 0x3E9D318D60000000, float 0x3E9D879480000000, float 0x3E9DE050A0000000, float 0x3E9E3BF260000000, float 0x3E9E9AAF20000000, float 0x3E9EFCC260000000, float 0x3E9F626EA0000000, float 0x3E9FCBFE40000000, float 0x3EA01CE2C0000000, float 0x3EA0561180000000, float 0x3EA091C1C0000000, float 0x3EA0D03180000000, float 0x3EA111A800000000, float 0x3EA1567860000000, float 0x3EA19F03C0000000, float 0x3EA1EBBCA0000000, float 0x3EA23D2BC0000000, float 0x3EA293F5A0000000, float 0x3EA2F0E380000000, float 0x3EA354EE20000000, float 0x3EA3C14EC0000000, float 0x3EA4379760000000, float 0x3EA4B9D7C0000000, float 0x3EA54AD840000000, float 0x3EA5EE7AE0000000, float 0x3EA6AA6760000000, float 0x3EA78750E0000000, float 0x3EA8939FE0000000, float 0x3EA9E9DC00000000, float 0x3EABC39E60000000, float 0x3EAEC9D920000000], align 16\n%p = getelementptr inbounds [256 x float], ptr @data, i64 0, i64 %idx\n%x = load float, ptr %p, align 8\nret float %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#fe_floatidx-int-pure-function-has-no-side-effects-and-returns-same-value-for-same-inputs-llvm-function-is-implemented-with-inline-llvm-ir","title":"<code>fe_float(idx: int)</code>  @pure Function has no side effects and returns same value for same inputs   @llvm Function is implemented with inline LLVM IR","text":"<pre><code>@data = private unnamed_addr constant [256 x float] [float 1.000000e+00, float 0x3FEE0545E0000000, float 0x3FECD0A660000000, float 0x3FEBE50080000000, float 0x3FEB210F00000000, float 0x3FEA76BAA0000000, float 0x3FE9DE9720000000, float 0x3FE95431C0000000, float 0x3FE8D4A380000000, float 0x3FE85DE880000000, float 0x3FE7EE8A20000000, float 0x3FE7856EA0000000, float 0x3FE721BB60000000, float 0x3FE6C2C340000000, float 0x3FE667FA60000000, float 0x3FE610EDC0000000, float 0x3FE5BD3D60000000, float 0x3FE56C9880000000, float 0x3FE51EBA20000000, float 0x3FE4D366C0000000, float 0x3FE48A6B00000000, float 0x3FE44399A0000000, float 0x3FE3FECB20000000, float 0x3FE3BBDC40000000, float 0x3FE37AADA0000000, float 0x3FE33B2340000000, float 0x3FE2FD23E0000000, float 0x3FE2C098C0000000, float 0x3FE2856D20000000, float 0x3FE24B8E20000000, float 0x3FE212EAC0000000, float 0x3FE1DB7320000000, float 0x3FE1A518C0000000, float 0x3FE16FCE60000000, float 0x3FE13B87C0000000, float 0x3FE1083940000000, float 0x3FE0D5D880000000, float 0x3FE0A45B80000000, float 0x3FE073B940000000, float 0x3FE043E8E0000000, float 0x3FE014E2C0000000, float 0x3FDFCD3E00000000, float 0x3FDF722D80000000, float 0x3FDF1886E0000000, float 0x3FDEC03D40000000, float 0x3FDE694540000000, float 0x3FDE139380000000, float 0x3FDDBF1D80000000, float 0x3FDD6BD980000000, float 0x3FDD19BDE0000000, float 0x3FDCC8C1E0000000, float 0x3FDC78DCE0000000, float 0x3FDC2A06E0000000, float 0x3FDBDC3820000000, float 0x3FDB8F6960000000, float 0x3FDB4393A0000000, float 0x3FDAF8B040000000, float 0x3FDAAEB8E0000000, float 0x3FDA65A760000000, float 0x3FDA1D7620000000, float 0x3FD9D61F60000000, float 0x3FD98F9E00000000, float 0x3FD949ECA0000000, float 0x3FD9050680000000, float 0x3FD8C0E700000000, float 0x3FD87D8980000000, float 0x3FD83AE9C0000000, float 0x3FD7F90360000000, float 0x3FD7B7D2A0000000, float 0x3FD7775380000000, float 0x3FD7378240000000, float 0x3FD6F85B40000000, float 0x3FD6B9DB20000000, float 0x3FD67BFE80000000, float 0x3FD63EC240000000, float 0x3FD6022320000000, float 0x3FD5C61E20000000, float 0x3FD58AB060000000, float 0x3FD54FD720000000, float 0x3FD5158F80000000, float 0x3FD4DBD700000000, float 0x3FD4A2AB20000000, float 0x3FD46A0920000000, float 0x3FD431EEE0000000, float 0x3FD3FA5A00000000, float 0x3FD3C34840000000, float 0x3FD38CB740000000, float 0x3FD356A520000000, float 0x3FD3210FC0000000, float 0x3FD2EBF520000000, float 0x3FD2B75340000000, float 0x3FD2832860000000, float 0x3FD24F7280000000, float 0x3FD21C3000000000, float 0x3FD1E95F00000000, float 0x3FD1B6FDE0000000, float 0x3FD1850B00000000, float 0x3FD15384E0000000, float 0x3FD12269C0000000, float 0x3FD0F1B860000000, float 0x3FD0C16F00000000, float 0x3FD0918C40000000, float 0x3FD0620F00000000, float 0x3FD032F580000000, float 0x3FD0043EA0000000, float 0x3FCFABD240000000, float 0x3FCF4FE760000000, float 0x3FCEF4BA00000000, float 0x3FCE9A4800000000, float 0x3FCE408EE0000000, float 0x3FCDE78C40000000, float 0x3FCD8F3E20000000, float 0x3FCD37A220000000, float 0x3FCCE0B640000000, float 0x3FCC8A7840000000, float 0x3FCC34E660000000, float 0x3FCBDFFE60000000, float 0x3FCB8BBE80000000, float 0x3FCB3824C0000000, float 0x3FCAE52F40000000, float 0x3FCA92DC40000000, float 0x3FCA412A00000000, float 0x3FC9F016E0000000, float 0x3FC99FA0E0000000, float 0x3FC94FC6A0000000, float 0x3FC9008660000000, float 0x3FC8B1DEA0000000, float 0x3FC863CDC0000000, float 0x3FC8165240000000, float 0x3FC7C96AC0000000, float 0x3FC77D15C0000000, float 0x3FC73151C0000000, float 0x3FC6E61D60000000, float 0x3FC69B7760000000, float 0x3FC6515E60000000, float 0x3FC607D100000000, float 0x3FC5BECE00000000, float 0x3FC5765440000000, float 0x3FC52E6260000000, float 0x3FC4E6F760000000, float 0x3FC4A011E0000000, float 0x3FC459B0C0000000, float 0x3FC413D300000000, float 0x3FC3CE7780000000, float 0x3FC3899D20000000, float 0x3FC34542E0000000, float 0x3FC30167A0000000, float 0x3FC2BE0A80000000, float 0x3FC27B2A80000000, float 0x3FC238C680000000, float 0x3FC1F6DDA0000000, float 0x3FC1B56F20000000, float 0x3FC17479E0000000, float 0x3FC133FD20000000, float 0x3FC0F3F800000000, float 0x3FC0B46980000000, float 0x3FC07550E0000000, float 0x3FC036AD80000000, float 0x3FBFF0FCA0000000, float 0x3FBF758560000000, float 0x3FBEFAF3A0000000, float 0x3FBE814600000000, float 0x3FBE087B00000000, float 0x3FBD909120000000, float 0x3FBD198700000000, float 0x3FBCA35B60000000, float 0x3FBC2E0D00000000, float 0x3FBBB99A60000000, float 0x3FBB460260000000, float 0x3FBAD343C0000000, float 0x3FBA615D40000000, float 0x3FB9F04DC0000000, float 0x3FB9801440000000, float 0x3FB910AF80000000, float 0x3FB8A21E80000000, float 0x3FB8346020000000, float 0x3FB7C77380000000, float 0x3FB75B5780000000, float 0x3FB6F00B40000000, float 0x3FB6858DE0000000, float 0x3FB61BDE60000000, float 0x3FB5B2FBE0000000, float 0x3FB54AE5C0000000, float 0x3FB4E39B00000000, float 0x3FB47D1AE0000000, float 0x3FB41764A0000000, float 0x3FB3B277A0000000, float 0x3FB34E5320000000, float 0x3FB2EAF680000000, float 0x3FB2886120000000, float 0x3FB2269260000000, float 0x3FB1C589A0000000, float 0x3FB1654680000000, float 0x3FB105C880000000, float 0x3FB0A70F20000000, float 0x3FB04919E0000000, float 0x3FAFD7D0C0000000, float 0x3FAF1EF4A0000000, float 0x3FAE679EA0000000, float 0x3FADB1CE40000000, float 0x3FACFD8300000000, float 0x3FAC4ABC60000000, float 0x3FAB997A20000000, float 0x3FAAE9BBC0000000, float 0x3FAA3B8140000000, float 0x3FA98ECA80000000, float 0x3FA8E39760000000, float 0x3FA839E820000000, float 0x3FA791BCC0000000, float 0x3FA6EB1580000000, float 0x3FA645F2C0000000, float 0x3FA5A25520000000, float 0x3FA5003D00000000, float 0x3FA45FAB20000000, float 0x3FA3C0A040000000, float 0x3FA3231D80000000, float 0x3FA28723C0000000, float 0x3FA1ECB460000000, float 0x3FA153D0A0000000, float 0x3FA0BC7A00000000, float 0x3FA026B260000000, float 0x3F9F24F6C0000000, float 0x3F9DFFAE80000000, float 0x3F9CDD9060000000, float 0x3F9BBEA160000000, float 0x3F9AA2E6E0000000, float 0x3F998A6700000000, float 0x3F98752860000000, float 0x3F976331E0000000, float 0x3F96548B80000000, float 0x3F95493DA0000000, float 0x3F944151C0000000, float 0x3F933CD220000000, float 0x3F923BC9E0000000, float 0x3F913E4560000000, float 0x3F90445200000000, float 0x3F8E9BFDE0000000, float 0x3F8CB6B920000000, float 0x3F8AD8FA60000000, float 0x3F8902EA60000000, float 0x3F8734B6E0000000, float 0x3F856E9300000000, float 0x3F83B0B8C0000000, float 0x3F81FB69E0000000, float 0x3F804EF220000000, float 0x3F7D575200000000, float 0x3F7A23E9E0000000, float 0x3F77049F40000000, float 0x3F73FA97C0000000, float 0x3F71073D60000000, float 0x3F6C58B380000000, float 0x3F66D88900000000, float 0x3F61946BA0000000, float 0x3F592BB560000000, float 0x3F4FB20B00000000, float 0x3F3DC31C40000000], align 16\n%p = getelementptr inbounds [256 x float], ptr @data, i64 0, i64 %idx\n%x = load float, ptr %p, align 8\nret float %x\n</code></pre>"},{"location":"libraries/api/numpy/random/ziggurat/#ziggurat_nor_r-36541528853610087963519472518","title":"<code>ziggurat_nor_r</code> = <code>3.6541528853610087963519472518</code>","text":""},{"location":"libraries/api/numpy/random/ziggurat/#ziggurat_nor_inv_r-027366123732975827203338247596","title":"<code>ziggurat_nor_inv_r</code> = <code>0.27366123732975827203338247596</code>","text":""},{"location":"libraries/api/numpy/random/ziggurat/#ziggurat_exp_r-76971174701310497140446280481","title":"<code>ziggurat_exp_r</code> = <code>7.6971174701310497140446280481</code>","text":""},{"location":"libraries/api/numpy/random/ziggurat/#ziggurat_nor_r_f-float3236541528853610087963519472518","title":"<code>ziggurat_nor_r_f</code> = <code>float32(3.6541528853610087963519472518)</code>","text":""},{"location":"libraries/api/numpy/random/ziggurat/#ziggurat_nor_inv_r_f-float32027366123732975827203338247596","title":"<code>ziggurat_nor_inv_r_f</code> = <code>float32(0.27366123732975827203338247596)</code>","text":""},{"location":"libraries/api/numpy/random/ziggurat/#ziggurat_exp_r_f-float3276971174701310497140446280481","title":"<code>ziggurat_exp_r_f</code> = <code>float32(7.6971174701310497140446280481)</code>","text":""},{"location":"libraries/api/os/","title":"<code>os</code>","text":"<ul> <li><code>path</code></li> </ul> <p>Source: <code>stdlib/os/__init__.codon</code></p>"},{"location":"libraries/api/os/#systemcmd-str","title":"<code>system(cmd: str)</code>","text":""},{"location":"libraries/api/os/#seek_set-0","title":"<code>SEEK_SET</code> = <code>0</code>","text":""},{"location":"libraries/api/os/#seek_cur-1","title":"<code>SEEK_CUR</code> = <code>1</code>","text":""},{"location":"libraries/api/os/#seek_end-2","title":"<code>SEEK_END</code> = <code>2</code>","text":""},{"location":"libraries/api/os/#envmap-tuple-class-is-named-tuple-cannot-write-fields","title":"<code>EnvMap</code>  @tuple Class is named tuple (cannot write fields)","text":""},{"location":"libraries/api/os/#magic-methods","title":"Magic methods","text":""},{"location":"libraries/api/os/#__new__","title":"<code>__new__()</code>","text":""},{"location":"libraries/api/os/#__getitem__self-key-str","title":"<code>__getitem__(self, key: str)</code>","text":""},{"location":"libraries/api/os/#__repr__self","title":"<code>__repr__(self)</code>","text":""},{"location":"libraries/api/os/#__contains__self-key-str","title":"<code>__contains__(self, key: str)</code>","text":""},{"location":"libraries/api/os/#__iter__self","title":"<code>__iter__(self)</code>","text":""},{"location":"libraries/api/os/#environ-envmap","title":"<code>environ</code> = <code>EnvMap()</code>","text":""},{"location":"libraries/api/os/#getenvkey-str-default-str","title":"<code>getenv(key: str, default: str = \"\")</code>","text":""},{"location":"libraries/api/os/#mkdirname-str-mode-int-0x1ff","title":"<code>mkdir(name: str, mode: int = 0x1FF)</code>","text":""},{"location":"libraries/api/os/path/","title":"module <code>os.path</code>","text":"<p>Source: <code>stdlib/os/path.codon</code></p>"},{"location":"libraries/api/os/path/#splitextp-str","title":"<code>splitext(p: str)</code>","text":"<p>Split the extension from a pathname. Extension is everything from the last dot to the end, ignoring leading dots.  Returns \"(root, ext)\"; ext may be empty.</p>"},{"location":"parallel/gpu/","title":"GPU Programming","text":"<p>Codon supports GPU programming through a native GPU backend. Currently, only Nvidia devices are supported. Here is a simple example:</p> <pre><code>import gpu\n\n@gpu.kernel\ndef hello(a, b, c):\n    i = gpu.thread.x\n    c[i] = a[i] + b[i]\n\na = [i for i in range(16)]\nb = [2*i for i in range(16)]\nc = [0 for _ in range(16)]\n\nhello(a, b, c, grid=1, block=16)\nprint(c)  # [0, 3, 6, ..., 45]\n</code></pre> <p>The same code can be written using Codon's <code>@par</code> syntax:</p> <pre><code>a = [i for i in range(16)]\nb = [2*i for i in range(16)]\nc = [0 for _ in range(16)]\n\n@par(gpu=True)\nfor i in range(16):\n    c[i] = a[i] + b[i]\n</code></pre> <p>NumPy arrays and operations also work seamlessly in GPU code:</p> <pre><code>import numpy as np\n\na = np.arange(16)\nb = np.arange(16) * 2\nc = np.empty(16, dtype=int)\n\n@par(gpu=True)\nfor i in range(16):\n    c[i] = a[i] + b[i]\n</code></pre>"},{"location":"parallel/gpu/#writing-gpu-kernels","title":"Writing GPU kernels","text":"<p>Below is a more comprehensive example for computing the Mandelbrot set, and plotting it using Matplotlib:</p> <pre><code>from python import matplotlib.pyplot as plt\nimport numpy as np\nimport gpu\n\nMAX    = 1000  # maximum Mandelbrot iterations\nN      = 4096  # width and height of image\npixels = np.empty((N, N), dtype=int)\n\ndef scale(x, a, b):\n    return a + (x/N)*(b - a)\n\n@gpu.kernel\ndef mandelbrot(pixels):\n    idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x\n    i, j = divmod(idx, N)\n    c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))\n    z = 0j\n    iteration = 0\n\n    while abs(z) &lt;= 2 and iteration &lt; MAX:\n        z = z**2 + c\n        iteration += 1\n\n    pixels[i, j] = int(255 * iteration/MAX)\n\nmandelbrot(pixels, grid=(N*N)//1024, block=1024)\nplt.imshow(pixels)\nplt.show()\n</code></pre> <p>The GPU version of the Mandelbrot code is about 450 times faster than an equivalent CPU version.</p> <p>GPU kernels are marked with the <code>@gpu.kernel</code> annotation, and compiled specially in Codon's backend. Kernel functions can use the vast majority of features supported in Codon, with a few notable exceptions:</p> <ul> <li> <p>Exception handling is not supported inside the kernel, meaning   kernel code should not throw or catch exceptions. <code>raise</code>   statements inside the kernel are marked as unreachable and   optimized out.</p> </li> <li> <p>Functionality related to I/O is not supported (e.g. you can't   open a file in the kernel).</p> </li> <li> <p>A few other modules and functions are not allowed, such as the   <code>re</code> module (which uses an external regex library) or the <code>os</code>   module.</p> </li> </ul>"},{"location":"parallel/gpu/#invoking-gpu-kernels","title":"Invoking GPU kernels","text":"<p>The kernel can be invoked via a simple call with added <code>grid</code> and <code>block</code> parameters. These parameters define the grid and block dimensions, respectively. Recall that GPU execution involves a grid of (<code>X</code> x <code>Y</code> x <code>Z</code>) blocks where each block contains (<code>x</code> x <code>y</code> x <code>z</code>) executing threads. Device-specific restrictions on grid and block sizes apply.</p> <p>The <code>grid</code> and <code>block</code> parameters can be one of:</p> <ul> <li>Single integer <code>x</code>, giving dimensions <code>(x, 1, 1)</code></li> <li>Tuple of two integers <code>(x, y)</code>, giving dimensions <code>(x, y, 1)</code></li> <li>Tuple of three integers <code>(x, y, z)</code>, giving dimensions <code>(x, y, z)</code></li> <li>Instance of <code>gpu.Dim3</code> as in <code>Dim3(x, y, z)</code>, specifying the three dimensions</li> </ul>"},{"location":"parallel/gpu/#gpu-intrinsics","title":"GPU intrinsics","text":"<p>Codon's GPU module provides many of the same intrinsics that CUDA does:</p> Codon Description CUDA equivalent <code>gpu.thread.x</code> x-coordinate of current thread in block <code>threadId.x</code> <code>gpu.block.x</code> x-coordinate of current block in grid <code>blockIdx.x</code> <code>gpu.block.dim.x</code> x-dimension of block <code>blockDim.x</code> <code>gpu.grid.dim.x</code> x-dimension of grid <code>gridDim.x</code> <p>The same applies for the <code>y</code> and <code>z</code> coordinates. The <code>*.dim</code> objects are instances of <code>gpu.Dim3</code>.</p>"},{"location":"parallel/gpu/#math-functions","title":"Math functions","text":"<p>All the functions in the <code>math</code> module are supported in kernel functions, and are automatically replaced with GPU-optimized versions:</p> <pre><code>import math\nimport gpu\n\n@gpu.kernel\ndef hello(x):\n    i = gpu.thread.x\n    x[i] = math.sqrt(x[i])  # uses __nv_sqrt from libdevice\n\nx = [float(i) for i in range(10)]\nhello(x, grid=1, block=10)\nprint(x)\n</code></pre> <p>gives:</p> <pre><code>[0, 1, 1.41421, 1.73205, 2, 2.23607, 2.44949, 2.64575, 2.82843, 3]\n</code></pre> <p>The same is also applicable for NumPy library functions.</p>"},{"location":"parallel/gpu/#libdevice","title":"Libdevice","text":"<p>Codon uses libdevice for GPU-optimized math functions. The default libdevice path is <code>/usr/local/cuda/nvvm/libdevice/libdevice.10.bc</code>. An alternative path can be specified via the <code>-libdevice</code> compiler flag.</p>"},{"location":"parallel/gpu/#using-raw-pointers","title":"Using raw pointers","text":"<p>By default, objects are converted entirely to their GPU counterparts, which have the same data layout as the original objects (although the Codon compiler might perform optimizations by swapping a CPU implementation of a data type with a GPU-optimized implementation that exposes the same API). This preserves all of Codon/Python's standard semantics within the kernel.</p> <p>It is possible to use a kernel with raw pointers via <code>gpu.raw</code>, which corresponds to how the kernel would be written in C++/CUDA:</p> <pre><code>import gpu\n\n@gpu.kernel\ndef hello(a, b, c):\n    i = gpu.thread.x\n    c[i] = a[i] + b[i]\n\na = [i for i in range(16)]\nb = [2*i for i in range(16)]\nc = [0 for _ in range(16)]\n\n# call the kernel with three int-pointer arguments:\nhello(gpu.raw(a), gpu.raw(b), gpu.raw(c), grid=1, block=16)\nprint(c)  # output same as first snippet's\n</code></pre> <p><code>gpu.raw</code> can avoid an extra pointer indirection, but outputs a Codon <code>Ptr</code> object, meaning the corresponding kernel parameters will not have the full list API, instead having the more limited <code>Ptr</code> API (which primarily just supports indexing/assignment).</p>"},{"location":"parallel/gpu/#object-conversions","title":"Object conversions","text":"<p>A hidden API is used to copy objects to and from the GPU device. This API consists of two new magic methods:</p> <ul> <li> <p><code>__to_gpu__(self)</code>: Allocates the necessary GPU memory and copies the object <code>self</code> to   the device.</p> </li> <li> <p><code>__from_gpu__(self, gpu_object)</code>: Copies the GPU memory of <code>gpu_object</code> (which is   a value returned by <code>__to_gpu__</code>) back to the CPU object <code>self</code>.</p> </li> </ul> <p>For primitive types like <code>int</code> and <code>float</code>, <code>__to_gpu__</code> simply returns <code>self</code> and <code>__from_gpu__</code> does nothing. These methods are defined for all the built-in types and are automatically generated for user-defined classes, so most objects can be transferred back and forth from the GPU seamlessly. A user-defined class that makes use of raw pointers or other low-level constructs will have to define these methods for GPU use. Please refer to the <code>gpu</code> module for implementation examples.</p>"},{"location":"parallel/gpu/#pargputrue","title":"<code>@par(gpu=True)</code>","text":"<p>Codon's <code>@par</code> syntax can be used to seamlessly parallelize existing loops on the GPU, without needing to explicitly write them as kernels. For loop nests, the <code>collapse</code> argument can be used to cover the entire iteration space on the GPU. For example, here is the Mandelbrot code above written using <code>@par</code>:</p> <pre><code>import numpy as np\n\nMAX    = 1000  # maximum Mandelbrot iterations\nN      = 4096  # width and height of image\npixels = np.empty((N, N), dtype=int)\n\ndef scale(x, a, b):\n    return a + (x/N)*(b - a)\n\n@par(gpu=True, collapse=2)\nfor i in range(N):\n    for j in range(N):\n        c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))\n        z = 0j\n        iteration = 0\n\n        while abs(z) &lt;= 2 and iteration &lt; MAX:\n            z = z**2 + c\n            iteration += 1\n\n        pixels[i, j] = int(255 * iteration/MAX)\n</code></pre> <p>Note that the <code>gpu=True</code> option disallows shared variables (i.e. assigning out-of-loop variables in the loop body) as well as reductions. The other GPU-specific restrictions described here apply as well.</p>"},{"location":"parallel/gpu/#troubleshooting","title":"Troubleshooting","text":"<p>CUDA errors resulting in kernel abortion are printed, and typically arise from invalid code in the kernel, either via using exceptions or using unsupported modules/objects.</p>"},{"location":"parallel/multithreading/","title":"Multithreading","text":"<p>Codon supports parallelism and multithreading via OpenMP out of the box. Here's an example:</p> <pre><code>@par\nfor i in range(10):\n    import threading as thr\n    print('hello from thread', thr.get_ident())\n</code></pre> <p>By default, parallel loops will use all available threads, or use the number of threads specified by the <code>OMP_NUM_THREADS</code> environment variable. A specific thread number can be given directly on the <code>@par</code> line as well:</p> <pre><code>@par(num_threads=5)\nfor i in range(10):\n    import threading as thr\n    print('hello from thread', thr.get_ident())\n</code></pre> <p><code>@par</code> supports several OpenMP parameters, including:</p> <ul> <li><code>num_threads</code> (int): the number of threads to use when running the     loop</li> <li><code>schedule</code> (str): either static, dynamic, guided, auto or     runtime</li> <li><code>chunk_size</code> (int): chunk size when partitioning loop iterations</li> <li><code>ordered</code> (bool): whether the loop iterations should be executed in     the same order</li> <li><code>collapse</code> (int): number of loop nests to collapse into a single     iteration space</li> </ul> <p>Other OpenMP parameters like <code>private</code>, <code>shared</code> or <code>reduction</code>, are inferred automatically by the compiler. For example, the following loop</p> <pre><code>a = 0\n@par\nfor i in range(N):\n    a += foo(i)\n</code></pre> <p>will automatically generate a reduction for variable <code>a</code>.</p> <p>Warning</p> <p>Modifying shared objects like lists or dictionaries within a parallel section needs to be done with a lock or critical section. See below for more details.</p> <p>Here is an example that finds the number of primes up to a user-defined limit, using a parallel loop on 16 threads with a dynamic schedule and chunk size of 100:</p> <pre><code>from sys import argv\n\ndef is_prime(n):\n    factors = 0\n    for i in range(2, n):\n        if n % i == 0:\n            factors += 1\n    return factors == 0\n\nlimit = int(argv[1])\ntotal = 0\n\n@par(schedule='dynamic', chunk_size=100, num_threads=16)\nfor i in range(2, limit):\n    if is_prime(i):\n        total += 1\n\nprint(total)\n</code></pre> <p>Static schedules work best when each loop iteration takes roughly the same amount of time, whereas dynamic schedules are superior when each iteration varies in duration. Since counting the factors of an integer takes more time for larger integers, we use a dynamic schedule here.</p> <p><code>@par</code> also supports C/C++ OpenMP pragma strings. For example, the <code>@par</code> line in the above example can also be written as:</p> <pre><code># same as: @par(schedule='dynamic', chunk_size=100, num_threads=16)\n@par('schedule(dynamic, 100) num_threads(16)')\n</code></pre>"},{"location":"parallel/multithreading/#loop-types","title":"Loop types","text":"<p><code>for</code>-loops can iterate over arbitrary generators, but OpenMP's parallel loop construct only applies to imperative for-loops of the form <code>for i in range(a, b, c)</code> (where <code>c</code> is constant). For general parallel for-loops of the form <code>for i in some_generator()</code>, a task-based approach is used instead, where each loop iteration is executed as an independent task.</p> <p>The Codon compiler also converts iterations over lists (<code>for a in some_list</code>) to imperative for-loops, meaning these loops can be executed using OpenMP's loop parallelism.</p>"},{"location":"parallel/multithreading/#custom-reductions","title":"Custom reductions","text":"<p>Codon can automatically generate efficient reductions for <code>int</code> and <code>float</code> values. For other data types, user-defined reductions can be specified. A class that supports reductions must include:</p> <ul> <li>A default constructor that represents the zero value</li> <li>An <code>__add__</code> method (assuming <code>+</code> is used as the reduction operator)</li> </ul> <p>Here is an example for reducing a new <code>Vector</code> type:</p> <pre><code>@tuple\nclass Vector:\n    x: int\n    y: int\n\n    def __new__():\n        return Vector(0, 0)\n\n    def __add__(self, other: Vector):\n        return Vector(self.x + other.x, self.y + other.y)\n\nv = Vector()\n@par\nfor i in range(100):\n    v += Vector(i,i)\nprint(v)  # (x: 4950, y: 4950)\n</code></pre>"},{"location":"parallel/multithreading/#openmp-constructs","title":"OpenMP constructs","text":"<p>All of OpenMP's API functions are accessible directly in Codon. For example:</p> <pre><code>import openmp as omp\nprint(omp.get_num_threads())\nomp.set_num_threads(32)\n</code></pre> <p>OpenMP's critical, master, single and ordered constructs can be applied via the corresponding decorators:</p> <pre><code>import openmp as omp\n\n@omp.critical\ndef only_run_by_one_thread_at_a_time():\n    print('critical!', omp.get_thread_num())\n\n@omp.master\ndef only_run_by_master_thread():\n    print('master!', omp.get_thread_num())\n\n@omp.single\ndef only_run_by_single_thread():\n    print('single!', omp.get_thread_num())\n\n@omp.ordered\ndef run_ordered_by_iteration(i):\n    print('ordered!', i)\n\n@par(ordered=True)\nfor i in range(100):\n    only_run_by_one_thread_at_a_time()\n    only_run_by_master_thread()\n    only_run_by_single_thread()\n    run_ordered_by_iteration(i)\n</code></pre> <p>For finer-grained locking, consider using the locks from the <code>threading</code> module:</p> <pre><code>from threading import Lock\nlock = Lock()  # or RLock for reentrant lock\n\n@par\nfor i in range(100):\n    with lock:\n        print('only one thread at a time allowed here')\n</code></pre>"},{"location":"start/changelog/","title":"Changelog","text":"<p>Below you can find release notes for each major Codon release, listing improvements, updates, optimizations and more for each new version.</p> <p>These release notes generally do not include small bug fixes. See the closed issues for more information.</p>"},{"location":"start/changelog/#v019","title":"v0.19","text":""},{"location":"start/changelog/#new-type-checking-engine","title":"New type checking engine","text":"<ul> <li>New type checker implementation that improves Python coverage.</li> <li>Class fields are now inferred automatically.</li> <li>Functions and classes no longer need forward declarations.</li> <li>Functions can be passed around and stored more freely (e.g. list of   lambda functions is now possible).</li> <li>More informative and helpful error messages.</li> </ul>"},{"location":"start/changelog/#backend-updates","title":"Backend updates","text":"<ul> <li>Upgraded to LLVM 20 (from 17).</li> <li>Upgraded to LLVM 20's OpenMP.</li> <li>Various improvements to backend codegen which result in better   performance across the board.</li> </ul>"},{"location":"start/changelog/#quality-of-life-and-other-updates","title":"Quality-of-life and other updates","text":"<ul> <li>Added support for <code>else</code> on <code>try</code>-statements.</li> <li>Updated semantics of <code>nonlocal</code> variables to match Python.</li> <li>Added broader support for Python's format strings.</li> <li>Improved compilation time.</li> </ul>"},{"location":"start/changelog/#v018","title":"v0.18","text":""},{"location":"start/changelog/#license-change","title":"License change","text":"<ul> <li>Codon is now truly open source under the Apache license.</li> <li>Exaloop continues to offer enterprise licenses with added support, services   and custom solutions for organizations that want and need them. Contact   info@exaloop.io to learn more.</li> </ul>"},{"location":"start/changelog/#new-codon-native-numpy-implementation","title":"New Codon-native NumPy implementation","text":"<ul> <li>New NumPy implementation for Codon, written in Codon itself.</li> <li>Interoperable with Codon's multithreading and GPU backends.</li> <li>NumPy-specific compiler optimizations (e.g. operator fusion optimizations)   added to Codon's standard optimization suite.</li> <li>Learn more in the Codon-NumPy docs.</li> </ul>"},{"location":"start/changelog/#new-compiler-options","title":"New compiler options","text":"<ul> <li><code>-fast-math</code> will enable fast-math optimizations.   Use this flag with caution as it changes floating-point semantics.</li> </ul>"},{"location":"start/changelog/#v017","title":"v0.17","text":""},{"location":"start/changelog/#llvm-upgrade","title":"LLVM upgrade","text":"<p>Upgraded to LLVM 17 (from 15).</p>"},{"location":"start/changelog/#standard-library-updates","title":"Standard library updates","text":"<ul> <li>New floating-point types <code>float16</code>, <code>bfloat16</code> and <code>float128</code>.</li> <li>Updates to several existing functions, such as adding <code>key</code> and   <code>default</code> arguments to <code>min()</code> and <code>max()</code>.</li> <li>Slice arguments can now be of any type, not just <code>int</code>.</li> <li>Added <code>input()</code> function.</li> </ul>"},{"location":"start/changelog/#other-improvements","title":"Other improvements","text":"<ul> <li>Property setters are now supported.</li> <li>Updated import logic to match CPython's more closely.</li> <li>Several improvements to dynamic polymorphism to match CPython more   closely.</li> </ul>"},{"location":"start/changelog/#new-compiler-options_1","title":"New compiler options","text":"<ul> <li><code>-disable-exceptions</code> will disable exceptions, potentially eliding   various runtime checks (e.g. bounds checks for lists). This flag   should only be used if you know that no exceptions will be raised   in the given program.</li> </ul>"},{"location":"start/changelog/#v016","title":"v0.16","text":""},{"location":"start/changelog/#python-extensions","title":"Python extensions","text":"<p>A new build mode is added to <code>codon</code> called <code>pyext</code> which compiles to Python extension modules, allowing Codon code to be imported and called directly from Python (similar to Cython). Please see the docs for more information and usage examples.</p>"},{"location":"start/changelog/#standard-library-updates_1","title":"Standard library updates","text":"<ul> <li> <p>Various additions to the standard library, such as <code>math.fsum()</code> and   the built-in <code>pow()</code>.</p> </li> <li> <p>Added <code>complex64</code>, which is a complex number with 32-bit float real and   imaginary components.</p> </li> <li> <p>Better <code>Int[N]</code> and <code>UInt[N]</code> support: can now convert ints wider than   64-bit to string; now supports more operators.</p> </li> </ul>"},{"location":"start/changelog/#more-python-specific-optimizations","title":"More Python-specific optimizations","text":"<p>New optimizations for specific patterns including <code>any()</code>/<code>all()</code> and multiple list concatenations. These patterns are now recognized and optimized in Codon's IR.</p>"},{"location":"start/changelog/#static-expressions","title":"Static expressions","text":"<p>Codon now supports more compile-time static functions, such as <code>staticenumerate</code>.</p>"},{"location":"start/changelog/#v015","title":"v0.15","text":""},{"location":"start/changelog/#union-types","title":"Union types","text":"<p>Codon adds support for union types (e.g., <code>Union[int, float]</code>):</p> <pre><code>def foo(cmd) -&gt; Union:\n    if cmd == 'int': return 1\n    else: return \"s\"\nfoo('int')        # type is Union[int,str]\n5 + foo('int')    # 6\n'a' + foo('str')  # as\n</code></pre>"},{"location":"start/changelog/#dynamic-inheritance","title":"Dynamic inheritance","text":"<p>Dynamic inheritance and polymorphism are now supported:</p> <pre><code>class A:\n    def __repr__(): return 'A'\nclass B(A):\n    def __repr__(): return 'B'\nl = [A(), B(), A()]  # type of l is List[A]\nprint(l)  # [A, B, A]\n</code></pre> <p>This feature is still a work in progress.</p>"},{"location":"start/changelog/#llvm-upgrade_1","title":"LLVM upgrade","text":"<p>Upgraded to LLVM 15 (from 12). Note that LLVM 15 now uses opaque pointers, e.g. <code>ptr</code> instead of <code>i8*</code> or <code>i64*</code>, which affects <code>@llvm</code> functions written in Codon as well as LLVM IR output of <code>codon build</code>.</p>"},{"location":"start/changelog/#standard-library","title":"Standard library","text":"<p><code>random</code> module now matches Python exactly for the same seed.</p>"},{"location":"start/changelog/#v014","title":"v0.14","text":""},{"location":"start/changelog/#gpu-support","title":"GPU support","text":"<p>GPU kernels can now be written and called in Codon. Existing loops can be parallelized on the GPU with the <code>@par(gpu=True)</code> annotation. Please see the docs for more information and examples.</p>"},{"location":"start/changelog/#semantics","title":"Semantics","text":"<p>Added <code>-numerics</code> flag, which specifies semantics of various numeric operations:</p> <ul> <li><code>-numerics=c</code> (default): C semantics; best performance</li> <li><code>-numerics=py</code>: Python semantics (checks for zero divisors   and raises <code>ZeroDivisionError</code>, and adds domain checks to <code>math</code>   functions); might slightly decrease performance.</li> </ul>"},{"location":"start/changelog/#types","title":"Types","text":"<p>Added <code>float32</code> type to represent 32-bit floats (equivalent to C's <code>float</code>). All <code>math</code> functions now have <code>float32</code> overloads.</p>"},{"location":"start/changelog/#parallelism","title":"Parallelism","text":"<p>Added <code>collapse</code> option to <code>@par</code>:</p> <pre><code>@par(collapse=2)  # parallelize entire iteration space of 2 loops\nfor i in range(N):\n    for j in range(N):\n        do_work(i, j)\n</code></pre>"},{"location":"start/changelog/#standard-library_1","title":"Standard library","text":"<p>Added <code>collections.defaultdict</code>.</p>"},{"location":"start/changelog/#python-interoperability","title":"Python interoperability","text":"<p>Various Python interoperability improvements: can now use <code>isinstance</code> on Python objects/types and can now catch Python exceptions by name.</p>"},{"location":"start/changelog/#v013","title":"v0.13","text":""},{"location":"start/changelog/#language","title":"Language","text":""},{"location":"start/changelog/#scoping","title":"Scoping","text":"<p>Scoping was changed to match Python scoping. For example:</p> <pre><code>if condition:\n    x = 42\n\nprint(x)\n</code></pre> <p>If condition is <code>False</code>, referencing <code>x</code> causes a <code>NameError</code> to be raised at runtime, much like what happens in Python. There is zero new performance overhead for code using the old scoping; code using the new scoping as above generates a flag to indicate whether the given variable has been assigned.</p> <p>Moreover, variables can now be assigned to different types:</p> <pre><code>x = 42\nprint(x)  # 42\nx = 'hello'\nprint(x)  # hello\n</code></pre> <p>The same applies in Jupyter or JIT environments.</p>"},{"location":"start/changelog/#static-methods","title":"Static methods","text":"<p>Added support for <code>@staticmethod</code> method decorator. Class variables are also supported:</p> <pre><code>class Cls:\n    a = 5  # or \"a: ClassVar[int] = 5\" (PEP 526)\n\n    @staticmethod\n    def method():\n        print('hello world')\n\nc = Cls()\nCls.a, Cls.method(), c.a, c.method()  # supported\n</code></pre>"},{"location":"start/changelog/#tuple-handling","title":"Tuple handling","text":"<p>Arbitrary classes can now be converted to tuples via the <code>tuple()</code> function.</p>"},{"location":"start/changelog/#void-type","title":"Void type","text":"<p>The <code>void</code> type has been completely removed in favor of the new and Pythonic <code>NoneType</code>, which compiles to an empty LLVM struct. This does not affect C interoperability as the empty struct type is replaced by <code>void</code> by LLVM.</p>"},{"location":"start/changelog/#standard-library_2","title":"Standard library","text":"<p>The <code>re</code> module is now fully supported, and uses Google's <code>re2</code> as a backend. Future versions of Codon will also include an additional regex optimization pass to compile constant (\"known at compile time\") regular expressions to native code.</p>"},{"location":"start/changelog/#c-variables","title":"C variables","text":"<p>Global variables with C linkage can now be imported via <code>from C import</code>:</p> <pre><code># assumes the C variable \"long foo\"\nfrom C import foo: int\nprint(foo)\n</code></pre>"},{"location":"start/changelog/#parallelism_1","title":"Parallelism","text":"<p>Numerous improvements to the OpenMP backend, including the addition of task-based reductions:</p> <pre><code>total = 0\n@par\nfor a in some_arbitrary_generator():\n    total += do_work(a)  # now converted to task reduction\n</code></pre>"},{"location":"start/changelog/#python-interoperability_1","title":"Python interoperability","text":"<p>Included revamped <code>codon</code> module for Python, with <code>@codon.jit</code> decorator for compiling Python code in existing codebases. Further improved and optimized the Python bridge. Please see the docs for more information.</p>"},{"location":"start/changelog/#codon-ir","title":"Codon IR","text":"<p>New capture analysis pass for Codon IR for improving tasks such as dead code elimination and side effect analysis. This allows Codon IR to deduce whether arbitrary, compilable Python expressions have side effects, capture variables, and more.</p>"},{"location":"start/changelog/#code-generation-and-optimizations","title":"Code generation and optimizations","text":"<p>A new dynamic allocation optimization pass is included, which 1) removes unused allocations (e.g. instantiating a class but never using it) and 2) demotes small heap allocations to stack (<code>alloca</code>) allocations when possible. The latter optimization can frequently remove any overhead associated with instantiating most classes.</p>"},{"location":"start/changelog/#command-line-tool","title":"Command-line tool","text":"<p>The <code>codon</code> binary can now compile to shared libraries using the <code>-lib</code> option to <code>codon build</code> (or it can be deduced from a <code>.so</code> or <code>.dylib</code> extension on the output file name).</p>"},{"location":"start/changelog/#errors","title":"Errors","text":"<p>Added support for multiple error reporting.</p>"},{"location":"start/faq/","title":"FAQ","text":""},{"location":"start/faq/#technical","title":"Technical","text":""},{"location":"start/faq/#what-is-codon","title":"What is Codon?","text":"<p>Codon is a high-performance Python compiler that compiles Python code to native machine code without any runtime overhead. Typical speedups over Python are on the order of 10-100x or more, on a single thread. Codon's performance is typically on par with that of C/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times higher still. Codon is extensible via a plugin infrastructure, which lets you incorporate new libraries, compiler optimizations and even keywords.</p>"},{"location":"start/faq/#what-isnt-codon","title":"What isn't Codon?","text":"<p>While Codon supports nearly all of Python's syntax, it is not a drop-in replacement, and large codebases might require modifications to be run through the Codon compiler. For example, some of Python's modules are not yet implemented within Codon, and a few of Python's dynamic features are disallowed. The Codon compiler produces detailed error messages to help identify and resolve any incompatibilities. Codon supports seamless Python interoperability to handle cases where specific Python libraries or dynamism are required, and also supports writing Python extension modules that can be imported and used from larger Python codebases.</p>"},{"location":"start/faq/#why-codon","title":"Why Codon?","text":"<p>Python is arguably the world's most popular programming language, and is gradually becoming the lingua franca particularly amongst non-technical or non-CS practitioners in numerous fields. It provides a readable, clean syntax, is easy to learn, and has an unmatched ecosystem of libraries. However, Python's achilles heel has always been performance: a typical codebase in pure Python is orders of magnitude slower than its C/C++/Rust counterpart.</p> <p>Codon bridges the gap between Python's simplicity and ease-of-use, and the performance of low-level languages like C++ or Rust, by using novel compiler and type checking techniques to statically compile code ahead-of-time, avoiding all of vanilla Python's runtime overhead and performance drawbacks.</p>"},{"location":"start/faq/#how-does-codon-compare-to","title":"How does Codon compare to...","text":"<ul> <li> <p>CPython? Codon tries to follow CPython's syntax, semantics and APIs as   closely as possible, aside from a few cases where Codon differs from CPython for   performance reasons (one example being Codon's 64-bit <code>int</code> vs. CPython's arbitrary-   width <code>int</code>). Performance-wise, speedups over CPython are usually on the order of 10-100x.</p> </li> <li> <p>Numba? While Codon does offer a JIT decorator similar to Numba's, Codon is in   general an ahead-of-time compiler that compiles end-to-end programs to native code.   It also supports compilation of a much broader set of Python constructs and libraries.</p> </li> <li> <p>PyPy? PyPy strives to effectively be a drop-in replacement for CPython, whereas   Codon differs in a few places in order to eliminate any dynamic runtime or virtual   machine, and thereby attain much better performance.</p> </li> <li> <p>Cython? Like Cython, Codon has a Python-extension build mode that   compiles to Python extension modules, allowing Codon-compiled code to be imported and called   from plain Python.</p> </li> <li> <p>C++? Codon often generates the same code as an equivalent C or C++ program. Codon   can sometimes generate better code than C/C++ compilers for a variety of reasons, such   as better container implementations, the fact that Codon does not use object files and   inlines all library code, or Codon-specific compiler optimizations that are not performed   with C or C++.</p> </li> <li> <p>Julia? Codon's compilation process is actually much closer to C++ than to Julia. Julia   is a dynamically-typed language that performs type inference as an optimization, whereas   Codon type checks the entire program ahead of time. Codon also tries to circumvent the learning   curve of a new language by adopting Python's syntax and semantics.</p> </li> <li> <p>Mojo? Mojo strives to add low-level programming support/features to the Python language,   while also supporting the rest of Python by relying on CPython. By contrast, Codon aims to   make Python itself more performant by using new type checking and compilation techniques,   without trying to be a superset or drop-in replacement. Codon tries to minimize new syntax   and language features with respect to Python.</p> </li> </ul> <p>You can see results from Codon's benchmark suite suite at exaloop.io/#benchmarks. More benchmarks can be found in the 2019 paper on bioinformatics-specific use cases (note that the name used in that paper is that of Codon's predecessor, \"Seq\").</p>"},{"location":"start/faq/#i-want-to-use-codon-but-i-have-a-large-python-codebase-i-dont-want-to-port","title":"I want to use Codon, but I have a large Python codebase I don't want to port.","text":"<p>You can use Codon on a per-function basis via the <code>@codon.jit</code> decorator, which can be used within Python codebases. This will compile only the annotated functions and automatically handle data conversions to and from Codon. It also allows for the use of any Codon-specific modules or extensions, such as multithreading.</p> <p>Codon can also compile to Python extension modules that can be imported and used from Python.</p>"},{"location":"start/faq/#what-about-interoperability-with-other-languages-and-frameworks","title":"What about interoperability with other languages and frameworks?","text":"<p>Interoperability is and will continue to be a priority for Codon. We don't want using Codon to render you unable to use all the other great frameworks and libraries that exist. Codon supports full interoperability with Python and C/C++.</p>"},{"location":"start/faq/#does-codon-use-garbage-collection","title":"Does Codon use garbage collection?","text":"<p>Yes, Codon uses the Boehm garbage collector.</p>"},{"location":"start/faq/#codon-doesnt-support-python-module-x-or-function-y","title":"Codon doesn't support Python module X or function Y.","text":"<p>While Codon covers a sizeable subset of Python's standard library, it does not yet cover every function from every module. Note that missing functions can still be called through Python via <code>from python import</code>. Many of the functions that lack Codon-native implementations (e.g. I/O or OS related functions) will generally also not see substantial speedups from Codon.</p>"},{"location":"start/faq/#codon-is-no-faster-than-python-for-my-application","title":"Codon is no faster than Python for my application.","text":"<p>Applications that spend most of their time in C-implemented library code generally do not see substantial performance improvements in Codon. Similarly, applications that are I/O or network-bound will have the same bottlenecks in Codon.</p>"},{"location":"start/faq/#codon-is-slower-than-python-for-my-application","title":"Codon is slower than Python for my application.","text":"<p>Please report any cases where Codon is noticeably slower than Python as bugs on our issue tracker.</p>"},{"location":"start/faq/#usage","title":"Usage","text":""},{"location":"start/faq/#is-codon-free-and-open-source","title":"Is Codon free and open source?","text":"<p>Yes, Codon is free and open source under the Apache License, Version 2.0. Exaloop offers enterprise and custom solutions on top of Codon for a variety of applications, use cases and industries; please email info@exaloop.io to learn more.</p>"},{"location":"start/faq/#contributing","title":"Contributing","text":""},{"location":"start/faq/#does-codon-accept-outside-contributions","title":"Does Codon accept outside contributions?","text":"<p>Absolutely, we'd be delighted to accept any contributions in the form of issues, bug reports, feature requests or pull requests.</p>"},{"location":"start/faq/#i-want-to-contribute-where-do-i-start","title":"I want to contribute. Where do I start?","text":"<p>If you have a specific feature or use case in mind, here is a quick breakdown of the codebase to help provide a sense of where to look first:</p> <ul> <li><code>codon/</code>: compiler code</li> <li><code>codon/parser/</code>:     parser and type checker code: this is the first step of compilation</li> <li><code>codon/cir/</code>:     Codon IR and optimizations: the second step of compilation</li> <li><code>codon/cir/llvm/</code>:     conversion from Codon IR to LLVM IR and machine code: the last step of compilation</li> <li><code>codon/runtime/</code>:     runtime library: used during execution</li> <li><code>stdlib/</code>: standard library code</li> </ul> <p>You can also take a look at some of the open issues. If you have any question or suggestions, please feel free to ask in the forum.</p>"},{"location":"start/faq/#is-there-a-contributor-license-agreement-cla","title":"Is there a Contributor License Agreement (CLA)?","text":"<p>Yes, there is a CLA that is required to be agreed to before any pull requests are merged. Please see exaloop.io/legal/cla for more information. To agree to the CLA, send an email with your GitHub username to info@exaloop.io.</p>"},{"location":"start/install/","title":"Installation","text":""},{"location":"start/install/#install-codon","title":"Install Codon","text":"Command-line tool \u00a0 Python package <p>Use this command to install the Codon CLI that can be used to compile and run programs from the command line:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://exaloop.io/install.sh)\"\n</code></pre> <p>Follow the prompts to add the <code>codon</code> command to your path.</p> <p>Use this command to install the <code>codon</code> Python package, which can be used to compile functions in an existing Python codebase:</p> <pre><code>pip install codon-jit\n</code></pre> <p>With this package installed, you can use the <code>@codon.jit</code> decorator. Learn more \u2192</p> <p>Info</p> <p>Codon is supported natively on  Linux and  macOS. If you are using  Windows, we recommend using Codon through WSL.</p>"},{"location":"start/install/#run-your-first-program","title":"Run your first program","text":"<p>With the <code>codon</code> command installed, we can compile and run a simple hello-world program:</p> <pre><code>print('Hello, World!')\n</code></pre> <p>If we save this simple program to a file called <code>hello.py</code>, we can compile and run with the <code>codon run</code> subcommand:</p> <pre><code>codon run hello.py\n</code></pre> <p>which prints the <code>Hello, World!</code> message as expected.</p>"},{"location":"start/install/#enable-optimizations","title":"Enable optimizations","text":"<p>By default, <code>codon</code> runs programs without optimizations enabled. You can enable optimizations with the <code>-release</code> flag. Let's look at a slightly more involved example to see the effect of this flag:</p> <pre><code>from time import time\n\ndef fib(n):\n    return n if n &lt; 2 else fib(n - 1) + fib(n - 2)\n\nt0 = time()\nans = fib(40)\nt1 = time()\nprint(f'Computed fib(40) = {ans} in {t1 - t0} seconds.')\n</code></pre> <p>This program computes the 40th Fibonacci number using simple recursion. We can run the program with optimizations enabled like this:</p> <pre><code>codon run -release fib.py\n</code></pre> <p>Let's see what happens when we run this program using Python and Codon without optimizations<sup>1</sup>:</p> Command Time taken (sec.) Speedup <code>python3.13 fib.py</code> 14.26 1\\(\\times\\) <code>codon run fib.py</code> 0.43 33\\(\\times\\) <code>codon run -release fib.py</code> 0.31 46\\(\\times\\) <p>That's a 46\\(\\times\\) speedup from using Codon with the <code>-release</code> flag!</p> <ol> <li> <p>Times were measured on an M1 MacBook Pro.\u00a0\u21a9</p> </li> </ol>"},{"location":"start/usage/","title":"Usage","text":"<p>The <code>codon</code> command includes several subcommands for compiling and executing code.</p>"},{"location":"start/usage/#codon-run","title":"<code>codon run</code>","text":"<p><code>codon run</code> will compile and execute the provided program:</p> <pre><code>codon run file.py           # compile and run (defaults to debug mode)\ncodon run -debug file.py    # compile and run in debug mode\ncodon run -release file.py  # compile and run with optimizations\n</code></pre> <p>If the file is given as <code>-</code>, then the program is read from standard input:</p> <pre><code>echo 'print(\"hello\")' | codon run -release -\n# hello\n</code></pre> <p>Program arguments can be provided after the file, as in:</p> <pre><code>codon run -release file.py arg1 arg2 arg3\n</code></pre> <p>For example:</p> <pre><code>echo 'import sys; print(sys.argv)' | codon run -release - arg1 arg2 arg3\n# ['-', 'arg1', 'arg2', 'arg3']\n</code></pre>"},{"location":"start/usage/#codon-build","title":"<code>codon build</code>","text":"<p><code>codon build</code> will compile to a desired output type, be it an executable, object file, shared library, LLVM IR or Python extension. The <code>-release</code> and <code>-debug</code> flags also apply to <code>codon build</code> in the same way as described from <code>codon run</code> above.</p> <p>The optional <code>-o &lt;file&gt;</code> parameter can be used to specify the output file. If no output type is specified, the output type is determined from the file name provided to <code>-o</code>. If no output file name is specified, the output file name is derived from the input file name, in combination with the output type (e.g. compiling <code>foo.py</code> to an object file results in output file <code>foo.o</code>).</p>"},{"location":"start/usage/#compile-to-executable","title":"Compile to executable","text":"<p>The <code>-exe</code> flag can be used to generate an executable:</p> <pre><code># compile 'program.py' to executable 'program'\ncodon build -exe program.py\n\n# compile 'program.py' to executable 'hello'\ncodon build -exe -o hello program.py\n\n# compile 'program.py' to executable 'hello' with optimizations\ncodon build -exe -o hello -release program.py\n\n# compile 'program.py' to executable 'hello' with optimizations\n# '-exe' is inferred from `-o` argument\ncodon build -o hello -release program.py\n</code></pre> <p>Codon uses a C++ compiler to link the actual executable after compilation. Extra linker flags can be passed with the <code>-linker-flags</code> argument. For example:</p> <pre><code># includes /foo/bar in the executable's rpath\ncodon build -release -linker-flags '-Wl,-rpath,/foo/bar' program.py\n</code></pre> <p>Multiple linker flags can be passed by separating them with a space in the argument to <code>-linker-flags</code>.</p>"},{"location":"start/usage/#compile-to-shared-library","title":"Compile to shared library","text":"<p>The <code>-lib</code> flag can be used to generate a shared library:</p> <pre><code># compile 'program.py' to shared library 'program.so'\ncodon build -lib program.py\n\n# compile 'program.py' to shared library 'hello.so'\ncodon build -lib -o hello.so program.py\n\n# compile 'program.py' to shared library 'hello.so' with optimizations\ncodon build -lib -o hello.so -release program.py\n\n# compile 'program.py' to shared library 'hello.so' with optimizations\n# '-lib' is inferred from `-o` argument\ncodon build -o hello.so -release program.py\n</code></pre> <p>The <code>-linker-flags</code> flag described above also applies when compiling to a shared library.</p> <p>Info</p> <p>When compiling to a shared library, the program's main code will be included and executed when the library is loaded as a global constructor. This allows you to include any necessary initialization code in the main program. This behavior can be controlled via the <code>-global-ctor=&lt;yes|no|auto&gt;</code> flag, which enables e.g. global constructor creation when compiling to other output types like object files.</p> <p>Info</p> <p>If you intend to call a Codon-generated shared library from C or C++, be sure to mark relevant functions with <code>@export</code> to ensure they are made visible by the linker. Exported functions can be called as regular C functions (i.e. they follow the C ABI). Learn more \u2192</p>"},{"location":"start/usage/#compile-to-object-file","title":"Compile to object file","text":"<p>The <code>-obj</code> flag can be used to generate an object file:</p> <pre><code># compile 'program.py' to object file 'program.o'\ncodon build -obj program.py\n\n# compile 'program.py' to object file 'hello.o'\ncodon build -obj -o hello.o program.py\n\n# compile 'program.py' to object file 'hello.o' with optimizations\ncodon build -obj -o hello.o -release program.py\n\n# compile 'program.py' to object file 'hello.o' with optimizations\n# '-obj' is inferred from `-o` argument\ncodon build -o hello.o -release program.py\n</code></pre>"},{"location":"start/usage/#compile-to-assembly-code","title":"Compile to assembly code","text":"<p>The <code>-asm</code> flag can be used to generate assembly code:</p> <pre><code># compile 'program.py' to assembly file 'program.s'\ncodon build -asm program.py\n\n# compile 'program.py' to assembly file 'hello.o'\ncodon build -asm -o hello.s program.py\n\n# compile 'program.py' to assembly file 'hello.s' with optimizations\ncodon build -asm -o hello.s -release program.py\n\n# compile 'program.py' to assembly file 'hello.s' with optimizations\n# '-asm' is inferred from `-o` argument\ncodon build -o hello.s -release program.py\n</code></pre>"},{"location":"start/usage/#compile-to-llvm-ir","title":"Compile to LLVM IR","text":"<p>The <code>-llvm</code> flag can be used to generate LLVM IR:</p> <pre><code># compile 'program.py' to LLVM IR file 'program.ll'\ncodon build -llvm program.py\n\n# compile 'program.py' to LLVM IR file 'hello.ll'\ncodon build -llvm -o hello.ll program.py\n\n# compile 'program.py' to LLVM IR file 'hello.ll' with optimizations\ncodon build -llvm -o hello.ll -release program.py\n\n# compile 'program.py' to LLVM IR file 'hello.ll' with optimizations\n# '-llvm' is inferred from `-o` argument\ncodon build -o hello.ll -release program.py\n</code></pre>"},{"location":"start/usage/#compile-to-python-extension","title":"Compile to Python extension","text":"<p>The <code>-pyext</code> flag can be used to generate a Python extension:</p> <pre><code># compile 'program.py' to Python extension 'program.o'\ncodon build -pyext program.py\n\n# compile 'program.py' to Python extension 'hello.o'\ncodon build -pyext -o hello.o program.py\n\n# compile 'program.py' to Python extension 'hello.o' with optimizations\ncodon build -pyext -o hello.o -release program.py\n\n# compile 'program.py' to Python extension 'hello.o' with module\n# name 'mymodule' and optimizations enabled\ncodon build -pyext -o hello.o -release -module mymodule program.py\n</code></pre> <p>Info</p> <p>When using <code>-pyext</code>, you will also often want to use the <code>--relocation-model=pic</code> flag to generate position-independent code.</p>"},{"location":"start/usage/#codon-jit","title":"<code>codon jit</code>","text":"<p>Codon provides a debugging interface for its JIT compilation capabilities through the <code>codon jit</code> subcommand. This subcommand uses the same JIT engine internally as used by Codon's Python JIT decorator and Jupyter kernel. However, it is intended to be used as a debugging utility rather than as a general usage mode.</p> <p>Warning</p> <p><code>codon jit</code> is intended to be used as a debugging utility for Codon's JIT compilation capabilities. The interface may change between Codon versions.</p> <p><code>codon jit</code> can be passed a file name to read from, or <code>-</code> to read from standard input. For example:</p> <pre><code>echo 'print(\"hello world\")' | codon jit -\n# &gt;&gt;&gt; Codon JIT v0.19.0 &lt;&lt;&lt;\n# hello world\n# [done]\n</code></pre> <p>It can also be used as a REPL if no file is provided. JIT inputs can be separated with the string <code>#%%</code>.</p>"},{"location":"start/usage/#using-codon-in-an-existing-python-codebase","title":"Using Codon in an existing Python codebase","text":"<p>Codon provides a Python package called <code>codon-jit</code> that can be installed with <code>pip</code>. This package supports JIT compilation on a per-function basis within an existing Python codebase.</p> <p>Learn more in the Python JIT docs.</p>"},{"location":"start/usage/#additional-options","title":"Additional options","text":""},{"location":"start/usage/#disabling-exceptions","title":"Disabling exceptions","text":"<p>By default, Codon does exception handling to match Python's semantics and behavior. If you know your program does not raise or catch exceptions, they can be disabled altogether with the <code>-disable-exceptions</code> flag.</p> <p><code>-disable-exceptions</code> can lead to (sometimes substantial) performance improvements by enabling the compiler to deduce additional information about the semantics of the program. For example, if the compiler can deduce that there will be no index errors in a loop that iterates over an array, it can potentially use that information to perform vectorization or other optimizations.</p> <p>In some contexts, exceptions are disabled automatically by Codon, such as when compiling for GPU execution.</p>"},{"location":"start/usage/#numerical-semantics","title":"Numerical semantics","text":"<p>For performance reasons, certain numerical operations in Codon follow C semantics by default. For example, integer division rounds towards zero in Codon whereas it rounds down in Python:</p> <pre><code>print((-3) // 2)\n# Codon: -1\n# Python: -2\n</code></pre> <p>Similarly, floating-point division by zero returns <code>inf</code> in Codon whereas it raises an exception in Python:</p> <pre><code>print(1.0 / 0.0)\n# Codon: inf\n# Python: 'ZeroDivisionError: float division by zero'\n</code></pre> <p>The <code>-numerics=&lt;mode&gt;</code> flag can be used to control this behavior:</p> <ul> <li><code>-numerics=c</code> (default): C semantics, as above</li> <li><code>-numerics=py</code>: Python semantics, matching Python behavior at the cost of performance</li> </ul>"},{"location":"start/usage/#fast-math","title":"Fast-math","text":"<p>Fast-math optimizations can be enabled with the <code>-fast-math</code> flag. Note that this flag makes various assumptions about <code>nan</code> and <code>inf</code> values, so it is best to use it with caution.</p>"},{"location":"start/usage/#disabling-optimization-passes","title":"Disabling optimization passes","text":"<p>The <code>-disable-opt &lt;pass&gt;</code> flag can be used to disable specific optimization passes. For example:</p> <pre><code># compile &amp; run with optimizations, but don't perform NumPy fusion optimization\ncodon run -release -disable-opt core-numpy-fusion program.py\n</code></pre>"},{"location":"start/usage/#compile-time-definitions","title":"Compile-time definitions","text":"<p>Literal variables can be passed on the command-line via the <code>-D</code> flag. These variables are treated as compile-time constants and can be used for compile-time metaprogramming.</p> <p>For example, the following code:</p> <pre><code>n = Int[N](42)\nprint(n * n)\n</code></pre> <p>can be executed with:</p> <pre><code>codon run -DN=16 program.py\n</code></pre> <p>to use a 16-bit integer as the type of variable <code>n</code>.</p>"},{"location":"start/usage/#logging","title":"Logging","text":"<p>Codon can display logging information and also output intermediate compilation results via the <code>-log &lt;streams&gt;</code> command. The argument to <code>-log</code> can contain any of the following characters:</p> <ul> <li><code>t</code> (time): Displays timings for various stages of the compilation process.</li> <li><code>T</code> (typecheck): Enables logging during type checking</li> <li><code>i</code> (IR): Enables logging during Codon IR passes</li> <li><code>l</code> (dump): Dumps intermediate compilation results, including AST, Codon IR and LLVM IR</li> </ul>"}]}