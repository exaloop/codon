# Copyright (C) 2022-2025 Exaloop Inc. <https://exaloop.io>

from internal.gc import sizeof

@extend
class Array:
    @llvm
    @pure
    @derives
    def __new__(ptr: Ptr[T], sz: int) -> Array[T]:
        %0 = insertvalue { i64, ptr } undef, i64 %sz, 0
        %1 = insertvalue { i64, ptr } %0, ptr %ptr, 1
        ret { i64, ptr } %1

    @overload
    def __new__(sz: int) -> Array[T]:
        return Array[T](Ptr[T](sz), sz)

    def __copy__(self) -> Array[T]:
        p = Ptr[T](self.len)
        str.memcpy(p.as_byte(), self.ptr.as_byte(), self.len * sizeof(T))
        return Array[T](p, self.len)

    def __deepcopy__(self) -> Array[T]:
        p = Ptr[T](self.len)
        i = 0
        while i < self.len:
            p[i] = self.ptr[i].__deepcopy__()
            i += 1
        return Array[T](p, self.len)

    def __len__(self) -> int:
        return self.len

    def __bool__(self) -> bool:
        return bool(self.len)

    def __getitem__(self, index: int) -> T:
        return self.ptr[index]

    def __setitem__(self, index: int, what: T):
        self.ptr[index] = what

    def slice(self, s: int, e: int) -> Array[T]:
        return Array[T](self.ptr + s, e - s)

array = Array

# Forward declarations
@dataclass(init=False)
class List:
    len: int
    arr: Array[T]
    T: type = NoneType
