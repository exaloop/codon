#%% while_else,barebones
a = 1
while a:
    print a #: 1
    a -= 1
else:
    print 'else' #: else
a = 1
while a:
    print a #: 1
    a -= 1
else not break:
    print 'else' #: else
while True:
    print 'infinite' #: infinite
    break
else:
    print 'nope'

#%% for_assignment,barebones
l = [[1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11]]
for a, *m, b in l:
    print a + b, len(m)
#: 5 2
#: 14 3
#: 21 0

#%% for_else,barebones
for i in [1]:
    print i #: 1
else:
    print 'else' #: else
for i in [1]:
    print i #: 1
else not break:
    print 'else' #: else
for i in [1]:
    print i #: 1
    break
else:
    print 'nope'

best = 4
for s in [3, 4, 5]:
    for i in [s]:
        if s >= best:
            print('b:', best)
            break
    else:
        print('s:', s)
        best = s
#: s: 3
#: b: 3
#: b: 3


#%% loop_domination,barebones
for i in range(2):
    try: dat = 1
    except: pass
    print(dat)
#: 1
#: 1

def comprehension_test(x):
    for n in range(3):
        print('>', n)
    l = ['1', '2', str(x)]
    x = [n for n in l]
    print(x, n)
comprehension_test(5)
#: > 0
#: > 1
#: > 2
#: ['1', '2', '5'] 2

#%% while,barebones
a = 3
while a:
    print a
    a -= 1
#: 3
#: 2
#: 1

#%% for_break_continue,barebones
for i in range(10):
    if i % 2 == 0:
        continue
    print i
    if i >= 5:
        break
#: 1
#: 3
#: 5

#%% for_error,barebones
for i in 1:
    pass
#! '1' object has no attribute '__iter__'

#%% for_void,barebones
def foo(): yield
for i in foo():
    print i.__class__.__name__  #: NoneType

#%% hetero_iter,barebones
e = (1, 2, 3, 'foo', 5, 'bar', 6)
for i in e:
    if isinstance(i, int):
        if i == 1: continue
    if isinstance(i, str):
        if i == 'bar': break
    print i

#%% static_for,barebones
def foo(i: Literal[int]):
    print('static', i, Int[i].__class__.__name__)

for i in static.tuple(1, 2, 3, 4, 5):
    foo(i)
    if i == 3: break
#: static 1 Int[1]
#: static 2 Int[2]
#: static 3 Int[3]
for i in static.range(9, 4, -2):
    foo(i)
    if i == 3:
        break
#: static 9 Int[9]
#: static 7 Int[7]
#: static 5 Int[5]
for i in static.tuple("x", 1, 3.3, 2):
    print(i)
#: x
#: 1
#: 3.3
#: 2

print tuple(Int[i+10](i) for i in static.tuple(1, 2, 3)).__class__.__name__
#: Tuple[Int[11],Int[12],Int[13]]

for i in static.range(0, 10):
    if i % 2 == 0: continue
    if i > 8: break
    print('xyz', Int[i].__class__.__name__)
print('whoa')
#: xyz Int[1]
#: xyz Int[3]
#: xyz Int[5]
#: xyz Int[7]
#: whoa

for i in static.range(15):
    if i % 2 == 0: continue
    if i > 8: break
    print('xyz', Int[i].__class__.__name__)
print('whoa')
#: xyz Int[1]
#: xyz Int[3]
#: xyz Int[5]
#: xyz Int[7]
#: whoa

print tuple(Int[i-10](i) for i in static.range(30,33)).__class__.__name__
#: Tuple[Int[20],Int[21],Int[22]]

for i in static.tuple(0, 2, 4, 7, 11, 12, 13):
    if i % 2 == 0: continue
    if i > 8: break
    print('xyz', Int[i].__class__.__name__)
print('whoa')
#: xyz Int[7]
#: whoa

for i in static.range(10):  # TODO: large values are too slow!
    pass
print('done')
#: done

tt = (5, 'x', 3.14, False, [1, 2])
for i, j in static.enumerate(tt):
    print(foo(i * 2 + 1), j)
#: static 1 Int[1]
#: None 5
#: static 3 Int[3]
#: None x
#: static 5 Int[5]
#: None 3.14
#: static 7 Int[7]
#: None False
#: static 9 Int[9]
#: None [1, 2]

print tuple((Int[i+1](i), j) for i, j in static.enumerate(tt)).__class__.__name__
#: Tuple[Tuple[Int[1],int],Tuple[Int[2],str],Tuple[Int[3],float],Tuple[Int[4],bool],Tuple[Int[5],List[int]]]

#%% static_range_error,barebones
for i in static.range(1000, -2000, -2):
    pass
#! static.range too large (expected 0..1024, got instead 1500)

#%% continue_error,barebones
continue #! 'continue' outside loop

#%% break_error,barebones
break #! 'break' outside loop
